Always use bun to install dependencies.

All dependencies must be peer dependencies.

# Running Tests with Bun

We use Bun for testing. Here's how to run tests:

```bash
# Run all tests
bun test

# Run tests in a specific file
bun test alchemy/test/stripe/price.test.ts

# Run a specific test in a specific file
bun test --test-name-pattern="create and update price" alchemy/test/stripe/price.test.ts
```

For resource tests, create a dedicated test file for each resource type following the pattern `alchemy/test/service-name/resource-name.test.ts`.

# Creating a New Service Resource

This guide provides step-by-step instructions for creating a new resource for a service (like Stripe's Price, Product, or Webhook resources).

## Step 1: Create the Resource File

Create a new file in the service directory with kebab-case naming:

```
alchemy/src/{{service-name}}/{{resource-name}}.ts
```

Example: `alchemy/src/stripe/price.ts`

## Step 2: Define Resource Interfaces

Start by importing dependencies and defining the resource interfaces:

```typescript
import { Resource, type Context } from "../resource";

/**
 * Properties for creating or updating a {{ResourceName}}
 */
export interface {{ResourceName}}Props {
  /**
   * {{Property description}}
   */
  propertyName: string;

  /**
   * {{Property description}}
   */
  anotherProperty?: number;

  // Add all required and optional properties
  // Include JSDoc comments for each property
}

/**
 * Output returned after {{ResourceName}} creation/update
 * IMPORTANT: The interface name MUST match the exported resource name
 * For example, if your resource is exported as "Product", this interface
 * should be named "Product" (not "ProductOutput")
 */
export interface {{ResourceName}} extends {{ResourceName}}Props {
  /**
   * The ID of the resource
   */
  id: string;

  /**
   * Time at which the object was created
   */
  createdAt: number;

  // Add all additional properties returned by the service
  // Include JSDoc comments for each property
}
```

## Step 3: API Client Implementation

Create a minimal API client that wraps fetch calls without excessive abstraction:

```typescript
/**
 * Options for {{ServiceName}} API requests
 */
export interface {{ServiceName}}ApiOptions {
  /**
   * API key or token to use (overrides environment variable)
   */
  apiKey?: string;

  /**
   * Account or project ID (overrides environment variable)
   */
  accountId?: string;
}

/**
 * Minimal API client using raw fetch
 */
export class {{ServiceName}}Api {
  /** Base URL for API */
  readonly baseUrl: string;

  /** API key or token */
  readonly apiKey: string;

  /** Account ID */
  readonly accountId: string;

  /**
   * Create a new API client
   *
   * @param options API options
   */
  constructor(options: {{ServiceName}}ApiOptions = {}) {
    // Initialize with environment variables or provided values
    this.baseUrl = "https://api.{{service-name}}.com/v1";
    this.apiKey = options.apiKey || process.env.{{SERVICE_API_KEY}} || '';
    this.accountId = options.accountId || process.env.{{SERVICE_ACCOUNT_ID}} || '';

    // Validate required configuration
    if (!this.apiKey) {
      throw new Error("{{SERVICE_API_KEY}} environment variable is required");
    }
  }

  /**
   * Make a request to the API
   *
   * @param path API path (without base URL)
   * @param init Fetch init options
   * @returns Raw Response object from fetch
   */
  async fetch(path: string, init: RequestInit = {}): Promise<Response> {
    // Set up authentication headers
    const headers: Record<string, string> = {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${this.apiKey}`
    };

    // Add headers from init if provided
    if (init.headers) {
      const initHeaders = init.headers as Record<string, string>;
      Object.keys(initHeaders).forEach(key => {
        headers[key] = initHeaders[key];
      });
    }

    // For FormData, remove Content-Type
    if (init.body instanceof FormData) {
      delete headers["Content-Type"];
    }

    // Make the request
    return fetch(`${this.baseUrl}${path}`, {
      ...init,
      headers
    });
  }

  /**
   * Helper for GET requests
   */
  async get(path: string, init: RequestInit = {}): Promise<Response> {
    return this.fetch(path, { ...init, method: "GET" });
  }

  /**
   * Helper for POST requests
   */
  async post(path: string, body: any, init: RequestInit = {}): Promise<Response> {
    const requestBody = body instanceof FormData ? body : JSON.stringify(body);
    return this.fetch(path, { ...init, method: "POST", body: requestBody });
  }

  /**
   * Helper for PUT requests
   */
  async put(path: string, body: any, init: RequestInit = {}): Promise<Response> {
    const requestBody = body instanceof FormData ? body : JSON.stringify(body);
    return this.fetch(path, { ...init, method: "PUT", body: requestBody });
  }

  /**
   * Helper for DELETE requests
   */
  async delete(path: string, init: RequestInit = {}): Promise<Response> {
    return this.fetch(path, { ...init, method: "DELETE" });
  }
}
```

## Step 4: Implement the Resource

Create the resource with the non-class pattern using `this` with Context type. The exported const MUST match the output interface name:

```typescript
export const {{ResourceName}} = Resource(
  "{{service-name}}::{{ResourceName}}",
  async function(this: Context<{{ResourceName}}> | void, id: string, props: {{ResourceName}}Props) {
    // IMPORTANT: We must use the output function to handle the resource lifecycle
    return output(id, props, async (props) => {
      // Create API client
      const api = new {{ServiceName}}Api();

      // Resource ID defaults to resource name if applicable
      const resourceId = props.id || this!.resourceID;

      if (this!.event === "delete") {
        if (this!.output?.id) {
          // Delete resource
          const deleteResponse = await api.delete(`/accounts/${api.accountId}/resources/${this!.output.id}`);

          // Check response status directly instead of relying on exceptions
          if (!deleteResponse.ok && deleteResponse.status !== 404) {
            const errorData = await deleteResponse.json().catch(() => ({ message: deleteResponse.statusText }));
            console.error("Error deleting resource:", errorData.message || deleteResponse.statusText);
          }
        }

        // Return destroyed (never type - indicates early termination)
        return destroyed();
      } else {
        try {
          let response;

          if (this!.event === "update" && this!.output?.id) {
            // Update existing resource
            response = await api.put(
              `/accounts/${api.accountId}/resources/${this!.output.id}`,
              {
                // Map props to API-expected format
                name: props.name,
                description: props.description
              }
            );
          } else {
            // Create new resource
            response = await api.post(
              `/accounts/${api.accountId}/resources`,
              {
                // Map props to API-expected format
                name: props.name,
                description: props.description
              }
            );
          }

          // Check response status directly
          if (!response.ok) {
            const errorData = await response.json().catch(() => ({ message: response.statusText }));
            throw new Error(`API error: ${errorData.message || response.statusText}`);
          }

          // Parse response JSON
          const data = await response.json();
          const resource = data.result || data;

          // Map API response to our output format
          return {
            id: resource.id,
            name: resource.name,
            description: resource.description,
            createdAt: resource.created_at || Date.now()
          };
        } catch (error) {
          console.error("Error creating/updating resource:", error);
          throw error;
        }
      }
    });
  },
);
```

### Important Note on `output()`

The `output()` function is required to properly handle the resource lifecycle. It takes:

1. The resource ID (string)
2. The resource props (same props object passed to the Resource function)
3. An async function that receives the props and contains the implementation logic

The implementation should return the resource data for create/update operations, or call `destroyed()` for delete operations.

Do NOT return a direct value from the Resource function - always use `return output(id, props, async (props) => { ... })` to wrap your implementation.

## Step 5: Export from Service Index

Create or update the service index file to export the new resource:

```typescript
// alchemy/src/{{service-name}}/index.ts
export * from "./{{resource-name}}";
```

## Step 6: Update Package.json

Add the service to package.json exports if not already present:

```json
"exports": {
  // ... existing exports
  "./{{service-name}}": "./lib/{{service-name}}/index.js"
}
```

Add the service SDK as a peer dependency if not already present:

```json
"peerDependencies": {
  // ... existing dependencies
  "{{service-sdk}}": "^x.y.z"
}
```

## Step 7: Create Tests

Create a test file that uses direct API interaction for verification:

```typescript
// alchemy/test/{{service-name}}/{{resource-name}}.test.ts
import { describe, test, expect } from "bun:test";
import { {{ResourceName}} } from "../../alchemy/src/{{service-name}}/{{resource-name}}";
import { apply } from "../../alchemy/src/apply";
import { destroy } from "../../alchemy/src/destroy";
import { {{ServiceName}}Api } from "../../alchemy/src/{{service-name}}/api";
import { BRANCH_PREFIX } from "../util";

describe("{{ResourceName}} Resource", () => {
  // Use BRANCH_PREFIX for deterministic, non-colliding resource names
  const testId = `${BRANCH_PREFIX}-test-resource`;

  test("create, update, and delete resource", async () => {
    // Create a test resource
    const resource = await {{ResourceName}}(testId, {
      name: `Test Resource ${testId}`,
      description: "This is a test resource"
    });

    try {
      // Apply to create the resource
      const output = resource;
      expect(output.id).toBeTruthy();
      expect(output.name).toEqual(`Test Resource ${testId}`);

      // Verify resource was created by querying the API directly
      const api = new {{ServiceName}}Api();
      const getResponse = await api.get(`/accounts/${api.accountId}/resources/${output.id}`);
      expect(getResponse.status).toEqual(200);

      const responseData = await getResponse.json();
      expect(responseData.result.name).toEqual(`Test Resource ${testId}`);

      // Update the resource
      const updateOutput = await {{ResourceName}}(testId, {
        name: `Updated Resource ${testId}`,
        description: "This is an updated test resource"
      });
      expect(updateOutput.id).toEqual(output.id);

      // Verify resource was updated
      const getUpdatedResponse = await api.get(`/accounts/${api.accountId}/resources/${output.id}`);
      const updatedData = await getUpdatedResponse.json();
      expect(updatedData.result.name).toEqual(`Updated Resource ${testId}`);
    } finally {
      // Always clean up, even if test assertions fail
      await destroy(resource).catch(e => {
        console.error("Error cleaning up resource:", e);
      });

      // Verify resource was deleted (this runs after destroy)
      const api = new {{ServiceName}}Api();
      const getDeletedResponse = await api.get(`/accounts/${api.accountId}/resources/${output.id}`);
      expect(getDeletedResponse.status).toEqual(404);
    }
  });
});
```

> **Important:** Always use try-finally blocks to ensure resources are properly cleaned up, even if test assertions fail. For tests with multiple resources, clean up in reverse order of creation (most recently created resources first).

## Resource Naming Convention

When implementing resources, follow this important naming convention:

1. The output interface must have the same name as the exported resource. For example:

   - If your resource constant is `export const Product = Resource(...)`,
   - Then your output interface must be named `export interface Product extends ProductProps {...}`
   - NOT `export interface ProductOutput extends ProductProps {...}`

2. The name of the interface and the exported constant create a pseudo-class construct:

   ```typescript
   // This naming pattern allows the resource to work correctly with type system
   export interface Product extends ProductProps {...}
   export const Product = Resource(...);
   ```

3. Always use this pattern for consistency across resources.

## API Design Principles

When implementing resources that interact with external APIs, follow these design principles:

1. **Minimal abstraction**: Use a thin wrapper around fetch rather than complex SDK clients.

2. **Explicit path construction**: Construct API paths explicitly at the call site instead of using helper methods:

   ```typescript
   // DO THIS:
   await api.get(`/accounts/${api.accountId}/resources/${resourceId}`);

   // NOT THIS:
   await api.get(api.accountPath(`/resources/${resourceId}`));
   ```

3. **Direct HTTP status handling**: Check response status codes directly rather than relying on exceptions:

   ```typescript
   // DO THIS:
   const response = await api.get(`/path/to/resource`);
   if (!response.ok) {
     // Handle error case
   }

   // NOT THIS:
   try {
     const data = await api.get(`/path/to/resource`);
   } catch (error) {
     // Handle error
   }
   ```

4. **Explicit JSON parsing**: Parse JSON responses explicitly where needed:

   ```typescript
   const response = await api.get(`/path/to/resource`);
   if (response.ok) {
     const data = await response.json();
     // Process data
   }
   ```

5. **Public properties over helper methods**: Expose properties like `api.accountId` publicly to construct URLs instead of creating helper methods.

6. **Minimal error transformation**: Report errors with minimal transformation to preserve original error details.

## Using Raw Fetch Calls Instead of SDKs

Always prefer using raw fetch calls instead of service SDKs unless explicitly instructed not to by the user. This approach:

- Reduces dependency bloat
- Minimizes version compatibility issues
- Gives you more control over the request/response cycle
- Often results in smaller bundle sizes

For both implementation and tests, directly interact with APIs using fetch.
