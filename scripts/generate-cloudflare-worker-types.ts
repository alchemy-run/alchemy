#!/usr/bin/env bun
import { spawn } from "node:child_process";
import { mkdir, readFile, writeFile } from "node:fs/promises";
import { join } from "node:path";

const OUTPUT_DIR = "alchemy/src/cloudflare/workerd";

/**
 * Generates Cloudflare Worker types using the wrangler CLI.
 * This approach ensures we get the most up-to-date types without hardcoding anything.
 */
async function generateTypesWithWrangler(): Promise<string> {
  console.log(
    "Wrangler CLI requires configuration, using @cloudflare/workers-types directly...",
  );
  return await generateTypesFromWorkersTypes();
}

/**
 * Fallback approach: Use @cloudflare/workers-types package
 */
async function generateTypesFromWorkersTypes(): Promise<string> {
  console.log("Using @cloudflare/workers-types package as fallback...");

  try {
    // Try to read the types from the installed package
    const typesPath = "../node_modules/@cloudflare/workers-types/index.d.ts";
    const typesContent = await readFile(typesPath, "utf-8");

    console.log("Successfully read types from @cloudflare/workers-types");
    return typesContent;
  } catch (error) {
    console.error("Failed to read @cloudflare/workers-types:", error.message);
    throw new Error(
      "Both wrangler CLI and @cloudflare/workers-types fallback failed",
    );
  }
}

async function generateTypeFile(): Promise<void> {
  console.log("Generating Cloudflare Worker types using wrangler CLI");

  // Generate types using wrangler CLI
  const generatedTypes = await generateTypesWithWrangler();

  // Clean the output from wrangler (remove warnings and only keep type definitions)
  const cleanedTypes = generatedTypes
    .split("\n")
    .filter(
      (line) =>
        // Keep actual type definitions and comments
        line.trim().startsWith("declare ") ||
        line.trim().startsWith("interface ") ||
        line.trim().startsWith("type ") ||
        line.trim().startsWith("class ") ||
        line.trim().startsWith("namespace ") ||
        line.trim().startsWith("export ") ||
        line.trim().startsWith("/*") ||
        line.trim().startsWith("*") ||
        line.trim().startsWith("*/") ||
        line.trim().startsWith("//") ||
        line.trim() === "" ||
        line.includes("export declare") ||
        line.includes("{") ||
        line.includes("}") ||
        line.includes(";") ||
        line.includes("="),
    )
    .filter(
      (line) =>
        // Remove wrangler warnings
        !line.includes("⛅️") &&
        !line.includes("wrangler") &&
        !line.includes("WARNING") &&
        !line.includes("------"),
    )
    .join("\n");

  // Convert .d.ts to .ts by replacing declare with export declare for better imports
  let exportedTypes = cleanedTypes
    .replace(
      /^declare (interface|type|class|enum|namespace) /gm,
      "export declare $1 ",
    )
    .replace(/^declare (var|let|const) /gm, "export declare $1 ")
    .replace(/^declare function /gm, "export declare function ")
    .replace(/^declare abstract class /gm, "export declare abstract class ");

  // Ensure specific types needed by bound.ts are exported (fix lines that start with just 'type' or 'interface')
  const typesToExport = [
    "Fetcher",
    "Service",
    "SocketAddress",
    "SocketOptions",
    "KVNamespace",
    "R2Bucket",
    "D1Database",
    "DurableObjectNamespace",
    "Queue",
    "VectorizeIndex",
    "AnalyticsEngineDataset",
    "AiGateway",
    "Hyperdrive",
    "Workflow",
    "ImagesBinding",
    "WorkerVersionMetadata",
    "Rpc",
  ];

  for (const typeName of typesToExport) {
    exportedTypes = exportedTypes.replace(
      new RegExp(`^(interface|type|class|enum|namespace) ${typeName}`, "gm"),
      `export $1 ${typeName}`,
    );
  }

  const header = `// Generated Cloudflare Worker types using wrangler CLI
// DO NOT EDIT THIS FILE DIRECTLY - regenerate using: bun run generate:cloudflare-types

`;

  const fileContent = header + exportedTypes;

  // Write as .ts file as requested
  const outputPath = join(OUTPUT_DIR, "default.ts");
  await writeFile(outputPath, fileContent);
  console.log(`Generated types at ${outputPath}`);
}

async function generateIndexFile(): Promise<void> {
  const indexContent = `// Generated Cloudflare Worker types index
// DO NOT EDIT THIS FILE DIRECTLY

// Re-export all types from the generated file
export * from "./default.ts";
`;

  const indexPath = join(OUTPUT_DIR, "index.ts");
  await writeFile(indexPath, indexContent);
  console.log(`Generated index file at ${indexPath}`);
}

export async function generateCloudflareWorkerTypes(): Promise<void> {
  console.log("Generating Cloudflare Worker types...");

  // Ensure output directory exists
  await mkdir(OUTPUT_DIR, { recursive: true });

  // Generate types using wrangler CLI
  await generateTypeFile();

  // Generate index file
  await generateIndexFile();

  console.log("Successfully generated Cloudflare Worker type definitions");
}

// If this script is run directly, execute the generation
if (import.meta.main) {
  try {
    await generateCloudflareWorkerTypes();
  } catch (error) {
    console.error(
      "Error generating Cloudflare Worker type definitions:",
      error,
    );
    process.exit(1);
  }
}
