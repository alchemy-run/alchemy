---
import { Code } from "astro:components";

export interface Props {
  title: string;
  tagline: string;
  actions?: Array<{
    text: string;
    link: string;
    variant?: "primary" | "secondary";
    icon?: string;
  }>;
}

const { data } = Astro.locals.starlightRoute.entry;
const { title = data?.title, tagline, actions = [] } = data?.hero || {};

const codeContent = `const database = await D1Database("my-app-db", {
  name: "my-application-db",
});

const site = await Worker("website", {
  name: "my-app",
  bindings: {
    DB: database,
  },
});

const product = await Product("pro-plan", {
  name: "Pro Plan",
  description: "Professional subscription tier",
});`;
---

<div class="hero">
  <div class="hero-content">
    <div class="hero-text">
      <h1 class="hero-title">{title}</h1>
      <p class="hero-tagline">{tagline}</p>

      {
        actions.length > 0 && (
          <div class="hero-actions">
            {actions.map((action: any) => (
              <a
                href={action.link}
                class={`hero-button ${action.variant || "primary"}`}
                {...(action.link.startsWith("http")
                  ? { target: "_blank", rel: "noopener noreferrer" }
                  : {})}
              >
                {action.text}
                {action.icon && <span class={`icon ${action.icon}`} />}
              </a>
            ))}
          </div>
        )
      }
    </div>

    <div class="hero-visual">
      <div class="code-window">
        <div class="code-header">
          <div class="code-dots">
            <span class="dot red"></span>
            <span class="dot yellow"></span>
            <span class="dot green"></span>
          </div>
          <span class="code-title">alchemy.run.ts</span>
        </div>
        <div class="code-content">
          <div id="code-block-light" class="code-theme light-theme">
            <Code code={codeContent} lang="typescript" theme="vitesse-light" />
          </div>
          <div id="code-block-dark" class="code-theme dark-theme">
            <Code code={codeContent} lang="typescript" theme="vitesse-dark" />
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  /* CSS Custom Properties */
  :root {
    /* Dark mode (default) */
    --hero-code-bg: #121212;
    --hero-code-border: rgba(255, 255, 255, 0.1);
    --hero-code-text: #e5e7eb;
    --hero-code-title: #d1d5db;
    --hero-dot-color: #404040; /* Lighter than dark background */
    --hero-shadow: rgba(0, 0, 0, 0.25);
    /* controls the color of the title, tagline, and actions */
    --hero-accent: var(--sl-color-text-accent);
  }

  /* Light mode - manual theme selection */
  :root[data-theme="light"] {
    --hero-code-bg: #fff;
    --hero-code-border: rgba(0, 0, 0, 0.1);
    --hero-code-text: #374151;
    --hero-code-title: #4b5563;
    --hero-dot-color: #a7a7a7; /* Darker than light background */
    --hero-shadow: rgba(0, 0, 0, 0.1);
    --sl-color-text-accent: #c5a943;
    --hero-accent: #488f48;
  }

  /* Global page background override - only for pages with hero class */
  :global(body:has(.hero)) {
    background: linear-gradient(
      135deg,
      var(--sl-color-bg) 0%,
      var(--sl-color-bg-nav) 100%
    );
    min-height: 100vh;
  }

  .hero {
    padding: 4rem 2rem;
    text-align: center;
    background: transparent; /* Remove duplicate background since it's now on body */
  }

  .hero-content {
    max-width: 1200px;
    margin: 0 auto;
    display: grid;
    gap: 3rem;
    align-items: center;
  }

  .hero-title {
    font-size: clamp(2.5rem, 5vw, 4rem);
    font-weight: 800;
    line-height: 1.1;
    margin: 0 0 1rem 0;
    text-align: center;
  }

  :root[data-theme="dark"] .hero-title {
    /* Dark mode gradient (default) */
    background: linear-gradient(
      135deg,
      var(--sl-color-text) 0%,
      var(--sl-color-text-accent) 100%
    );
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  :root[data-theme="light"] .hero-title,
  :root[data-theme="light"] .hero-tagline,
  :root[data-theme="light"] .hero-actions {
    color: var(--hero-accent);
  }

  .hero-tagline {
    font-size: clamp(1.1rem, 2.5vw, 1.5rem);
    /* Dark mode color (default) */
    color: var(--sl-color-text-accent);
    margin: 0 0 2rem 0;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
    line-height: 1.4;
  }

  /* Override system preference if manually set to dark */
  :root[data-theme="dark"] .hero-tagline {
    color: var(--sl-color-text-accent);
  }

  .hero-visual {
    display: flex;
    justify-content: center;
    margin: 2rem 0;
  }

  /* Code Window Styling */
  .code-window {
    background: var(--hero-code-bg);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 25px 50px -12px var(--hero-shadow);
    width: 100%;
    max-width: 600px;
    border: 1px solid var(--hero-code-border);
  }

  .code-header {
    background: var(--hero-code-bg);
    padding: 12px 16px;
    display: flex;
    align-items: center;
    gap: 12px;
    border-bottom: 1px solid var(--hero-code-border);
  }

  .code-dots {
    display: flex;
    gap: 6px;
  }

  .dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: var(--hero-dot-color);
  }

  .code-title {
    color: var(--hero-code-title);
    font-size: 14px;
    font-weight: 500;
  }

  .code-content {
    padding: 24px;
    font-family: "Monaco", "Menlo", "Consolas", monospace;
    font-size: 14px;
    line-height: 1.6;
    color: var(--hero-code-text);
    overflow-x: auto;
  }

  .code-content pre {
    margin: 0;
    background: transparent;
    padding: 0;
  }

  .code-content code {
    background: transparent;
    padding: 0;
    font-size: inherit;
    color: inherit;
  }

  /* Theme switching */
  .code-theme {
    display: none;
  }

  .code-theme.active {
    display: block;
  }

  /* Default to dark theme */
  .dark-theme {
    display: block;
  }

  /* Show light theme when manually set to light */
  :root[data-theme="light"] .light-theme {
    display: block;
  }

  :root[data-theme="light"] .dark-theme {
    display: none;
  }

  .hero-actions {
    display: flex;
    gap: 0.75rem;
    justify-content: center;
    flex-wrap: wrap;
    margin-top: 1.5rem;
  }

  .hero-button {
    display: inline-flex;
    align-items: center;
    gap: 0.375rem;
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    font-weight: 500;
    font-size: 0.875rem;
    text-decoration: none;
    transition: all 0.2s ease;
    border: 2px solid transparent;
  }

  .hero-button.primary {
    background: var(--hero-accent);
    color: var(--sl-color-bg);
  }

  .hero-button.primary:hover {
    background: color-mix(in srgb, var(--hero-accent) 80%, white 20%);
    color: var(--sl-color-bg);
    transform: scale(1.05);
    box-shadow: 0 0 0 2px transparent;
    animation: glow-border 2s linear infinite;
  }

  .hero-button.secondary {
    background: transparent;
    color: var(--sl-color-text);
    border-color: var(--sl-color-gray-5);
  }

  .hero-button.secondary:hover {
    background: var(--sl-color-gray-6);
    transform: scale(1.05);
    box-shadow: 0 0 0 2px transparent;
  }

  .hero-button.minimal {
    color: var(--hero-accent);
    font-weight: bold;
  }

  .hero-button.minimal:hover {
    color: color-mix(in srgb, var(--sl-color-accent) 80%, white 40%);
  }

  /* Responsive Design */
  @media (min-width: 768px) {
    .hero-content {
      grid-template-columns: 1fr 1fr;
      text-align: left;
      gap: 3.5rem;
    }

    .hero-title,
    .hero-tagline {
      text-align: left;
    }

    .hero-tagline {
      margin-left: 0;
      margin-right: 0;
    }

    .hero-actions {
      justify-content: flex-start;
    }
  }

  @media (max-width: 767px) {
    .hero {
      padding: 2rem 1rem;
    }

    .astro-code {
      text-align: left;
    }

    .code-content {
      font-size: 12px;
      padding: 16px;
    }
  }
</style>
