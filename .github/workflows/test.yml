name: Tests

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, reopened, synchronize]
  workflow_dispatch:

# Ensure only one workflow runs at a time
concurrency:
  group: "tests-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      actions: write
    steps:
      - uses: actions/checkout@v4
        with:
          # we need this so that test pruning works
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}
          fetch-depth: 0

      - name: Setup Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: |
          bun install
          # tanstack start doesn't deploy when packages are hoisted ...
          cd examples/cloudflare-tanstack-start
          bun install
          cd ../..

      - name: Check Types and Lint
        run: bun run check

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-west-2

      - name: Fetch secrets from AWS SSM
        id: fetch-secrets
        run: |
          # Fetch the JSON-encoded secrets from SSM Parameter Store
          echo "Fetching secrets from SSM parameter: /alchemy/github-ci-secrets"
          SECRETS_JSON=$(aws ssm get-parameter --name "/alchemy/github-ci-secrets" --with-decryption --query "Parameter.Value" --output text --region us-west-2)
          
          # Parse JSON and set each key-value pair as an environment variable
          echo "$SECRETS_JSON" | jq -r 'to_entries[] | "\(.key)=\(.value)"' >> $GITHUB_ENV
          
          # Also set them as outputs for this step (masked for security)
          echo "$SECRETS_JSON" | jq -r 'to_entries[] | "::add-mask::\(.value)"'
          echo "$SECRETS_JSON" | jq -r 'to_entries[] | "\(.key)=\(.value)"' >> $GITHUB_OUTPUT

      - name: Run affected tests
        run: |
          # Determine the base commit depending on event type
          if [ "${{ github.event_name }}" == "pull_request_target" ] || [ "${{ github.event_name }}" == "pull_request" ]; then
            # For pull requests, use PR base commit
            BASE_COMMIT="${{ github.event.pull_request.base.sha }}"
          elif [ "${{ github.event_name }}" == "push" ]; then
            # For pushes, use the commit before the push
            BASE_COMMIT="${{ github.event.before }}"
          else
            # For manual runs, use a few commits back to ensure sufficient coverage
            BASE_COMMIT="HEAD~10"
          fi

          echo "Running tests changed since commit: $BASE_COMMIT"
          bun run test --since "$BASE_COMMIT" --vitest
        env:
          CI: true
          ALCHEMY_STATE_STORE: cloudflare
          AWS_REGION: us-west-2
          BRANCH_PREFIX: pr-${{ github.event_name == 'pull_request' && github.event.pull_request.number || github.ref_name }}
          # All secrets are now loaded from SSM parameter via the previous step
          # Fallback to GitHub secrets if SSM parameter is not available
          ALCHEMY_PASSWORD: ${{ env.ALCHEMY_PASSWORD || secrets.ALCHEMY_PASSWORD }}
          CLOUDFLARE_ACCOUNT_ID: ${{ env.CLOUDFLARE_ACCOUNT_ID || secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_KEY: ${{ env.CLOUDFLARE_API_KEY || secrets.CLOUDFLARE_API_KEY }}
          CLOUDFLARE_BUCKET_NAME: ${{ env.CLOUDFLARE_BUCKET_NAME || secrets.CLOUDFLARE_BUCKET_NAME }}
          CLOUDFLARE_EMAIL: ${{ env.CLOUDFLARE_EMAIL || secrets.CLOUDFLARE_EMAIL }}
          OPENAI_API_KEY: ${{ env.OPENAI_API_KEY || secrets.OPENAI_API_KEY }}
          R2_ACCESS_KEY_ID: ${{ env.R2_ACCESS_KEY_ID || secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ env.R2_SECRET_ACCESS_KEY || secrets.R2_SECRET_ACCESS_KEY }}
          STRIPE_API_KEY: ${{ env.STRIPE_API_KEY || secrets.STRIPE_API_KEY }}
          NEON_API_KEY: ${{ env.NEON_API_KEY || secrets.NEON_API_KEY }}
          SECRET_PASSPHRASE: ${{ env.SECRET_PASSPHRASE || secrets.SECRET_PASSPHRASE }}
          UPSTASH_API_KEY: ${{ env.UPSTASH_API_KEY || secrets.UPSTASH_API_KEY }}
          UPSTASH_EMAIL: sam@alchemy.run
          SENTRY_AUTH_TOKEN: ${{ env.SENTRY_AUTH_TOKEN || secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ env.SENTRY_ORG || secrets.SENTRY_ORG }}
          VERCEL_ACCESS_TOKEN: ${{ env.VERCEL_ACCESS_TOKEN || secrets.VERCEL_ACCESS_TOKEN }}
