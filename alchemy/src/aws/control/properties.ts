// Generated by scripts/generate-aws-control-types.ts
// DO NOT EDIT THIS FILE DIRECTLY

// Read-only properties for AWS resources
const properties = {
  ACMPCA: {
    Certificate: [
      "ApiPassthrough",
      "Arn",
      "Certificate",
      "CertificateAuthorityArn",
      "CertificateSigningRequest",
      "SigningAlgorithm",
      "TemplateArn",
      "Validity",
      "ValidityNotBefore",
    ],
    CertificateAuthority: [
      "Arn",
      "CertificateSigningRequest",
      "CsrExtensions",
      "KeyAlgorithm",
      "KeyStorageSecurityStandard",
      "SigningAlgorithm",
      "Subject",
      "Type",
      "UsageMode",
    ],
    CertificateAuthorityActivation: [
      "CertificateAuthorityArn",
      "CompleteCertificateChain",
    ],
    Permission: [
      "Actions",
      "CertificateAuthorityArn",
      "Principal",
      "SourceAccount",
    ],
  },
  APS: {
    RuleGroupsNamespace: ["Arn", "Name", "Workspace"],
    Scraper: ["Arn", "RoleArn", "ScraperId", "Source"],
    Workspace: ["Arn", "KmsKeyArn", "PrometheusEndpoint", "WorkspaceId"],
  },
  ARCZonalShift: {
    AutoshiftObserverNotificationStatus: ["AccountId", "Region", "Status"],
    ZonalAutoshiftConfiguration: ["ResourceIdentifier"],
  },
  AccessAnalyzer: {
    Analyzer: ["AnalyzerName", "Arn", "Type"],
  },
  AmazonMQ: {
    Broker: [
      "AmqpEndpoints",
      "Arn",
      "AuthenticationStrategy",
      "BrokerName",
      "ConfigurationId",
      "ConfigurationRevision",
      "DeploymentMode",
      "EncryptionOptions",
      "EngineType",
      "IpAddresses",
      "MqttEndpoints",
      "OpenWireEndpoints",
      "PubliclyAccessible",
      "StompEndpoints",
      "StorageType",
      "SubnetIds",
      "WssEndpoints",
    ],
    Configuration: [
      "Arn",
      "AuthenticationStrategy",
      "EngineType",
      "EngineVersion",
      "Id",
      "Name",
      "Revision",
    ],
    ConfigurationAssociation: ["Broker"],
  },
  Amplify: {
    App: ["AppId", "AppName", "Arn", "DefaultDomain"],
    Branch: ["AppId", "Arn", "BranchName", "BranchName"],
    Domain: [
      "AppId",
      "Arn",
      "AutoSubDomainCreationPatterns",
      "AutoSubDomainIAMRole",
      "Certificate",
      "Certificate.CertificateArn",
      "Certificate.CertificateType",
      "Certificate.CertificateVerificationDNSRecord",
      "CertificateRecord",
      "DomainName",
      "DomainName",
      "DomainStatus",
      "EnableAutoSubDomain",
      "StatusReason",
      "UpdateStatus",
    ],
  },
  AmplifyUIBuilder: {
    Component: ["AppId", "CreatedAt", "EnvironmentName", "Id", "ModifiedAt"],
    Form: ["AppId", "EnvironmentName", "Id"],
    Theme: ["AppId", "CreatedAt", "EnvironmentName", "Id", "ModifiedAt"],
  },
  ApiGateway: {
    Account: ["Id"],
    ApiKey: ["APIKeyId", "GenerateDistinctId", "Name", "Value"],
    Authorizer: ["AuthorizerId", "RestApiId"],
    BasePathMapping: ["BasePath", "DomainName"],
    BasePathMappingV2: ["BasePath", "BasePathMappingArn", "DomainNameArn"],
    ClientCertificate: ["ClientCertificateId"],
    Deployment: ["DeploymentCanarySettings", "DeploymentId", "RestApiId"],
    DocumentationPart: ["DocumentationPartId", "Location", "RestApiId"],
    DocumentationVersion: ["DocumentationVersion", "RestApiId"],
    DomainName: [
      "DistributionDomainName",
      "DistributionHostedZoneId",
      "DomainName",
      "DomainNameArn",
      "RegionalDomainName",
      "RegionalHostedZoneId",
    ],
    DomainNameAccessAssociation: [
      "AccessAssociationSource",
      "AccessAssociationSourceType",
      "DomainNameAccessAssociationArn",
      "DomainNameArn",
      "Tags",
    ],
    DomainNameV2: [
      "DomainName",
      "DomainNameArn",
      "DomainNameId",
      "EndpointConfiguration",
      "SecurityPolicy",
    ],
    GatewayResponse: ["Id", "ResponseType", "RestApiId"],
    Method: ["HttpMethod", "ResourceId", "RestApiId"],
    Model: ["ContentType", "Name", "RestApiId"],
    RequestValidator: ["Name", "RequestValidatorId", "RestApiId"],
    Resource: ["ParentId", "PathPart", "ResourceId", "RestApiId"],
    RestApi: ["RestApiId", "RootResourceId"],
    Stage: ["RestApiId", "StageName"],
    UsagePlan: ["Id"],
    UsagePlanKey: ["Id", "KeyId", "KeyType", "UsagePlanId"],
    VpcLink: ["TargetArns", "VpcLinkId"],
  },
  ApiGatewayV2: {
    Api: ["ApiEndpoint", "ApiId", "ProtocolType"],
    ApiGatewayManagedOverrides: ["ApiId"],
    ApiMapping: ["ApiMappingId", "DomainName"],
    Authorizer: ["ApiId", "AuthorizerId"],
    Deployment: ["ApiId", "DeploymentId"],
    DomainName: [
      "DomainName",
      "DomainNameArn",
      "RegionalDomainName",
      "RegionalHostedZoneId",
    ],
    Integration: ["ApiId", "IntegrationId"],
    IntegrationResponse: ["ApiId", "IntegrationId", "IntegrationResponseId"],
    Model: ["ApiId", "ModelId"],
    Route: ["ApiId", "RouteId"],
    RouteResponse: ["ApiId", "RouteId", "RouteResponseId"],
    Stage: ["ApiId", "StageName"],
    VpcLink: ["SecurityGroupIds", "SubnetIds", "VpcLinkId"],
  },
  AppConfig: {
    Application: ["ApplicationId"],
    ConfigurationProfile: [
      "ApplicationId",
      "ConfigurationProfileId",
      "KmsKeyArn",
      "LocationUri",
      "Type",
    ],
    Deployment: [
      "ApplicationId",
      "ConfigurationProfileId",
      "ConfigurationVersion",
      "DeploymentNumber",
      "DeploymentStrategyId",
      "Description",
      "DynamicExtensionParameters",
      "EnvironmentId",
      "KmsKeyIdentifier",
      "Tags",
    ],
    DeploymentStrategy: ["Id", "Name", "ReplicateTo"],
    Environment: ["ApplicationId", "EnvironmentId"],
    Extension: ["Arn", "Id", "Name", "VersionNumber"],
    ExtensionAssociation: [
      "Arn",
      "ExtensionArn",
      "ExtensionIdentifier",
      "ExtensionVersionNumber",
      "Id",
      "ResourceArn",
      "ResourceIdentifier",
    ],
    HostedConfigurationVersion: [
      "ApplicationId",
      "ConfigurationProfileId",
      "Content",
      "ContentType",
      "Description",
      "LatestVersionNumber",
      "VersionLabel",
      "VersionNumber",
    ],
  },
  AppFlow: {
    Connector: ["ConnectorArn", "ConnectorLabel"],
    ConnectorProfile: [
      "ConnectorLabel",
      "ConnectorProfileArn",
      "ConnectorProfileName",
      "ConnectorType",
      "CredentialsArn",
    ],
    Flow: ["FlowArn", "FlowName", "KMSArn"],
  },
  AppIntegrations: {
    Application: ["ApplicationArn", "Id"],
    DataIntegration: [
      "DataIntegrationArn",
      "Id",
      "KmsKey",
      "ScheduleConfig",
      "SourceURI",
    ],
    EventIntegration: [
      "EventBridgeBus",
      "EventFilter",
      "EventIntegrationArn",
      "Name",
    ],
  },
  AppMesh: {
    GatewayRoute: [
      "Arn",
      "GatewayRouteName",
      "GatewayRouteName",
      "MeshName",
      "MeshName",
      "MeshOwner",
      "MeshOwner",
      "ResourceOwner",
      "Uid",
      "VirtualGatewayName",
      "VirtualGatewayName",
    ],
    Mesh: ["Arn", "MeshName", "MeshName", "MeshOwner", "ResourceOwner", "Uid"],
    Route: [
      "Arn",
      "MeshName",
      "MeshName",
      "MeshOwner",
      "MeshOwner",
      "ResourceOwner",
      "RouteName",
      "RouteName",
      "Uid",
      "VirtualRouterName",
      "VirtualRouterName",
    ],
    VirtualGateway: [
      "Arn",
      "MeshName",
      "MeshName",
      "MeshOwner",
      "MeshOwner",
      "ResourceOwner",
      "Uid",
      "VirtualGatewayName",
      "VirtualGatewayName",
    ],
    VirtualNode: [
      "Arn",
      "MeshName",
      "MeshName",
      "MeshOwner",
      "MeshOwner",
      "ResourceOwner",
      "Uid",
      "VirtualNodeName",
      "VirtualNodeName",
    ],
    VirtualRouter: [
      "Arn",
      "MeshName",
      "MeshName",
      "MeshOwner",
      "MeshOwner",
      "ResourceOwner",
      "Uid",
      "VirtualRouterName",
      "VirtualRouterName",
    ],
    VirtualService: [
      "Arn",
      "MeshName",
      "MeshName",
      "MeshOwner",
      "MeshOwner",
      "ResourceOwner",
      "Uid",
      "VirtualServiceName",
      "VirtualServiceName",
    ],
  },
  AppRunner: {
    AutoScalingConfiguration: [
      "AutoScalingConfigurationArn",
      "AutoScalingConfigurationName",
      "AutoScalingConfigurationRevision",
      "Latest",
      "MaxConcurrency",
      "MaxSize",
      "MinSize",
      "Tags",
    ],
    ObservabilityConfiguration: [
      "Latest",
      "ObservabilityConfigurationArn",
      "ObservabilityConfigurationName",
      "ObservabilityConfigurationRevision",
      "Tags",
      "TraceConfiguration",
    ],
    Service: [
      "EncryptionConfiguration",
      "ServiceArn",
      "ServiceId",
      "ServiceName",
      "ServiceUrl",
      "Status",
    ],
    VpcConnector: [
      "SecurityGroups",
      "Subnets",
      "Tags",
      "VpcConnectorArn",
      "VpcConnectorName",
      "VpcConnectorRevision",
    ],
    VpcIngressConnection: [
      "DomainName",
      "ServiceArn",
      "Status",
      "Tags",
      "VpcIngressConnectionArn",
      "VpcIngressConnectionName",
    ],
  },
  AppStream: {
    AppBlock: [
      "Arn",
      "CreatedTime",
      "Description",
      "DisplayName",
      "Name",
      "PackagingType",
      "PostSetupScriptDetails",
      "SetupScriptDetails",
      "SourceS3Location",
    ],
    AppBlockBuilder: ["Arn", "CreatedTime", "Name"],
    Application: [
      "Arn",
      "CreatedTime",
      "InstanceFamilies",
      "Name",
      "Platforms",
    ],
    ApplicationEntitlementAssociation: [
      "ApplicationIdentifier",
      "EntitlementName",
      "StackName",
    ],
    ApplicationFleetAssociation: ["ApplicationArn", "FleetName"],
    DirectoryConfig: ["DirectoryName"],
    Entitlement: ["CreatedTime", "LastModifiedTime", "Name", "StackName"],
    Fleet: ["FleetType", "Name"],
    ImageBuilder: ["StreamingUrl"],
    Stack: ["Name"],
    StackUserAssociation: [
      "AuthenticationType",
      "SendEmailNotification",
      "StackName",
      "UserName",
    ],
    User: [
      "AuthenticationType",
      "FirstName",
      "LastName",
      "MessageAction",
      "UserName",
    ],
  },
  AppSync: {
    Api: ["ApiArn", "ApiId", "Dns", "Dns.Http", "Dns.Realtime"],
    ApiCache: ["ApiId"],
    ApiKey: ["ApiId", "ApiKey", "Arn"],
    ChannelNamespace: ["ApiId", "ChannelNamespaceArn", "Name"],
    DataSource: ["ApiId", "DataSourceArn", "Name", "Name"],
    DomainName: [
      "AppSyncDomainName",
      "CertificateArn",
      "DomainName",
      "DomainName",
      "DomainNameArn",
      "HostedZoneId",
    ],
    DomainNameApiAssociation: ["ApiAssociationIdentifier", "DomainName"],
    FunctionConfiguration: [
      "ApiId",
      "DataSourceName",
      "FunctionArn",
      "FunctionId",
      "Name",
    ],
    GraphQLApi: [
      "ApiId",
      "Arn",
      "GraphQLDns",
      "GraphQLEndpointArn",
      "GraphQLUrl",
      "RealtimeDns",
      "RealtimeUrl",
    ],
    GraphQLSchema: ["ApiId"],
    Resolver: [
      "ApiId",
      "FieldName",
      "FieldName",
      "ResolverArn",
      "TypeName",
      "TypeName",
    ],
    SourceApiAssociation: [
      "AssociationArn",
      "AssociationId",
      "LastSuccessfulMergeDate",
      "MergedApiArn",
      "MergedApiId",
      "MergedApiIdentifier",
      "SourceApiArn",
      "SourceApiAssociationStatus",
      "SourceApiAssociationStatusDetail",
      "SourceApiId",
      "SourceApiIdentifier",
    ],
  },
  AppTest: {
    TestCase: [
      "CreationTime",
      "LastUpdateTime",
      "LatestVersion",
      "LatestVersion.Status",
      "LatestVersion.Version",
      "Name",
      "Status",
      "TestCaseArn",
      "TestCaseId",
      "TestCaseVersion",
    ],
  },
  ApplicationAutoScaling: {
    ScalableTarget: [
      "Id",
      "ResourceId",
      "ScalableDimension",
      "ServiceNamespace",
    ],
    ScalingPolicy: [
      "Arn",
      "PolicyName",
      "ResourceId",
      "ScalableDimension",
      "ScalingTargetId",
      "ServiceNamespace",
    ],
  },
  ApplicationInsights: {
    Application: ["ApplicationARN", "GroupingType", "ResourceGroupName"],
  },
  ApplicationSignals: {
    Discovery: ["AccountId"],
    ServiceLevelObjective: [
      "Arn",
      "CreatedTime",
      "EvaluationType",
      "LastUpdatedTime",
      "Name",
    ],
  },
  Athena: {
    CapacityReservation: [
      "AllocatedDpus",
      "Arn",
      "CreationTime",
      "LastSuccessfulAllocationTime",
      "Name",
      "Status",
    ],
    DataCatalog: ["Name"],
    NamedQuery: [
      "Database",
      "Description",
      "Name",
      "NamedQueryId",
      "QueryString",
      "WorkGroup",
    ],
    PreparedStatement: ["StatementName", "WorkGroup"],
    WorkGroup: [
      "CreationTime",
      "Name",
      "WorkGroupConfiguration.EngineVersion.EffectiveEngineVersion",
    ],
  },
  AuditManager: {
    Assessment: [
      "Arn",
      "AssessmentId",
      "AwsAccount",
      "CreationTime",
      "FrameworkId",
    ],
  },
  AutoScaling: {
    AutoScalingGroup: [
      "AutoScalingGroupARN",
      "AutoScalingGroupName",
      "InstanceId",
    ],
    LaunchConfiguration: [
      "AssociatePublicIpAddress",
      "BlockDeviceMappings",
      "ClassicLinkVPCId",
      "ClassicLinkVPCSecurityGroups",
      "EbsOptimized",
      "IamInstanceProfile",
      "ImageId",
      "InstanceId",
      "InstanceMonitoring",
      "InstanceType",
      "KernelId",
      "KeyName",
      "LaunchConfigurationName",
      "MetadataOptions",
      "PlacementTenancy",
      "RamDiskId",
      "SecurityGroups",
      "SpotPrice",
      "UserData",
    ],
    LifecycleHook: ["AutoScalingGroupName", "LifecycleHookName"],
    ScalingPolicy: ["Arn", "AutoScalingGroupName", "PolicyName"],
    ScheduledAction: ["AutoScalingGroupName", "ScheduledActionName"],
    WarmPool: ["AutoScalingGroupName"],
  },
  AutoScalingPlans: {
    ScalingPlan: ["ScalingPlanName", "ScalingPlanVersion"],
  },
  B2BI: {
    Capability: [
      "CapabilityArn",
      "CapabilityId",
      "CreatedAt",
      "ModifiedAt",
      "Type",
    ],
    Partnership: [
      "CreatedAt",
      "Email",
      "ModifiedAt",
      "PartnershipArn",
      "PartnershipId",
      "Phone",
      "ProfileId",
      "TradingPartnerId",
    ],
    Profile: [
      "CreatedAt",
      "LogGroupName",
      "Logging",
      "ModifiedAt",
      "ProfileArn",
      "ProfileId",
    ],
    Transformer: ["CreatedAt", "ModifiedAt", "TransformerArn", "TransformerId"],
  },
  BCMDataExports: {
    Export: ["ExportArn"],
  },
  Backup: {
    BackupPlan: ["BackupPlanArn", "BackupPlanId", "VersionId"],
    BackupSelection: [
      "BackupPlanId",
      "BackupPlanId",
      "BackupSelection",
      "Id",
      "SelectionId",
    ],
    BackupVault: [
      "BackupVaultArn",
      "BackupVaultName",
      "BackupVaultName",
      "EncryptionKeyArn",
    ],
    Framework: [
      "CreationTime",
      "DeploymentStatus",
      "FrameworkArn",
      "FrameworkName",
      "FrameworkStatus",
    ],
    LogicallyAirGappedBackupVault: [
      "BackupVaultArn",
      "BackupVaultName",
      "EncryptionKeyArn",
      "MaxRetentionDays",
      "MinRetentionDays",
      "VaultState",
      "VaultType",
    ],
    ReportPlan: ["ReportPlanArn", "ReportPlanName"],
    RestoreTestingPlan: ["RestoreTestingPlanArn", "RestoreTestingPlanName"],
    RestoreTestingSelection: [
      "ProtectedResourceType",
      "RestoreTestingPlanName",
      "RestoreTestingSelectionName",
    ],
  },
  BackupGateway: {
    Hypervisor: ["HypervisorArn", "KmsKeyArn", "Tags"],
  },
  Batch: {
    ComputeEnvironment: [
      "ComputeEnvironmentArn",
      "ComputeEnvironmentName",
      "EksConfiguration",
      "Tags",
      "Type",
    ],
    ConsumableResource: [
      "AvailableQuantity",
      "ConsumableResourceArn",
      "ConsumableResourceName",
      "CreatedAt",
      "InUseQuantity",
      "ResourceType",
      "Tags",
    ],
    JobDefinition: ["JobDefinitionArn", "JobDefinitionName"],
    JobQueue: ["JobQueueArn", "JobQueueName", "Tags"],
    SchedulingPolicy: ["Arn", "Name", "Tags"],
  },
  Bedrock: {
    Agent: [
      "AgentArn",
      "AgentId",
      "AgentStatus",
      "AgentVersion",
      "CreatedAt",
      "FailureReasons",
      "PreparedAt",
      "RecommendedActions",
      "UpdatedAt",
    ],
    AgentAlias: [
      "AgentAliasArn",
      "AgentAliasHistoryEvents",
      "AgentAliasId",
      "AgentAliasStatus",
      "AgentId",
      "CreatedAt",
      "UpdatedAt",
    ],
    ApplicationInferenceProfile: [
      "CreatedAt",
      "Description",
      "InferenceProfileArn",
      "InferenceProfileId",
      "InferenceProfileIdentifier",
      "InferenceProfileName",
      "ModelSource",
      "Models",
      "Status",
      "Type",
      "UpdatedAt",
    ],
    Blueprint: [
      "BlueprintArn",
      "BlueprintName",
      "BlueprintStage",
      "CreationTime",
      "LastModifiedTime",
      "Type",
    ],
    DataAutomationProject: [
      "CreationTime",
      "LastModifiedTime",
      "ProjectArn",
      "ProjectName",
      "ProjectStage",
      "Status",
    ],
    DataSource: [
      "CreatedAt",
      "DataSourceConfiguration.WebConfiguration.CrawlerConfiguration.UserAgentHeader",
      "DataSourceId",
      "DataSourceStatus",
      "FailureReasons",
      "KnowledgeBaseId",
      "UpdatedAt",
    ],
    Flow: [
      "Arn",
      "CreatedAt",
      "Id",
      "Status",
      "UpdatedAt",
      "Validations",
      "Version",
    ],
    FlowAlias: ["Arn", "CreatedAt", "FlowArn", "FlowId", "Id", "UpdatedAt"],
    FlowVersion: [
      "CreatedAt",
      "CustomerEncryptionKeyArn",
      "Definition",
      "Definition.Connections",
      "Definition.Nodes",
      "Description",
      "ExecutionRoleArn",
      "FlowArn",
      "FlowId",
      "Name",
      "Status",
      "Version",
    ],
    Guardrail: [
      "CreatedAt",
      "FailureRecommendations",
      "GuardrailArn",
      "GuardrailId",
      "Status",
      "StatusReasons",
      "UpdatedAt",
      "Version",
    ],
    GuardrailVersion: [
      "Description",
      "GuardrailArn",
      "GuardrailId",
      "GuardrailIdentifier",
      "Version",
    ],
    IntelligentPromptRouter: [
      "CreatedAt",
      "Description",
      "FallbackModel",
      "Models",
      "PromptRouterArn",
      "PromptRouterName",
      "RoutingCriteria",
      "Status",
      "Type",
      "UpdatedAt",
    ],
    KnowledgeBase: [
      "CreatedAt",
      "FailureReasons",
      "KnowledgeBaseArn",
      "KnowledgeBaseId",
      "Status",
      "StorageConfiguration",
      "UpdatedAt",
    ],
    Prompt: ["Arn", "CreatedAt", "Id", "UpdatedAt", "Version"],
    PromptVersion: [
      "Arn",
      "CreatedAt",
      "CustomerEncryptionKeyArn",
      "DefaultVariant",
      "Description",
      "Name",
      "PromptArn",
      "PromptId",
      "Tags",
      "UpdatedAt",
      "Variants",
      "Version",
    ],
  },
  BillingConductor: {
    BillingGroup: [
      "Arn",
      "CreationTime",
      "LastModifiedTime",
      "PrimaryAccountId",
      "Size",
      "Status",
      "StatusReason",
    ],
    CustomLineItem: [
      "AccountId",
      "Arn",
      "AssociationSize",
      "BillingGroupArn",
      "CreationTime",
      "CurrencyCode",
      "LastModifiedTime",
      "ProductCode",
    ],
    PricingPlan: ["Arn", "CreationTime", "LastModifiedTime", "Size"],
    PricingRule: [
      "Arn",
      "AssociatedPricingPlanCount",
      "BillingEntity",
      "CreationTime",
      "LastModifiedTime",
      "Operation",
      "Scope",
      "Service",
      "UsageType",
    ],
  },
  Budgets: {
    Budget: ["NotificationsWithSubscribers"],
    BudgetsAction: ["ActionId", "ActionType", "BudgetName"],
  },
  CE: {
    AnomalyMonitor: [
      "CreationDate",
      "DimensionalValueCount",
      "LastEvaluatedDate",
      "LastUpdatedDate",
      "MonitorArn",
      "MonitorDimension",
      "MonitorSpecification",
      "MonitorType",
      "ResourceTags",
    ],
    AnomalySubscription: ["AccountId", "ResourceTags", "SubscriptionArn"],
    CostCategory: ["Arn", "EffectiveStart", "Name"],
  },
  CUR: {
    ReportDefinition: [
      "AdditionalSchemaElements",
      "BillingViewArn",
      "ReportName",
      "ReportVersioning",
      "TimeUnit",
    ],
  },
  Cassandra: {
    Keyspace: ["KeyspaceName"],
    Table: [
      "ClientSideTimestampsEnabled",
      "ClusteringKeyColumns",
      "KeyspaceName",
      "PartitionKeyColumns",
      "TableName",
    ],
    Type: [
      "DirectParentTypes",
      "DirectReferringTables",
      "Fields",
      "KeyspaceArn",
      "KeyspaceName",
      "LastModifiedTimestamp",
      "MaxNestingDepth",
      "TypeName",
    ],
  },
  CertificateManager: {
    Account: ["AccountId"],
    Certificate: [
      "CertificateAuthorityArn",
      "DomainName",
      "DomainValidationOptions",
      "KeyAlgorithm",
      "SubjectAlternativeNames",
      "ValidationMethod",
    ],
  },
  Chatbot: {
    CustomAction: ["ActionName", "CustomActionArn"],
    MicrosoftTeamsChannelConfiguration: [
      "Arn",
      "ConfigurationName",
      "TeamId",
      "TeamsTenantId",
    ],
    SlackChannelConfiguration: ["Arn", "ConfigurationName", "SlackWorkspaceId"],
  },
  CleanRooms: {
    AnalysisTemplate: [
      "AnalysisParameters",
      "AnalysisTemplateIdentifier",
      "Arn",
      "CollaborationArn",
      "CollaborationIdentifier",
      "Format",
      "MembershipArn",
      "MembershipIdentifier",
      "Name",
      "Schema",
      "Source",
    ],
    Collaboration: [
      "Arn",
      "CollaborationIdentifier",
      "CreatorDisplayName",
      "CreatorMLMemberAbilities",
      "CreatorMemberAbilities",
      "CreatorPaymentConfiguration",
      "DataEncryptionMetadata",
      "JobLogStatus",
      "Members",
      "QueryLogStatus",
    ],
    ConfiguredTable: [
      "AllowedColumns",
      "Arn",
      "ConfiguredTableIdentifier",
      "TableReference",
    ],
    ConfiguredTableAssociation: [
      "Arn",
      "ConfiguredTableAssociationIdentifier",
      "ConfiguredTableIdentifier",
      "MembershipIdentifier",
      "Name",
    ],
    IdMappingTable: [
      "Arn",
      "CollaborationArn",
      "CollaborationIdentifier",
      "IdMappingTableIdentifier",
      "InputReferenceConfig",
      "InputReferenceProperties",
      "InputReferenceProperties.IdMappingTableInputSource",
      "MembershipArn",
      "MembershipIdentifier",
      "Name",
    ],
    IdNamespaceAssociation: [
      "Arn",
      "CollaborationArn",
      "CollaborationIdentifier",
      "IdNamespaceAssociationIdentifier",
      "InputReferenceConfig",
      "InputReferenceProperties",
      "InputReferenceProperties.IdMappingWorkflowsSupported",
      "InputReferenceProperties.IdNamespaceType",
      "MembershipArn",
      "MembershipIdentifier",
    ],
    Membership: [
      "Arn",
      "CollaborationArn",
      "CollaborationCreatorAccountId",
      "CollaborationIdentifier",
      "MembershipIdentifier",
    ],
    PrivacyBudgetTemplate: [
      "Arn",
      "AutoRefresh",
      "CollaborationArn",
      "CollaborationIdentifier",
      "MembershipArn",
      "MembershipIdentifier",
      "PrivacyBudgetTemplateIdentifier",
      "PrivacyBudgetType",
    ],
  },
  CleanRoomsML: {
    TrainingDataset: [
      "Description",
      "Name",
      "RoleArn",
      "Status",
      "TrainingData",
      "TrainingDatasetArn",
    ],
  },
  Cloud9: {
    EnvironmentEC2: [
      "Arn",
      "AutomaticStopTimeMinutes",
      "ConnectionType",
      "ImageId",
      "InstanceType",
      "Name",
      "OwnerArn",
      "Repositories",
      "SubnetId",
    ],
  },
  CloudFormation: {
    CustomResource: ["ServiceToken"],
    GuardHook: ["Alias", "ExecutionRole", "HookArn"],
    HookDefaultVersion: ["Arn"],
    HookTypeConfig: ["ConfigurationAlias", "ConfigurationArn"],
    HookVersion: [
      "Arn",
      "ExecutionRoleArn",
      "IsDefaultVersion",
      "LoggingConfig",
      "SchemaHandlerPackage",
      "TypeArn",
      "TypeName",
      "VersionId",
      "Visibility",
    ],
    LambdaHook: ["Alias", "HookArn"],
    Macro: ["Name"],
    ModuleDefaultVersion: ["Arn", "ModuleName", "VersionId"],
    ModuleVersion: [
      "Arn",
      "Description",
      "DocumentationUrl",
      "IsDefaultVersion",
      "ModuleName",
      "ModulePackage",
      "Schema",
      "TimeCreated",
      "VersionId",
      "Visibility",
    ],
    PublicTypeVersion: [
      "Arn",
      "LogDeliveryBucket",
      "PublicTypeArn",
      "PublicVersionNumber",
      "PublisherId",
      "Type",
      "TypeName",
      "TypeVersionArn",
    ],
    Publisher: [
      "AcceptTermsAndConditions",
      "ConnectionArn",
      "IdentityProvider",
      "PublisherId",
      "PublisherProfile",
      "PublisherStatus",
    ],
    ResourceDefaultVersion: ["Arn"],
    ResourceVersion: [
      "Arn",
      "ExecutionRoleArn",
      "IsDefaultVersion",
      "LoggingConfig",
      "ProvisioningType",
      "SchemaHandlerPackage",
      "TypeArn",
      "TypeName",
      "VersionId",
      "Visibility",
    ],
    StackSet: ["PermissionModel", "StackSetId", "StackSetName"],
    TypeActivation: ["Arn", "LoggingConfig"],
    WaitCondition: ["Data"],
  },
  CloudFront: {
    AnycastIpList: [
      "AnycastIpList",
      "AnycastIpList.AnycastIps",
      "AnycastIpList.Arn",
      "AnycastIpList.Id",
      "AnycastIpList.IpCount",
      "AnycastIpList.LastModifiedTime",
      "AnycastIpList.Name",
      "AnycastIpList.Status",
      "ETag",
      "Id",
      "IpCount",
      "Name",
      "Tags",
    ],
    CachePolicy: ["Id", "LastModifiedTime"],
    CloudFrontOriginAccessIdentity: ["Id", "S3CanonicalUserId"],
    ConnectionGroup: [
      "Arn",
      "CreatedTime",
      "ETag",
      "Id",
      "IsDefault",
      "LastModifiedTime",
      "Name",
      "RoutingEndpoint",
      "Status",
    ],
    ContinuousDeploymentPolicy: ["Id", "LastModifiedTime"],
    Distribution: ["DomainName", "Id"],
    DistributionTenant: [
      "Arn",
      "CreatedTime",
      "DomainResults",
      "ETag",
      "Id",
      "LastModifiedTime",
      "Name",
      "Status",
    ],
    Function: ["FunctionARN", "FunctionMetadata.FunctionARN", "Stage"],
    KeyGroup: ["Id", "LastModifiedTime"],
    KeyValueStore: ["Arn", "Id", "Name", "Status"],
    MonitoringSubscription: ["DistributionId"],
    OriginAccessControl: ["Id"],
    OriginRequestPolicy: ["Id", "LastModifiedTime"],
    PublicKey: ["CreatedTime", "Id"],
    RealtimeLogConfig: ["Arn", "Name"],
    ResponseHeadersPolicy: ["Id", "LastModifiedTime"],
    StreamingDistribution: ["DomainName"],
    VpcOrigin: ["Arn", "CreatedTime", "Id", "LastModifiedTime", "Status"],
  },
  CloudTrail: {
    Channel: ["ChannelArn", "Source"],
    Dashboard: [
      "CreatedTimestamp",
      "DashboardArn",
      "Status",
      "Type",
      "UpdatedTimestamp",
    ],
    EventDataStore: [
      "CreatedTimestamp",
      "EventDataStoreArn",
      "Status",
      "UpdatedTimestamp",
    ],
    ResourcePolicy: ["ResourceArn"],
    Trail: ["Arn", "SnsTopicArn", "TrailName"],
  },
  CloudWatch: {
    Alarm: ["AlarmName", "Arn"],
    AnomalyDetector: [
      "Dimensions",
      "MetricCharacteristics",
      "MetricMathAnomalyDetector",
      "MetricName",
      "Namespace",
      "SingleMetricAnomalyDetector",
      "Stat",
    ],
    CompositeAlarm: ["AlarmName", "Arn"],
    Dashboard: ["DashboardName"],
    InsightRule: ["Arn", "RuleName", "RuleName"],
    MetricStream: ["Arn", "CreationDate", "LastUpdateDate", "Name", "State"],
  },
  CodeArtifact: {
    Domain: [
      "Arn",
      "DomainName",
      "EncryptionKey",
      "EncryptionKey",
      "Name",
      "Owner",
    ],
    PackageGroup: ["Arn", "DomainName", "Pattern"],
    Repository: [
      "Arn",
      "DomainName",
      "DomainName",
      "DomainOwner",
      "DomainOwner",
      "Name",
      "RepositoryName",
    ],
  },
  CodeBuild: {
    Fleet: ["Arn"],
    Project: ["Arn", "Name"],
    ReportGroup: ["Arn", "Name", "Type"],
    SourceCredential: ["ServerType"],
  },
  CodeCommit: {
    Repository: ["Arn", "CloneUrlHttp", "CloneUrlSsh", "KmsKeyId", "Name"],
  },
  CodeConnections: {
    Connection: [
      "ConnectionArn",
      "ConnectionName",
      "ConnectionStatus",
      "HostArn",
      "OwnerAccountId",
      "ProviderType",
    ],
  },
  CodeDeploy: {
    Application: ["ApplicationName", "ComputePlatform"],
    DeploymentConfig: [
      "ComputePlatform",
      "DeploymentConfigName",
      "MinimumHealthyHosts",
      "TrafficRoutingConfig",
      "ZonalConfig",
    ],
    DeploymentGroup: ["ApplicationName", "DeploymentGroupName"],
  },
  CodeGuruProfiler: {
    ProfilingGroup: ["Arn", "ComputePlatform", "ProfilingGroupName"],
  },
  CodeGuruReviewer: {
    RepositoryAssociation: [
      "AssociationArn",
      "BucketName",
      "ConnectionArn",
      "Name",
      "Owner",
      "Tags",
      "Type",
    ],
  },
  CodePipeline: {
    CustomActionType: [
      "Category",
      "ConfigurationProperties",
      "Id",
      "InputArtifactDetails",
      "OutputArtifactDetails",
      "Provider",
      "Settings",
      "Version",
    ],
    Pipeline: ["Name", "Version"],
    Webhook: ["Name", "Url"],
  },
  CodeStarConnections: {
    Connection: [
      "ConnectionArn",
      "ConnectionName",
      "ConnectionStatus",
      "HostArn",
      "OwnerAccountId",
      "ProviderType",
    ],
    RepositoryLink: [
      "OwnerId",
      "ProviderType",
      "RepositoryLinkArn",
      "RepositoryLinkId",
      "RepositoryName",
    ],
    SyncConfiguration: [
      "OwnerId",
      "ProviderType",
      "RepositoryName",
      "ResourceName",
      "SyncType",
    ],
  },
  CodeStarNotifications: {
    NotificationRule: ["Arn", "Resource"],
  },
  Cognito: {
    IdentityPool: ["Id", "Name"],
    IdentityPoolPrincipalTag: ["IdentityPoolId", "IdentityProviderName"],
    IdentityPoolRoleAttachment: ["Id", "IdentityPoolId"],
    LogDeliveryConfiguration: ["Id", "UserPoolId"],
    ManagedLoginBranding: ["ClientId", "ManagedLoginBrandingId", "UserPoolId"],
    UserPool: ["Arn", "ProviderName", "ProviderURL", "UserPoolId"],
    UserPoolClient: [
      "ClientId",
      "ClientSecret",
      "GenerateSecret",
      "Name",
      "UserPoolId",
    ],
    UserPoolDomain: ["CloudFrontDistribution", "Domain", "UserPoolId"],
    UserPoolGroup: ["GroupName", "UserPoolId"],
    UserPoolIdentityProvider: ["ProviderName", "ProviderType", "UserPoolId"],
    UserPoolResourceServer: ["Identifier", "UserPoolId"],
    UserPoolRiskConfigurationAttachment: ["ClientId", "UserPoolId"],
    UserPoolUICustomizationAttachment: ["ClientId", "UserPoolId"],
    UserPoolUser: [
      "ClientMetadata",
      "DesiredDeliveryMediums",
      "ForceAliasCreation",
      "MessageAction",
      "UserAttributes",
      "UserPoolId",
      "Username",
      "ValidationData",
    ],
    UserPoolUserToGroupAttachment: ["GroupName", "UserPoolId", "Username"],
  },
  Comprehend: {
    DocumentClassifier: [
      "Arn",
      "DataAccessRoleArn",
      "DocumentClassifierName",
      "InputDataConfig",
      "LanguageCode",
      "Mode",
      "ModelKmsKeyId",
      "OutputDataConfig",
      "VersionName",
      "VolumeKmsKeyId",
      "VpcConfig",
    ],
    Flywheel: [
      "Arn",
      "DataLakeS3Uri",
      "FlywheelName",
      "ModelType",
      "TaskConfig",
    ],
  },
  Config: {
    AggregationAuthorization: [
      "AggregationAuthorizationArn",
      "AuthorizedAccountId",
      "AuthorizedAwsRegion",
    ],
    ConfigRule: ["Arn", "Compliance.Type", "ConfigRuleId", "ConfigRuleName"],
    ConfigurationAggregator: [
      "ConfigurationAggregatorArn",
      "ConfigurationAggregatorName",
    ],
    ConfigurationRecorder: ["Name"],
    ConformancePack: ["ConformancePackName"],
    DeliveryChannel: ["Name"],
    OrganizationConfigRule: ["OrganizationConfigRuleName"],
    OrganizationConformancePack: ["OrganizationConformancePackName"],
    RemediationConfiguration: ["ConfigRuleName"],
    StoredQuery: ["QueryArn", "QueryId", "QueryName"],
  },
  Connect: {
    AgentStatus: ["AgentStatusArn", "LastModifiedRegion", "LastModifiedTime"],
    ApprovedOrigin: ["InstanceId", "Origin"],
    ContactFlow: ["ContactFlowArn", "Type"],
    ContactFlowModule: ["ContactFlowModuleArn", "Status"],
    ContactFlowVersion: [
      "ContactFlowId",
      "ContactFlowVersionARN",
      "Description",
      "FlowContentSha256",
      "Version",
    ],
    EmailAddress: ["EmailAddress", "EmailAddressArn"],
    EvaluationForm: ["EvaluationFormArn"],
    HoursOfOperation: ["HoursOfOperationArn"],
    Instance: [
      "Arn",
      "CreatedTime",
      "DirectoryId",
      "Id",
      "IdentityManagementType",
      "InstanceAlias",
      "InstanceStatus",
      "ServiceRole",
    ],
    InstanceStorageConfig: ["AssociationId", "InstanceArn", "ResourceType"],
    IntegrationAssociation: [
      "InstanceId",
      "IntegrationArn",
      "IntegrationAssociationId",
      "IntegrationType",
    ],
    PhoneNumber: [
      "Address",
      "CountryCode",
      "PhoneNumberArn",
      "Prefix",
      "SourcePhoneNumberArn",
      "Type",
    ],
    PredefinedAttribute: [
      "InstanceArn",
      "LastModifiedRegion",
      "LastModifiedTime",
      "Name",
    ],
    Prompt: ["PromptArn"],
    Queue: ["QueueArn", "Type"],
    QuickConnect: ["QuickConnectArn", "QuickConnectType"],
    RoutingProfile: ["RoutingProfileArn"],
    Rule: ["InstanceArn", "RuleArn", "TriggerEventSource"],
    SecurityKey: ["AssociationId", "InstanceId", "Key"],
    SecurityProfile: [
      "InstanceArn",
      "LastModifiedRegion",
      "LastModifiedTime",
      "SecurityProfileArn",
      "SecurityProfileName",
    ],
    TaskTemplate: ["Arn"],
    TrafficDistributionGroup: [
      "Description",
      "IsDefault",
      "Name",
      "Status",
      "TrafficDistributionGroupArn",
    ],
    User: ["UserArn"],
    UserHierarchyGroup: ["ParentGroupArn", "UserHierarchyGroupArn"],
    UserHierarchyStructure: ["InstanceArn", "UserHierarchyStructureArn"],
    View: ["ViewArn", "ViewContentSha256", "ViewId"],
    ViewVersion: ["Version", "ViewArn", "ViewContentSha256", "ViewVersionArn"],
  },
  ConnectCampaigns: {
    Campaign: ["Arn", "ConnectInstanceArn"],
  },
  ConnectCampaignsV2: {
    Campaign: ["Arn", "ConnectInstanceId"],
  },
  ControlTower: {
    EnabledBaseline: [
      "BaselineIdentifier",
      "EnabledBaselineIdentifier",
      "TargetIdentifier",
    ],
    EnabledControl: ["ControlIdentifier", "TargetIdentifier"],
    LandingZone: [
      "Arn",
      "DriftStatus",
      "LandingZoneIdentifier",
      "LatestAvailableVersion",
      "Status",
    ],
  },
  CustomerProfiles: {
    CalculatedAttributeDefinition: [
      "CalculatedAttributeName",
      "CreatedAt",
      "DomainName",
      "LastUpdatedAt",
    ],
    Domain: [
      "CreatedAt",
      "DomainName",
      "LastUpdatedAt",
      "RuleBasedMatching.Status",
      "Stats",
      "Stats.MeteringProfileCount",
      "Stats.ObjectCount",
      "Stats.ProfileCount",
      "Stats.TotalSize",
    ],
    EventStream: [
      "CreatedAt",
      "DestinationDetails",
      "DestinationDetails.Status",
      "DestinationDetails.Uri",
      "DomainName",
      "EventStreamArn",
      "EventStreamName",
      "State",
      "Uri",
    ],
    EventTrigger: [
      "CreatedAt",
      "DomainName",
      "EventTriggerName",
      "LastUpdatedAt",
    ],
    Integration: ["CreatedAt", "DomainName", "LastUpdatedAt", "Uri"],
    ObjectType: ["CreatedAt", "DomainName", "LastUpdatedAt", "ObjectTypeName"],
    SegmentDefinition: [
      "CreatedAt",
      "DisplayName",
      "DomainName",
      "SegmentDefinitionArn",
      "SegmentDefinitionName",
      "SegmentGroups",
    ],
  },
  DAX: {
    Cluster: [
      "Arn",
      "ClusterDiscoveryEndpoint",
      "ClusterDiscoveryEndpointURL",
      "ClusterEndpointEncryptionType",
      "ClusterName",
      "IAMRoleARN",
      "NodeType",
      "SSESpecification",
      "SubnetGroupName",
    ],
    ParameterGroup: ["ParameterGroupName"],
    SubnetGroup: ["SubnetGroupName"],
  },
  DLM: {
    LifecyclePolicy: ["Arn"],
  },
  DMS: {
    Certificate: [
      "CertificateIdentifier",
      "CertificatePem",
      "CertificateWallet",
    ],
    DataMigration: ["DataMigrationArn", "DataMigrationCreateTime"],
    DataProvider: ["DataProviderArn", "DataProviderCreationTime"],
    Endpoint: ["ExternalId", "KmsKeyId", "ResourceIdentifier"],
    EventSubscription: ["SourceIds", "SubscriptionName"],
    InstanceProfile: ["InstanceProfileArn", "InstanceProfileCreationTime"],
    MigrationProject: ["MigrationProjectArn"],
    ReplicationConfig: ["ReplicationConfigArn", "ResourceIdentifier"],
    ReplicationInstance: [
      "DnsNameServers",
      "KmsKeyId",
      "PubliclyAccessible",
      "ReplicationInstancePrivateIpAddresses",
      "ReplicationInstancePublicIpAddresses",
      "ReplicationSubnetGroupIdentifier",
      "ResourceIdentifier",
    ],
    ReplicationSubnetGroup: ["ReplicationSubnetGroupIdentifier"],
    ReplicationTask: [
      "ReplicationInstanceArn",
      "ResourceIdentifier",
      "SourceEndpointArn",
      "TargetEndpointArn",
    ],
  },
  DSQL: {
    Cluster: [
      "CreationTime",
      "Identifier",
      "ResourceArn",
      "Status",
      "VpcEndpointServiceName",
    ],
  },
  DataBrew: {
    Dataset: ["Name"],
    Job: ["Name", "Type"],
    Project: ["Name"],
    Recipe: ["Name"],
    Ruleset: ["Name", "TargetArn"],
    Schedule: ["Name"],
  },
  DataPipeline: {
    Pipeline: ["Description", "Name", "PipelineId"],
  },
  DataSync: {
    Agent: [
      "ActivationKey",
      "AgentArn",
      "EndpointType",
      "SecurityGroupArns",
      "SubnetArns",
      "VpcEndpointId",
    ],
    LocationAzureBlob: [
      "AzureBlobContainerUrl",
      "CmkSecretConfig.SecretArn",
      "LocationArn",
      "LocationUri",
      "ManagedSecretConfig",
      "ManagedSecretConfig.SecretArn",
    ],
    LocationEFS: [
      "Ec2Config",
      "EfsFilesystemArn",
      "LocationArn",
      "LocationUri",
    ],
    LocationFSxLustre: [
      "FsxFilesystemArn",
      "LocationArn",
      "LocationUri",
      "SecurityGroupArns",
    ],
    LocationFSxONTAP: [
      "FsxFilesystemArn",
      "LocationArn",
      "LocationUri",
      "SecurityGroupArns",
      "StorageVirtualMachineArn",
    ],
    LocationFSxOpenZFS: [
      "FsxFilesystemArn",
      "LocationArn",
      "LocationUri",
      "SecurityGroupArns",
    ],
    LocationFSxWindows: [
      "FsxFilesystemArn",
      "LocationArn",
      "LocationUri",
      "SecurityGroupArns",
    ],
    LocationHDFS: ["LocationArn", "LocationUri"],
    LocationNFS: ["LocationArn", "LocationUri"],
    LocationObjectStorage: [
      "BucketName",
      "CmkSecretConfig.SecretArn",
      "LocationArn",
      "LocationUri",
      "ManagedSecretConfig",
      "ManagedSecretConfig.SecretArn",
    ],
    LocationS3: ["LocationArn", "LocationUri", "S3BucketArn"],
    LocationSMB: ["LocationArn", "LocationUri"],
    Task: [
      "DestinationLocationArn",
      "DestinationNetworkInterfaceArns",
      "SourceLocationArn",
      "SourceNetworkInterfaceArns",
      "Status",
      "TaskArn",
      "TaskMode",
    ],
  },
  DataZone: {
    Connection: [
      "ConnectionId",
      "DomainId",
      "DomainIdentifier",
      "DomainUnitId",
      "EnvironmentId",
      "EnvironmentIdentifier",
      "EnvironmentUserRole",
      "Name",
      "ProjectId",
      "Type",
    ],
    DataSource: [
      "ConnectionId",
      "ConnectionIdentifier",
      "CreatedAt",
      "DomainId",
      "DomainIdentifier",
      "EnvironmentId",
      "EnvironmentIdentifier",
      "Id",
      "LastRunAssetCount",
      "LastRunAt",
      "LastRunStatus",
      "ProjectId",
      "ProjectIdentifier",
      "Status",
      "Type",
      "UpdatedAt",
    ],
    Domain: [
      "Arn",
      "CreatedAt",
      "DomainVersion",
      "Id",
      "KmsKeyIdentifier",
      "LastUpdatedAt",
      "ManagedAccountId",
      "PortalUrl",
      "RootDomainUnitId",
      "Status",
    ],
    DomainUnit: [
      "CreatedAt",
      "DomainId",
      "DomainIdentifier",
      "Id",
      "Identifier",
      "LastUpdatedAt",
      "ParentDomainUnitId",
      "ParentDomainUnitIdentifier",
    ],
    Environment: [
      "AwsAccountId",
      "AwsAccountRegion",
      "CreatedAt",
      "CreatedBy",
      "DomainId",
      "DomainIdentifier",
      "EnvironmentAccountIdentifier",
      "EnvironmentAccountRegion",
      "EnvironmentBlueprintId",
      "EnvironmentProfileId",
      "EnvironmentProfileIdentifier",
      "Id",
      "ProjectId",
      "ProjectIdentifier",
      "Provider",
      "Status",
      "UpdatedAt",
      "UserParameters",
    ],
    EnvironmentActions: [
      "DomainId",
      "DomainIdentifier",
      "EnvironmentId",
      "EnvironmentIdentifier",
      "Id",
    ],
    EnvironmentBlueprintConfiguration: [
      "CreatedAt",
      "DomainId",
      "DomainIdentifier",
      "EnvironmentBlueprintId",
      "EnvironmentBlueprintIdentifier",
      "UpdatedAt",
    ],
    EnvironmentProfile: [
      "CreatedAt",
      "CreatedBy",
      "DomainId",
      "DomainIdentifier",
      "EnvironmentBlueprintId",
      "EnvironmentBlueprintIdentifier",
      "Id",
      "ProjectId",
      "ProjectIdentifier",
      "UpdatedAt",
    ],
    GroupProfile: [
      "DomainId",
      "DomainIdentifier",
      "GroupIdentifier",
      "GroupName",
      "Id",
    ],
    Owner: ["DomainIdentifier", "EntityIdentifier", "EntityType", "Owner"],
    Project: [
      "CreatedAt",
      "CreatedBy",
      "DomainId",
      "DomainIdentifier",
      "DomainUnitId",
      "Id",
      "LastUpdatedAt",
      "ProjectProfileId",
      "ProjectStatus",
    ],
    ProjectMembership: ["DomainIdentifier", "Member", "ProjectIdentifier"],
    ProjectProfile: [
      "CreatedAt",
      "CreatedBy",
      "DomainId",
      "DomainIdentifier",
      "DomainUnitId",
      "Id",
      "Identifier",
      "LastUpdatedAt",
    ],
    SubscriptionTarget: [
      "CreatedAt",
      "CreatedBy",
      "DomainId",
      "DomainIdentifier",
      "EnvironmentId",
      "EnvironmentIdentifier",
      "Id",
      "ProjectId",
      "Type",
      "UpdatedAt",
      "UpdatedBy",
    ],
    UserProfile: [
      "Details",
      "Details.Iam",
      "Details.Iam.Arn",
      "Details.Sso",
      "Details.Sso.FirstName",
      "Details.Sso.LastName",
      "Details.Sso.Username",
      "DomainId",
      "DomainIdentifier",
      "Id",
      "Type",
      "UserIdentifier",
      "UserType",
    ],
  },
  Deadline: {
    Farm: ["Arn", "FarmId", "KmsKeyArn"],
    Fleet: [
      "Arn",
      "Capabilities",
      "Capabilities.Amounts",
      "Capabilities.Attributes",
      "FarmId",
      "FleetId",
      "Status",
      "WorkerCount",
    ],
    LicenseEndpoint: [
      "Arn",
      "DnsName",
      "LicenseEndpointId",
      "SecurityGroupIds",
      "Status",
      "StatusMessage",
      "SubnetIds",
      "VpcId",
    ],
    Limit: ["AmountRequirementName", "CurrentCount", "FarmId", "LimitId"],
    MeteredProduct: [
      "Arn",
      "Family",
      "LicenseEndpointId",
      "Port",
      "ProductId",
      "Vendor",
    ],
    Monitor: [
      "Arn",
      "IdentityCenterApplicationArn",
      "IdentityCenterInstanceArn",
      "MonitorId",
      "Url",
    ],
    Queue: ["Arn", "FarmId", "QueueId"],
    QueueEnvironment: ["FarmId", "Name", "QueueEnvironmentId", "QueueId"],
    QueueFleetAssociation: ["FarmId", "FleetId", "QueueId"],
    QueueLimitAssociation: ["FarmId", "LimitId", "QueueId"],
    StorageProfile: ["FarmId", "StorageProfileId"],
  },
  Detective: {
    Graph: ["Arn"],
    MemberInvitation: ["GraphArn", "MemberId"],
    OrganizationAdmin: ["AccountId", "GraphArn"],
  },
  DevOpsGuru: {
    LogAnomalyDetectionIntegration: ["AccountId"],
    NotificationChannel: ["Config", "Id"],
    ResourceCollection: ["ResourceCollectionType"],
  },
  DirectoryService: {
    MicrosoftAD: [
      "Alias",
      "CreateAlias",
      "DnsIpAddresses",
      "Edition",
      "Name",
      "Password",
      "ShortName",
      "VpcSettings",
    ],
    SimpleAD: [
      "Alias",
      "CreateAlias",
      "Description",
      "DirectoryId",
      "DnsIpAddresses",
      "Name",
      "Password",
      "ShortName",
      "Size",
      "VpcSettings",
    ],
  },
  DocDB: {
    DBCluster: [
      "AvailabilityZones",
      "ClusterResourceId",
      "DBClusterIdentifier",
      "DBSubnetGroupName",
      "Endpoint",
      "KmsKeyId",
      "MasterUsername",
      "Port",
      "ReadEndpoint",
      "SnapshotIdentifier",
      "SourceDBClusterIdentifier",
      "StorageEncrypted",
    ],
    DBClusterParameterGroup: ["Description", "Family", "Name"],
    DBInstance: [
      "AvailabilityZone",
      "DBClusterIdentifier",
      "DBInstanceIdentifier",
      "Endpoint",
      "Port",
    ],
    DBSubnetGroup: ["DBSubnetGroupName"],
    EventSubscription: ["SnsTopicArn", "SubscriptionName"],
  },
  DocDBElastic: {
    Cluster: [
      "AdminUserName",
      "AuthType",
      "ClusterArn",
      "ClusterEndpoint",
      "ClusterName",
      "KmsKeyId",
    ],
  },
  DynamoDB: {
    GlobalTable: [
      "Arn",
      "KeySchema",
      "LocalSecondaryIndexes",
      "StreamArn",
      "TableId",
      "TableName",
    ],
    Table: [
      "Arn",
      "ImportSourceSpecification",
      "KeySchema",
      "StreamArn",
      "TableName",
    ],
  },
  EC2: {
    CapacityReservation: [
      "AvailabilityZone",
      "AvailabilityZone",
      "AvailabilityZoneId",
      "AvailableInstanceCount",
      "CapacityAllocationSet",
      "CapacityReservationArn",
      "CapacityReservationFleetId",
      "CommitmentInfo",
      "CommitmentInfo.CommitmentEndDate",
      "CommitmentInfo.CommittedInstanceCount",
      "CreateDate",
      "DeliveryPreference",
      "EbsOptimized",
      "EphemeralStorage",
      "Id",
      "InstancePlatform",
      "InstanceType",
      "InstanceType",
      "OutPostArn",
      "OwnerId",
      "PlacementGroupArn",
      "ReservationType",
      "StartDate",
      "State",
      "TagSpecifications",
      "Tenancy",
      "Tenancy",
      "TotalInstanceCount",
    ],
    CapacityReservationFleet: [
      "AllocationStrategy",
      "CapacityReservationFleetId",
      "EndDate",
      "InstanceMatchCriteria",
      "InstanceTypeSpecifications",
      "TagSpecifications",
      "Tenancy",
    ],
    CarrierGateway: ["CarrierGatewayId", "OwnerId", "State", "VpcId"],
    ClientVpnAuthorizationRule: [
      "AccessGroupId",
      "AuthorizeAllGroups",
      "ClientVpnEndpointId",
      "Description",
      "TargetNetworkCidr",
    ],
    ClientVpnEndpoint: [
      "AuthenticationOptions",
      "ClientCidrBlock",
      "TagSpecifications",
      "TransportProtocol",
    ],
    ClientVpnRoute: [
      "ClientVpnEndpointId",
      "Description",
      "DestinationCidrBlock",
      "TargetVpcSubnetId",
    ],
    ClientVpnTargetNetworkAssociation: ["ClientVpnEndpointId", "SubnetId"],
    CustomerGateway: [
      "BgpAsn",
      "BgpAsnExtended",
      "CertificateArn",
      "CustomerGatewayId",
      "DeviceName",
      "IpAddress",
      "Type",
    ],
    DHCPOptions: [
      "DhcpOptionsId",
      "DomainName",
      "DomainNameServers",
      "Ipv6AddressPreferredLeaseTime",
      "NetbiosNameServers",
      "NetbiosNodeType",
      "NtpServers",
    ],
    EC2Fleet: [
      "FleetId",
      "LaunchTemplateConfigs",
      "OnDemandOptions",
      "ReplaceUnhealthyInstances",
      "SpotOptions",
      "TagSpecifications",
      "TerminateInstancesWithExpiration",
      "Type",
      "ValidFrom",
      "ValidUntil",
    ],
    EIP: [
      "Address",
      "AllocationId",
      "IpamPoolId",
      "NetworkBorderGroup",
      "PublicIp",
      "TransferAddress",
    ],
    EIPAssociation: [
      "AllocationId",
      "Id",
      "InstanceId",
      "NetworkInterfaceId",
      "PrivateIpAddress",
    ],
    EgressOnlyInternetGateway: ["Id", "VpcId"],
    EnclaveCertificateIamRoleAssociation: [
      "CertificateArn",
      "CertificateS3BucketName",
      "CertificateS3ObjectKey",
      "EncryptionKmsKeyId",
      "RoleArn",
    ],
    FlowLog: [
      "DeliverCrossAccountRole",
      "DeliverLogsPermissionArn",
      "DestinationOptions",
      "Id",
      "LogDestination",
      "LogDestinationType",
      "LogFormat",
      "LogGroupName",
      "MaxAggregationInterval",
      "ResourceId",
      "ResourceType",
      "TrafficType",
    ],
    GatewayRouteTableAssociation: ["AssociationId", "GatewayId"],
    Host: [
      "AssetId",
      "AvailabilityZone",
      "HostId",
      "InstanceFamily",
      "InstanceType",
      "OutpostArn",
    ],
    IPAM: [
      "Arn",
      "DefaultResourceDiscoveryAssociationId",
      "DefaultResourceDiscoveryId",
      "IpamId",
      "PrivateDefaultScopeId",
      "PublicDefaultScopeId",
      "ResourceDiscoveryAssociationCount",
      "ScopeCount",
    ],
    IPAMAllocation: [
      "Cidr",
      "Description",
      "IpamPoolAllocationId",
      "IpamPoolId",
      "NetmaskLength",
    ],
    IPAMPool: [
      "AddressFamily",
      "Arn",
      "AwsService",
      "IpamArn",
      "IpamPoolId",
      "IpamScopeArn",
      "IpamScopeId",
      "IpamScopeType",
      "Locale",
      "PoolDepth",
      "PublicIpSource",
      "PubliclyAdvertisable",
      "SourceIpamPoolId",
      "SourceResource",
      "State",
      "StateMessage",
    ],
    IPAMPoolCidr: [
      "Cidr",
      "IpamPoolCidrId",
      "IpamPoolId",
      "NetmaskLength",
      "State",
    ],
    IPAMResourceDiscovery: [
      "IpamResourceDiscoveryArn",
      "IpamResourceDiscoveryId",
      "IpamResourceDiscoveryRegion",
      "IsDefault",
      "OwnerId",
      "State",
    ],
    IPAMResourceDiscoveryAssociation: [
      "IpamArn",
      "IpamId",
      "IpamRegion",
      "IpamResourceDiscoveryAssociationArn",
      "IpamResourceDiscoveryAssociationId",
      "IpamResourceDiscoveryId",
      "IsDefault",
      "OwnerId",
      "ResourceDiscoveryStatus",
      "State",
    ],
    IPAMScope: [
      "Arn",
      "IpamArn",
      "IpamId",
      "IpamScopeId",
      "IpamScopeType",
      "IsDefault",
      "PoolCount",
    ],
    Instance: [
      "AvailabilityZone",
      "AvailabilityZone",
      "CpuOptions",
      "ElasticGpuSpecifications",
      "ElasticInferenceAccelerators",
      "EnclaveOptions",
      "HibernationOptions",
      "HostResourceGroupArn",
      "ImageId",
      "InstanceId",
      "Ipv6AddressCount",
      "Ipv6Addresses",
      "KeyName",
      "LaunchTemplate",
      "LicenseSpecifications",
      "NetworkInterfaces",
      "PlacementGroupName",
      "PrivateDnsName",
      "PrivateIp",
      "PrivateIpAddress",
      "PublicDnsName",
      "PublicIp",
      "SecurityGroups",
      "State",
      "State.Code",
      "State.Name",
      "SubnetId",
      "VpcId",
    ],
    InstanceConnectEndpoint: [
      "ClientToken",
      "Id",
      "PreserveClientIp",
      "SecurityGroupIds",
      "SubnetId",
    ],
    InternetGateway: ["InternetGatewayId"],
    KeyPair: [
      "KeyFingerprint",
      "KeyFormat",
      "KeyName",
      "KeyPairId",
      "KeyType",
      "PublicKeyMaterial",
      "Tags",
    ],
    LaunchTemplate: [
      "DefaultVersionNumber",
      "LatestVersionNumber",
      "LaunchTemplateId",
      "LaunchTemplateName",
    ],
    LocalGatewayRoute: [
      "DestinationCidrBlock",
      "LocalGatewayRouteTableId",
      "State",
      "Type",
    ],
    LocalGatewayRouteTable: [
      "LocalGatewayId",
      "LocalGatewayRouteTableArn",
      "LocalGatewayRouteTableId",
      "Mode",
      "OutpostArn",
      "OwnerId",
      "State",
    ],
    LocalGatewayRouteTableVPCAssociation: [
      "LocalGatewayId",
      "LocalGatewayRouteTableId",
      "LocalGatewayRouteTableVpcAssociationId",
      "State",
      "VpcId",
    ],
    LocalGatewayRouteTableVirtualInterfaceGroupAssociation: [
      "LocalGatewayId",
      "LocalGatewayRouteTableArn",
      "LocalGatewayRouteTableId",
      "LocalGatewayRouteTableVirtualInterfaceGroupAssociationId",
      "LocalGatewayVirtualInterfaceGroupId",
      "OwnerId",
      "State",
    ],
    NatGateway: [
      "AllocationId",
      "ConnectivityType",
      "NatGatewayId",
      "PrivateIpAddress",
      "SubnetId",
    ],
    NetworkAcl: ["Id", "VpcId"],
    NetworkAclEntry: ["Egress", "Id", "NetworkAclId", "RuleNumber"],
    NetworkInsightsAccessScope: [
      "CreatedDate",
      "ExcludePaths",
      "MatchPaths",
      "NetworkInsightsAccessScopeArn",
      "NetworkInsightsAccessScopeId",
      "UpdatedDate",
    ],
    NetworkInsightsAccessScopeAnalysis: [
      "AnalyzedEniCount",
      "EndDate",
      "FindingsFound",
      "NetworkInsightsAccessScopeAnalysisArn",
      "NetworkInsightsAccessScopeAnalysisId",
      "NetworkInsightsAccessScopeId",
      "StartDate",
      "Status",
      "StatusMessage",
    ],
    NetworkInsightsAnalysis: [
      "AlternatePathHints",
      "Explanations",
      "FilterInArns",
      "FilterOutArns",
      "ForwardPathComponents",
      "NetworkInsightsAnalysisArn",
      "NetworkInsightsAnalysisId",
      "NetworkInsightsPathId",
      "NetworkPathFound",
      "ReturnPathComponents",
      "StartDate",
      "Status",
      "StatusMessage",
      "SuggestedAccounts",
    ],
    NetworkInsightsPath: [
      "CreatedDate",
      "Destination",
      "DestinationArn",
      "DestinationIp",
      "DestinationPort",
      "FilterAtDestination",
      "FilterAtSource",
      "NetworkInsightsPathArn",
      "NetworkInsightsPathId",
      "Protocol",
      "Source",
      "SourceArn",
      "SourceIp",
    ],
    NetworkInterface: [
      "Id",
      "InterfaceType",
      "PrimaryIpv6Address",
      "PrimaryPrivateIpAddress",
      "PrivateIpAddress",
      "SecondaryPrivateIpAddresses",
      "SubnetId",
      "VpcId",
    ],
    NetworkInterfaceAttachment: [
      "AttachmentId",
      "DeviceIndex",
      "InstanceId",
      "NetworkInterfaceId",
    ],
    NetworkInterfacePermission: [
      "AwsAccountId",
      "NetworkInterfaceId",
      "Permission",
    ],
    NetworkPerformanceMetricSubscription: [
      "Destination",
      "Metric",
      "Source",
      "Statistic",
    ],
    PlacementGroup: [
      "GroupName",
      "PartitionCount",
      "SpreadLevel",
      "Strategy",
      "Tags",
    ],
    PrefixList: ["Arn", "OwnerId", "PrefixListId", "Version"],
    Route: [
      "CidrBlock",
      "DestinationCidrBlock",
      "DestinationIpv6CidrBlock",
      "DestinationPrefixListId",
      "RouteTableId",
    ],
    RouteServer: ["AmazonSideAsn", "Arn", "Id"],
    RouteServerAssociation: ["RouteServerId", "VpcId"],
    RouteServerEndpoint: [
      "Arn",
      "EniAddress",
      "EniId",
      "Id",
      "RouteServerId",
      "SubnetId",
      "VpcId",
    ],
    RouteServerPeer: [
      "Arn",
      "BgpOptions",
      "EndpointEniAddress",
      "EndpointEniId",
      "Id",
      "PeerAddress",
      "RouteServerEndpointId",
      "RouteServerId",
      "SubnetId",
      "VpcId",
    ],
    RouteServerPropagation: ["RouteServerId", "RouteTableId"],
    RouteTable: ["RouteTableId", "VpcId"],
    SecurityGroup: [
      "GroupDescription",
      "GroupId",
      "GroupName",
      "Id",
      "VpcId",
      "VpcId",
    ],
    SecurityGroupEgress: [
      "CidrIp",
      "CidrIpv6",
      "DestinationPrefixListId",
      "DestinationSecurityGroupId",
      "FromPort",
      "GroupId",
      "Id",
      "IpProtocol",
      "ToPort",
    ],
    SecurityGroupIngress: [
      "CidrIp",
      "CidrIpv6",
      "FromPort",
      "GroupId",
      "GroupName",
      "Id",
      "IpProtocol",
      "SourcePrefixListId",
      "SourceSecurityGroupId",
      "SourceSecurityGroupName",
      "SourceSecurityGroupOwnerId",
      "ToPort",
    ],
    SecurityGroupVpcAssociation: [
      "GroupId",
      "State",
      "StateReason",
      "VpcId",
      "VpcOwnerId",
    ],
    SnapshotBlockPublicAccess: ["AccountId"],
    SpotFleet: ["Id"],
    Subnet: [
      "AvailabilityZone",
      "AvailabilityZone",
      "AvailabilityZoneId",
      "AvailabilityZoneId",
      "CidrBlock",
      "CidrBlock",
      "Ipv4IpamPoolId",
      "Ipv4NetmaskLength",
      "Ipv6CidrBlocks",
      "Ipv6IpamPoolId",
      "Ipv6Native",
      "Ipv6NetmaskLength",
      "NetworkAclAssociationId",
      "OutpostArn",
      "OutpostArn",
      "SubnetId",
      "VpcId",
      "VpcId",
    ],
    SubnetCidrBlock: [
      "Id",
      "IpSource",
      "Ipv6AddressAttribute",
      "Ipv6CidrBlock",
      "Ipv6IpamPoolId",
      "Ipv6NetmaskLength",
      "SubnetId",
    ],
    SubnetNetworkAclAssociation: ["AssociationId", "NetworkAclId", "SubnetId"],
    SubnetRouteTableAssociation: ["Id", "RouteTableId", "SubnetId"],
    TrafficMirrorFilter: ["Description"],
    TrafficMirrorFilterRule: ["TrafficMirrorFilterId"],
    TrafficMirrorSession: ["NetworkInterfaceId"],
    TrafficMirrorTarget: [
      "Description",
      "GatewayLoadBalancerEndpointId",
      "NetworkInterfaceId",
      "NetworkLoadBalancerArn",
    ],
    TransitGateway: [
      "AmazonSideAsn",
      "Id",
      "MulticastSupport",
      "TransitGatewayArn",
    ],
    TransitGatewayAttachment: ["Id", "TransitGatewayId", "VpcId"],
    TransitGatewayConnect: [
      "CreationTime",
      "Options",
      "State",
      "TransitGatewayAttachmentId",
      "TransitGatewayId",
      "TransportTransitGatewayAttachmentId",
    ],
    TransitGatewayMulticastDomain: [
      "CreationTime",
      "State",
      "TransitGatewayId",
      "TransitGatewayMulticastDomainArn",
      "TransitGatewayMulticastDomainId",
    ],
    TransitGatewayMulticastDomainAssociation: [
      "ResourceId",
      "ResourceType",
      "State",
      "SubnetId",
      "TransitGatewayAttachmentId",
      "TransitGatewayMulticastDomainId",
    ],
    TransitGatewayMulticastGroupMember: [
      "GroupIpAddress",
      "GroupMember",
      "GroupSource",
      "MemberType",
      "NetworkInterfaceId",
      "ResourceId",
      "ResourceType",
      "SubnetId",
      "TransitGatewayAttachmentId",
      "TransitGatewayMulticastDomainId",
    ],
    TransitGatewayMulticastGroupSource: [
      "GroupIpAddress",
      "GroupMember",
      "GroupSource",
      "NetworkInterfaceId",
      "ResourceId",
      "ResourceType",
      "SourceType",
      "SubnetId",
      "TransitGatewayAttachmentId",
      "TransitGatewayMulticastDomainId",
    ],
    TransitGatewayPeeringAttachment: [
      "CreationTime",
      "PeerAccountId",
      "PeerRegion",
      "PeerTransitGatewayId",
      "State",
      "Status",
      "Status.Code",
      "Status.Message",
      "TransitGatewayAttachmentId",
      "TransitGatewayId",
    ],
    TransitGatewayRoute: [
      "Blackhole",
      "DestinationCidrBlock",
      "TransitGatewayAttachmentId",
      "TransitGatewayRouteTableId",
    ],
    TransitGatewayRouteTable: [
      "TransitGatewayId",
      "TransitGatewayRouteTableId",
    ],
    TransitGatewayRouteTableAssociation: [
      "TransitGatewayAttachmentId",
      "TransitGatewayRouteTableId",
    ],
    TransitGatewayRouteTablePropagation: [
      "TransitGatewayAttachmentId",
      "TransitGatewayRouteTableId",
    ],
    TransitGatewayVpcAttachment: [
      "Id",
      "SubnetIds",
      "TransitGatewayId",
      "VpcId",
    ],
    VPC: [
      "CidrBlock",
      "CidrBlock",
      "CidrBlockAssociations",
      "DefaultNetworkAcl",
      "DefaultSecurityGroup",
      "Ipv4IpamPoolId",
      "Ipv4NetmaskLength",
      "Ipv6CidrBlocks",
      "VpcId",
    ],
    VPCBlockPublicAccessExclusion: ["ExclusionId", "SubnetId", "VpcId"],
    VPCBlockPublicAccessOptions: ["AccountId"],
    VPCCidrBlock: [
      "AmazonProvidedIpv6CidrBlock",
      "CidrBlock",
      "Id",
      "IpSource",
      "Ipv4IpamPoolId",
      "Ipv4NetmaskLength",
      "Ipv6AddressAttribute",
      "Ipv6CidrBlock",
      "Ipv6CidrBlockNetworkBorderGroup",
      "Ipv6IpamPoolId",
      "Ipv6NetmaskLength",
      "Ipv6Pool",
      "VpcId",
    ],
    VPCDHCPOptionsAssociation: ["DhcpOptionsId", "VpcId"],
    VPCEndpoint: [
      "CreationTimestamp",
      "DnsEntries",
      "Id",
      "NetworkInterfaceIds",
      "ResourceConfigurationArn",
      "ServiceName",
      "ServiceNetworkArn",
      "ServiceRegion",
      "VpcEndpointType",
      "VpcId",
    ],
    VPCEndpointConnectionNotification: [
      "ServiceId",
      "VPCEndpointConnectionNotificationId",
      "VPCEndpointId",
    ],
    VPCEndpointService: ["ServiceId"],
    VPCEndpointServicePermissions: ["ServiceId"],
    VPCGatewayAttachment: ["AttachmentType", "VpcId"],
    VPCPeeringConnection: [
      "Id",
      "PeerOwnerId",
      "PeerRegion",
      "PeerRoleArn",
      "PeerVpcId",
      "VpcId",
    ],
    VPNConnection: [
      "CustomerGatewayId",
      "EnableAcceleration",
      "LocalIpv4NetworkCidr",
      "LocalIpv6NetworkCidr",
      "OutsideIpAddressType",
      "RemoteIpv4NetworkCidr",
      "RemoteIpv6NetworkCidr",
      "StaticRoutesOnly",
      "TransitGatewayId",
      "TransportTransitGatewayAttachmentId",
      "TunnelInsideIpVersion",
      "Type",
      "VpnConnectionId",
      "VpnGatewayId",
      "VpnTunnelOptionsSpecifications",
    ],
    VPNConnectionRoute: ["DestinationCidrBlock", "VpnConnectionId"],
    VPNGateway: ["AmazonSideAsn", "Type", "VPNGatewayId"],
    VPNGatewayRoutePropagation: ["Id"],
    VerifiedAccessEndpoint: [
      "ApplicationDomain",
      "AttachmentType",
      "CreationTime",
      "DeviceValidationDomain",
      "DomainCertificateArn",
      "EndpointDomain",
      "EndpointDomainPrefix",
      "EndpointType",
      "LastUpdatedTime",
      "SecurityGroupIds",
      "Status",
      "VerifiedAccessEndpointId",
      "VerifiedAccessInstanceId",
    ],
    VerifiedAccessGroup: [
      "CreationTime",
      "LastUpdatedTime",
      "Owner",
      "VerifiedAccessGroupArn",
      "VerifiedAccessGroupId",
    ],
    VerifiedAccessInstance: [
      "CidrEndpointsCustomSubDomainNameServers",
      "CreationTime",
      "LastUpdatedTime",
      "VerifiedAccessInstanceId",
    ],
    VerifiedAccessTrustProvider: [
      "CreationTime",
      "DeviceOptions",
      "DeviceTrustProviderType",
      "LastUpdatedTime",
      "PolicyReferenceName",
      "TrustProviderType",
      "UserTrustProviderType",
      "VerifiedAccessTrustProviderId",
    ],
    Volume: ["VolumeId"],
    VolumeAttachment: ["Device", "InstanceId", "VolumeId"],
  },
  ECR: {
    PublicRepository: ["Arn", "RepositoryName"],
    PullThroughCacheRule: [
      "CredentialArn",
      "CustomRoleArn",
      "EcrRepositoryPrefix",
      "UpstreamRegistry",
      "UpstreamRegistryUrl",
      "UpstreamRepositoryPrefix",
    ],
    RegistryPolicy: ["RegistryId"],
    RegistryScanningConfiguration: ["RegistryId"],
    ReplicationConfiguration: ["RegistryId"],
    Repository: [
      "Arn",
      "EncryptionConfiguration",
      "RepositoryName",
      "RepositoryUri",
    ],
    RepositoryCreationTemplate: ["CreatedAt", "Prefix", "UpdatedAt"],
  },
  ECS: {
    CapacityProvider: ["Name"],
    Cluster: ["Arn", "ClusterName"],
    ClusterCapacityProviderAssociations: ["Cluster"],
    PrimaryTaskSet: ["Cluster", "Service"],
    Service: [
      "Cluster",
      "LaunchType",
      "Name",
      "Role",
      "SchedulingStrategy",
      "ServiceArn",
      "ServiceName",
    ],
    TaskDefinition: [
      "ContainerDefinitions",
      "Cpu",
      "EnableFaultInjection",
      "EphemeralStorage",
      "ExecutionRoleArn",
      "Family",
      "InferenceAccelerators",
      "IpcMode",
      "Memory",
      "NetworkMode",
      "PidMode",
      "PlacementConstraints",
      "ProxyConfiguration",
      "RequiresCompatibilities",
      "RuntimePlatform",
      "TaskDefinitionArn",
      "TaskRoleArn",
      "Volumes",
    ],
    TaskSet: [
      "CapacityProviderStrategy",
      "Cluster",
      "ExternalId",
      "Id",
      "LaunchType",
      "LoadBalancers",
      "NetworkConfiguration",
      "PlatformVersion",
      "Service",
      "ServiceRegistries",
      "TaskDefinition",
    ],
  },
  EFS: {
    AccessPoint: [
      "AccessPointId",
      "Arn",
      "ClientToken",
      "FileSystemId",
      "PosixUser",
      "RootDirectory",
    ],
    FileSystem: [
      "Arn",
      "AvailabilityZoneName",
      "Encrypted",
      "FileSystemId",
      "KmsKeyId",
      "PerformanceMode",
    ],
    MountTarget: ["FileSystemId", "Id", "IpAddress", "IpAddress", "SubnetId"],
  },
  EKS: {
    AccessEntry: ["AccessEntryArn", "ClusterName", "PrincipalArn", "Type"],
    Addon: ["AddonName", "Arn", "ClusterName"],
    Cluster: [
      "Arn",
      "BootstrapSelfManagedAddons",
      "CertificateAuthorityData",
      "ClusterSecurityGroupId",
      "EncryptionConfig",
      "EncryptionConfigKeyArn",
      "Endpoint",
      "Id",
      "KubernetesNetworkConfig.ServiceIpv6Cidr",
      "Name",
      "OpenIdConnectIssuerUrl",
      "OutpostConfig",
      "RoleArn",
    ],
    FargateProfile: [
      "Arn",
      "ClusterName",
      "FargateProfileName",
      "PodExecutionRoleArn",
      "Selectors",
      "Subnets",
    ],
    IdentityProviderConfig: [
      "ClusterName",
      "IdentityProviderConfigArn",
      "IdentityProviderConfigName",
      "Oidc",
      "Type",
    ],
    Nodegroup: [
      "AmiType",
      "Arn",
      "CapacityType",
      "ClusterName",
      "ClusterName",
      "DiskSize",
      "Id",
      "InstanceTypes",
      "NodeRole",
      "NodegroupName",
      "NodegroupName",
      "RemoteAccess",
      "Subnets",
    ],
    PodIdentityAssociation: [
      "AssociationArn",
      "AssociationId",
      "ClusterName",
      "Namespace",
      "ServiceAccount",
    ],
  },
  EMR: {
    Cluster: [
      "AdditionalInfo",
      "Applications",
      "AutoScalingRole",
      "BootstrapActions",
      "Configurations",
      "CustomAmiId",
      "EbsRootVolumeIops",
      "EbsRootVolumeSize",
      "EbsRootVolumeThroughput",
      "JobFlowRole",
      "KerberosAttributes",
      "LogEncryptionKmsKeyId",
      "LogUri",
      "MasterPublicDNS",
      "Name",
      "OSReleaseLabel",
      "PlacementGroupConfigs",
      "ReleaseLabel",
      "ScaleDownBehavior",
      "SecurityConfiguration",
      "ServiceRole",
      "Steps",
    ],
    InstanceFleetConfig: [
      "ClusterId",
      "InstanceFleetType",
      "LaunchSpecifications",
      "Name",
    ],
    InstanceGroupConfig: [
      "BidPrice",
      "Configurations",
      "CustomAmiId",
      "EbsConfiguration",
      "InstanceRole",
      "InstanceType",
      "JobFlowId",
      "Market",
      "Name",
    ],
    SecurityConfiguration: ["Name", "SecurityConfiguration"],
    Step: ["ActionOnFailure", "HadoopJarStep", "Id", "JobFlowId", "Name"],
    Studio: [
      "Arn",
      "AuthMode",
      "EncryptionKeyArn",
      "EngineSecurityGroupId",
      "IdcInstanceArn",
      "IdcUserAssignment",
      "ServiceRole",
      "StudioId",
      "TrustedIdentityPropagationEnabled",
      "Url",
      "UserRole",
      "VpcId",
      "WorkspaceSecurityGroupId",
    ],
    StudioSessionMapping: ["IdentityName", "IdentityType", "StudioId"],
    WALWorkspace: ["WALWorkspaceName"],
  },
  EMRContainers: {
    VirtualCluster: ["Arn", "ContainerProvider", "Id", "Name"],
  },
  EMRServerless: {
    Application: ["ApplicationId", "Arn", "Name", "Type"],
  },
  ElastiCache: {
    CacheCluster: [
      "CacheSubnetGroupName",
      "ClusterName",
      "ConfigurationEndpoint.Address",
      "ConfigurationEndpoint.Port",
      "Engine",
      "NetworkType",
      "Port",
      "RedisEndpoint.Address",
      "RedisEndpoint.Port",
      "SnapshotArns",
      "SnapshotName",
    ],
    GlobalReplicationGroup: ["GlobalReplicationGroupId", "Status"],
    ParameterGroup: ["CacheParameterGroupFamily", "CacheParameterGroupName"],
    ReplicationGroup: [
      "AtRestEncryptionEnabled",
      "CacheSubnetGroupName",
      "ConfigurationEndPoint.Address",
      "ConfigurationEndPoint.Port",
      "DataTieringEnabled",
      "GlobalReplicationGroupId",
      "KmsKeyId",
      "NetworkType",
      "Port",
      "PreferredCacheClusterAZs",
      "PrimaryEndPoint.Address",
      "PrimaryEndPoint.Port",
      "ReadEndPoint.Addresses",
      "ReadEndPoint.Addresses.List",
      "ReadEndPoint.Ports",
      "ReadEndPoint.Ports.List",
      "ReaderEndPoint.Address",
      "ReaderEndPoint.Port",
      "ReplicasPerNodeGroup",
      "ReplicationGroupId",
      "SnapshotArns",
      "SnapshotName",
    ],
    ServerlessCache: [
      "ARN",
      "CreateTime",
      "Endpoint.Address",
      "Endpoint.Port",
      "FullEngineVersion",
      "KmsKeyId",
      "ReaderEndpoint.Address",
      "ReaderEndpoint.Port",
      "ServerlessCacheName",
      "SnapshotArnsToRestore",
      "Status",
      "SubnetIds",
    ],
    SubnetGroup: ["CacheSubnetGroupName"],
    User: ["Arn", "Status", "UserId", "UserName"],
    UserGroup: ["Arn", "Status", "UserGroupId"],
  },
  ElasticBeanstalk: {
    Application: ["ApplicationName"],
    ApplicationVersion: ["ApplicationName", "Id", "SourceBundle"],
    ConfigurationTemplate: [
      "ApplicationName",
      "EnvironmentId",
      "PlatformArn",
      "SolutionStackName",
      "SourceConfiguration",
      "TemplateName",
    ],
    Environment: [
      "ApplicationName",
      "CNAMEPrefix",
      "EndpointURL",
      "EnvironmentName",
      "SolutionStackName",
    ],
  },
  ElasticLoadBalancing: {
    LoadBalancer: [
      "CanonicalHostedZoneName",
      "CanonicalHostedZoneNameID",
      "DNSName",
      "LoadBalancerName",
      "Scheme",
      "SourceSecurityGroup.GroupName",
      "SourceSecurityGroup.OwnerAlias",
    ],
  },
  ElasticLoadBalancingV2: {
    Listener: ["ListenerArn", "LoadBalancerArn"],
    ListenerCertificate: ["ListenerArn"],
    ListenerRule: ["IsDefault", "ListenerArn", "RuleArn"],
    LoadBalancer: [
      "CanonicalHostedZoneID",
      "DNSName",
      "LoadBalancerArn",
      "LoadBalancerFullName",
      "LoadBalancerName",
      "Name",
      "Scheme",
      "SecurityGroups",
      "Type",
    ],
    TargetGroup: [
      "IpAddressType",
      "LoadBalancerArns",
      "Name",
      "Port",
      "Protocol",
      "ProtocolVersion",
      "TargetGroupArn",
      "TargetGroupFullName",
      "TargetGroupName",
      "TargetType",
      "VpcId",
    ],
    TrustStore: ["Name", "NumberOfCaCertificates", "Status", "TrustStoreArn"],
    TrustStoreRevocation: [
      "RevocationContents",
      "RevocationId",
      "TrustStoreArn",
      "TrustStoreRevocations",
    ],
  },
  Elasticsearch: {
    Domain: ["Arn", "DomainArn", "DomainEndpoint", "DomainName"],
  },
  EntityResolution: {
    IdMappingWorkflow: [
      "CreatedAt",
      "UpdatedAt",
      "WorkflowArn",
      "WorkflowName",
    ],
    IdNamespace: [
      "CreatedAt",
      "IdNamespaceArn",
      "IdNamespaceName",
      "UpdatedAt",
    ],
    MatchingWorkflow: ["CreatedAt", "UpdatedAt", "WorkflowArn", "WorkflowName"],
    PolicyStatement: ["Arn", "StatementId"],
    SchemaMapping: [
      "CreatedAt",
      "HasWorkflows",
      "SchemaArn",
      "SchemaName",
      "UpdatedAt",
    ],
  },
  EventSchemas: {
    Discoverer: ["DiscovererArn", "DiscovererId", "SourceArn", "State"],
    Registry: ["RegistryArn", "RegistryName", "RegistryName"],
    RegistryPolicy: ["Id"],
    Schema: [
      "LastModified",
      "RegistryName",
      "SchemaArn",
      "SchemaName",
      "SchemaName",
      "SchemaVersion",
      "VersionCreatedDate",
    ],
  },
  Events: {
    ApiDestination: ["Arn", "ArnForPolicy", "Name"],
    Archive: ["ArchiveName", "Arn", "SourceArn"],
    Connection: [
      "Arn",
      "ArnForPolicy",
      "AuthParameters.ConnectivityParameters.ResourceParameters.ResourceAssociationArn",
      "InvocationConnectivityParameters.ResourceParameters.ResourceAssociationArn",
      "Name",
      "SecretArn",
    ],
    Endpoint: [
      "Arn",
      "EndpointId",
      "EndpointUrl",
      "Name",
      "State",
      "StateReason",
    ],
    EventBus: ["Arn", "Name", "Name"],
    EventBusPolicy: ["EventBusName", "StatementId"],
    Rule: ["Arn", "Name"],
  },
  Evidently: {
    Experiment: ["Arn", "Name", "Project"],
    Feature: ["Arn", "Name", "Project"],
    Launch: ["Arn", "Name", "Project"],
    Project: ["Arn", "Name"],
    Segment: ["Arn"],
  },
  FIS: {
    ExperimentTemplate: ["Id", "Tags"],
    TargetAccountConfiguration: ["AccountId", "ExperimentTemplateId"],
  },
  FMS: {
    Policy: ["Arn", "Id"],
    ResourceSet: ["Id"],
  },
  FSx: {
    DataRepositoryAssociation: [
      "AssociationId",
      "BatchImportMetaDataOnCreate",
      "DataRepositoryPath",
      "FileSystemId",
      "FileSystemPath",
      "ResourceARN",
    ],
    FileSystem: [
      "BackupId",
      "DNSName",
      "FileSystemType",
      "KmsKeyId",
      "LustreMountName",
      "ResourceARN",
      "RootVolumeId",
      "SecurityGroupIds",
      "SubnetIds",
    ],
    Snapshot: ["ResourceARN", "VolumeId"],
    StorageVirtualMachine: [
      "FileSystemId",
      "Name",
      "ResourceARN",
      "RootVolumeSecurityStyle",
      "StorageVirtualMachineId",
      "UUID",
    ],
    Volume: ["BackupId", "ResourceARN", "UUID", "VolumeId", "VolumeType"],
  },
  FinSpace: {
    Environment: [
      "AwsAccountId",
      "DedicatedServiceAccountId",
      "EnvironmentArn",
      "EnvironmentId",
      "EnvironmentUrl",
      "FederationParameters",
      "KmsKeyId",
      "SageMakerStudioDomainUrl",
      "Status",
      "SuperuserParameters",
      "Tags",
    ],
  },
  Forecast: {
    Dataset: ["Arn", "DatasetName"],
    DatasetGroup: ["DatasetGroupArn", "DatasetGroupName"],
  },
  FraudDetector: {
    Detector: [
      "Arn",
      "CreatedTime",
      "DetectorId",
      "DetectorVersionId",
      "EventType.Arn",
      "EventType.CreatedTime",
      "EventType.LastUpdatedTime",
      "LastUpdatedTime",
    ],
    EntityType: ["Arn", "CreatedTime", "LastUpdatedTime", "Name"],
    EventType: ["Arn", "CreatedTime", "LastUpdatedTime", "Name"],
    Label: ["Arn", "CreatedTime", "LastUpdatedTime", "Name"],
    List: ["Arn", "CreatedTime", "LastUpdatedTime", "Name"],
    Outcome: ["Arn", "CreatedTime", "LastUpdatedTime", "Name"],
    Variable: ["Arn", "CreatedTime", "LastUpdatedTime", "Name"],
  },
  GameLift: {
    Alias: ["AliasArn", "AliasId"],
    Build: [
      "BuildArn",
      "BuildId",
      "OperatingSystem",
      "ServerSdkVersion",
      "StorageLocation",
    ],
    ContainerFleet: [
      "BillingType",
      "CreationTime",
      "DeploymentDetails",
      "DeploymentDetails.LatestDeploymentId",
      "FleetArn",
      "FleetId",
      "GameServerContainerGroupDefinitionArn",
      "InstanceType",
      "MaximumGameServerContainerGroupsPerInstance",
      "PerInstanceContainerGroupDefinitionArn",
      "Status",
    ],
    ContainerGroupDefinition: [
      "ContainerGroupDefinitionArn",
      "ContainerGroupType",
      "CreationTime",
      "Name",
      "Status",
      "StatusReason",
      "VersionNumber",
    ],
    Fleet: [
      "ApplyCapacity",
      "BuildId",
      "CertificateConfiguration",
      "ComputeType",
      "EC2InstanceType",
      "FleetArn",
      "FleetId",
      "FleetType",
      "InstanceRoleARN",
      "InstanceRoleCredentialsProvider",
      "PeerVpcAwsAccountId",
      "PeerVpcId",
      "ScriptId",
    ],
    GameServerGroup: ["AutoScalingGroupArn", "GameServerGroupArn"],
    GameSessionQueue: ["Arn", "Name", "Name"],
    Location: ["LocationArn", "LocationName"],
    MatchmakingConfiguration: ["Arn", "Name", "Name"],
    MatchmakingRuleSet: ["Arn", "CreationTime", "Name", "Name", "RuleSetBody"],
    Script: ["Arn", "CreationTime", "Id", "SizeOnDisk"],
  },
  GlobalAccelerator: {
    Accelerator: [
      "AcceleratorArn",
      "DnsName",
      "DualStackDnsName",
      "Ipv4Addresses",
      "Ipv6Addresses",
    ],
    CrossAccountAttachment: ["AttachmentArn"],
    EndpointGroup: ["EndpointGroupArn", "EndpointGroupRegion", "ListenerArn"],
    Listener: ["AcceleratorArn", "ListenerArn"],
  },
  Glue: {
    Connection: ["CatalogId"],
    Crawler: ["Name"],
    DataCatalogEncryptionSettings: ["CatalogId"],
    Database: ["DatabaseName"],
    DevEndpoint: ["EndpointName"],
    Job: ["Name"],
    MLTransform: ["InputRecordTables"],
    Partition: ["CatalogId", "DatabaseName", "TableName"],
    Registry: ["Arn", "Name"],
    Schema: [
      "Arn",
      "DataFormat",
      "InitialSchemaVersionId",
      "Name",
      "Registry",
      "SchemaDefinition",
    ],
    SchemaVersion: ["Schema", "SchemaDefinition", "VersionId"],
    SchemaVersionMetadata: ["Key", "SchemaVersionId", "Value"],
    SecurityConfiguration: ["Name"],
    Table: ["CatalogId", "DatabaseName"],
    TableOptimizer: ["CatalogId", "DatabaseName", "TableName", "Type"],
    Trigger: ["Name", "Type", "WorkflowName"],
    UsageProfile: ["CreatedOn", "Name"],
    Workflow: ["Name"],
  },
  Grafana: {
    Workspace: [
      "ClientToken",
      "CreationTimestamp",
      "Endpoint",
      "GrafanaVersion",
      "Id",
      "ModificationTimestamp",
      "SamlConfigurationStatus",
      "SsoClientId",
      "Status",
    ],
  },
  Greengrass: {
    ConnectorDefinition: [
      "Arn",
      "Id",
      "InitialVersion",
      "LatestVersionArn",
      "Name",
    ],
    ConnectorDefinitionVersion: ["ConnectorDefinitionId", "Connectors"],
    CoreDefinition: ["Arn", "Id", "InitialVersion", "LatestVersionArn", "Name"],
    CoreDefinitionVersion: ["CoreDefinitionId", "Cores"],
    DeviceDefinition: [
      "Arn",
      "Id",
      "InitialVersion",
      "LatestVersionArn",
      "Name",
    ],
    DeviceDefinitionVersion: ["DeviceDefinitionId", "Devices"],
    FunctionDefinition: [
      "Arn",
      "Id",
      "InitialVersion",
      "LatestVersionArn",
      "Name",
    ],
    FunctionDefinitionVersion: [
      "DefaultConfig",
      "FunctionDefinitionId",
      "Functions",
    ],
    Group: [
      "Arn",
      "Id",
      "InitialVersion",
      "LatestVersionArn",
      "Name",
      "RoleArn",
      "RoleAttachedAt",
    ],
    GroupVersion: [
      "ConnectorDefinitionVersionArn",
      "CoreDefinitionVersionArn",
      "DeviceDefinitionVersionArn",
      "FunctionDefinitionVersionArn",
      "GroupId",
      "LoggerDefinitionVersionArn",
      "ResourceDefinitionVersionArn",
      "SubscriptionDefinitionVersionArn",
    ],
    LoggerDefinition: [
      "Arn",
      "Id",
      "InitialVersion",
      "LatestVersionArn",
      "Name",
    ],
    LoggerDefinitionVersion: ["LoggerDefinitionId", "Loggers"],
    ResourceDefinition: [
      "Arn",
      "Id",
      "InitialVersion",
      "LatestVersionArn",
      "Name",
    ],
    ResourceDefinitionVersion: ["ResourceDefinitionId", "Resources"],
    SubscriptionDefinition: [
      "Arn",
      "Id",
      "InitialVersion",
      "LatestVersionArn",
      "Name",
    ],
    SubscriptionDefinitionVersion: [
      "SubscriptionDefinitionId",
      "Subscriptions",
    ],
  },
  GreengrassV2: {
    ComponentVersion: [
      "Arn",
      "ComponentName",
      "ComponentVersion",
      "InlineRecipe",
      "LambdaFunction",
    ],
    Deployment: [
      "Components",
      "DeploymentId",
      "DeploymentName",
      "DeploymentPolicies",
      "IotJobConfiguration",
      "ParentTargetArn",
      "TargetArn",
    ],
  },
  GroundStation: {
    Config: ["Arn", "Id", "Type"],
    DataflowEndpointGroup: [
      "Arn",
      "ContactPostPassDurationSeconds",
      "ContactPrePassDurationSeconds",
      "EndpointDetails",
      "Id",
    ],
    MissionProfile: ["Arn", "Id", "Region"],
  },
  GuardDuty: {
    Detector: ["Id"],
    Filter: ["DetectorId", "Name"],
    IPSet: ["DetectorId", "Format", "Id"],
    MalwareProtectionPlan: [
      "Arn",
      "CreatedAt",
      "MalwareProtectionPlanId",
      "Status",
      "StatusReasons",
    ],
    Master: ["DetectorId", "InvitationId", "MasterId"],
    Member: ["DetectorId", "MemberId"],
    PublishingDestination: [
      "DetectorId",
      "Id",
      "PublishingFailureStartTimestamp",
      "Status",
    ],
    ThreatIntelSet: ["DetectorId", "Format", "Id"],
  },
  HealthImaging: {
    Datastore: [
      "CreatedAt",
      "DatastoreArn",
      "DatastoreId",
      "DatastoreName",
      "DatastoreStatus",
      "KmsKeyArn",
      "Tags",
      "UpdatedAt",
    ],
  },
  HealthLake: {
    FHIRDatastore: [
      "CreatedAt",
      "CreatedAt.Nanos",
      "CreatedAt.Seconds",
      "DatastoreArn",
      "DatastoreEndpoint",
      "DatastoreId",
      "DatastoreName",
      "DatastoreStatus",
      "DatastoreTypeVersion",
      "IdentityProviderConfiguration",
      "PreloadDataConfig",
      "SseConfiguration",
    ],
  },
  IAM: {
    AccessKey: ["SecretAccessKey", "Serial", "UserName"],
    Group: ["Arn", "GroupName"],
    GroupPolicy: ["GroupName", "PolicyName"],
    InstanceProfile: ["Arn", "InstanceProfileName", "Path"],
    ManagedPolicy: [
      "AttachmentCount",
      "CreateDate",
      "DefaultVersionId",
      "Description",
      "IsAttachable",
      "ManagedPolicyName",
      "Path",
      "PermissionsBoundaryUsageCount",
      "PolicyArn",
      "PolicyId",
      "UpdateDate",
    ],
    OIDCProvider: ["Arn", "Url"],
    Policy: ["Id"],
    Role: ["Arn", "Path", "RoleId", "RoleName"],
    RolePolicy: ["PolicyName", "RoleName"],
    SAMLProvider: [
      "AddPrivateKey",
      "Arn",
      "Name",
      "RemovePrivateKey",
      "SamlProviderUUID",
    ],
    ServerCertificate: [
      "Arn",
      "CertificateBody",
      "CertificateChain",
      "PrivateKey",
      "ServerCertificateName",
    ],
    ServiceLinkedRole: ["AWSServiceName", "CustomSuffix", "RoleName"],
    User: ["Arn", "UserName"],
    UserPolicy: ["PolicyName", "UserName"],
    VirtualMFADevice: ["Path", "SerialNumber", "VirtualMfaDeviceName"],
  },
  IVS: {
    Channel: ["Arn", "IngestEndpoint", "PlaybackUrl"],
    EncoderConfiguration: ["Arn", "Name", "Video"],
    IngestConfiguration: [
      "Arn",
      "IngestProtocol",
      "InsecureIngest",
      "Name",
      "ParticipantId",
      "State",
      "StreamKey",
      "UserId",
    ],
    PlaybackKeyPair: ["Arn", "Fingerprint", "Name", "PublicKeyMaterial"],
    PlaybackRestrictionPolicy: ["Arn"],
    PublicKey: ["Arn", "Fingerprint", "Name", "PublicKeyMaterial"],
    RecordingConfiguration: [
      "Arn",
      "DestinationConfiguration",
      "Name",
      "RecordingReconnectWindowSeconds",
      "RenditionConfiguration",
      "State",
      "ThumbnailConfiguration",
    ],
    Stage: ["ActiveSessionId", "Arn"],
    StorageConfiguration: ["Arn", "Name", "S3"],
    StreamKey: ["Arn", "ChannelArn", "Value"],
  },
  IVSChat: {
    LoggingConfiguration: ["Arn", "Id", "State"],
    Room: ["Arn", "Id"],
  },
  IdentityStore: {
    Group: ["GroupId", "IdentityStoreId"],
    GroupMembership: ["GroupId", "IdentityStoreId", "MemberId", "MembershipId"],
  },
  ImageBuilder: {
    Component: [
      "Arn",
      "ChangeDescription",
      "Data",
      "Description",
      "Encrypted",
      "KmsKeyId",
      "Name",
      "Name",
      "Platform",
      "SupportedOsVersions",
      "Tags",
      "Type",
      "Uri",
      "Version",
    ],
    ContainerRecipe: [
      "Arn",
      "Components",
      "ContainerType",
      "Description",
      "DockerfileTemplateData",
      "DockerfileTemplateUri",
      "ImageOsVersionOverride",
      "InstanceConfiguration",
      "KmsKeyId",
      "Name",
      "Name",
      "ParentImage",
      "PlatformOverride",
      "Tags",
      "TargetRepository",
      "Version",
      "WorkingDirectory",
    ],
    DistributionConfiguration: ["Arn", "Name", "Name"],
    Image: [
      "Arn",
      "ContainerRecipeArn",
      "DistributionConfigurationArn",
      "EnhancedImageMetadataEnabled",
      "ImageId",
      "ImageRecipeArn",
      "ImageScanningConfiguration",
      "ImageTestsConfiguration",
      "ImageUri",
      "InfrastructureConfigurationArn",
      "Name",
      "Tags",
      "Workflows",
    ],
    ImagePipeline: ["Arn", "Name", "Name"],
    ImageRecipe: [
      "Arn",
      "BlockDeviceMappings",
      "Components",
      "Description",
      "Name",
      "Name",
      "ParentImage",
      "Tags",
      "Version",
      "WorkingDirectory",
    ],
    InfrastructureConfiguration: ["Arn", "Name", "Name"],
    LifecyclePolicy: ["Arn", "Name"],
    Workflow: [
      "Arn",
      "ChangeDescription",
      "Data",
      "Description",
      "KmsKeyId",
      "Name",
      "Tags",
      "Type",
      "Uri",
      "Version",
    ],
  },
  Inspector: {
    AssessmentTarget: ["Arn", "AssessmentTargetName"],
    AssessmentTemplate: [
      "Arn",
      "AssessmentTargetArn",
      "AssessmentTemplateName",
      "DurationInSeconds",
      "RulesPackageArns",
      "UserAttributesForFindings",
    ],
    ResourceGroup: ["Arn", "ResourceGroupTags"],
  },
  InspectorV2: {
    CisScanConfiguration: ["Arn"],
    Filter: ["Arn"],
  },
  InternetMonitor: {
    Monitor: [
      "CreatedAt",
      "ModifiedAt",
      "MonitorArn",
      "MonitorName",
      "ProcessingStatus",
      "ProcessingStatusInfo",
    ],
  },
  Invoicing: {
    InvoiceUnit: ["InvoiceReceiver", "InvoiceUnitArn", "LastModified", "Name"],
  },
  IoT: {
    AccountAuditConfiguration: ["AccountId"],
    Authorizer: ["Arn", "AuthorizerName", "SigningDisabled"],
    BillingGroup: ["Arn", "BillingGroupName", "Id"],
    CACertificate: [
      "Arn",
      "CACertificatePem",
      "CertificateMode",
      "Id",
      "VerificationCertificatePem",
    ],
    Certificate: [
      "Arn",
      "CACertificatePem",
      "CertificateMode",
      "CertificatePem",
      "CertificateSigningRequest",
      "Id",
    ],
    CertificateProvider: ["Arn", "CertificateProviderName"],
    Command: ["CommandArn", "CommandId"],
    CustomMetric: ["MetricArn", "MetricName", "MetricType"],
    Dimension: ["Arn", "Name", "Type"],
    DomainConfiguration: [
      "Arn",
      "DomainConfigurationName",
      "DomainName",
      "DomainType",
      "ServerCertificateArns",
      "ServerCertificates",
      "ServiceType",
      "ValidationCertificateArn",
    ],
    FleetMetric: [
      "CreationDate",
      "LastModifiedDate",
      "MetricArn",
      "MetricName",
      "Version",
    ],
    JobTemplate: [
      "AbortConfig",
      "Arn",
      "Description",
      "DestinationPackageVersions",
      "Document",
      "DocumentSource",
      "JobArn",
      "JobExecutionsRetryConfig",
      "JobExecutionsRolloutConfig",
      "JobTemplateId",
      "MaintenanceWindows",
      "PresignedUrlConfig",
      "Tags",
      "TimeoutConfig",
    ],
    Logging: ["AccountId"],
    MitigationAction: [
      "ActionName",
      "MitigationActionArn",
      "MitigationActionId",
    ],
    Policy: ["Arn", "Id", "PolicyName"],
    PolicyPrincipalAttachment: ["PolicyName", "Principal"],
    ProvisioningTemplate: ["TemplateArn", "TemplateName", "TemplateType"],
    ResourceSpecificLogging: ["TargetId", "TargetName", "TargetType"],
    RoleAlias: ["RoleAlias", "RoleAliasArn"],
    ScheduledAudit: ["ScheduledAuditArn", "ScheduledAuditName"],
    SecurityProfile: ["SecurityProfileArn", "SecurityProfileName"],
    SoftwarePackage: ["PackageArn", "PackageName"],
    SoftwarePackageVersion: [
      "ErrorReason",
      "PackageName",
      "PackageVersionArn",
      "SbomValidationStatus",
      "Status",
      "VersionName",
    ],
    Thing: ["Arn", "Id", "ThingName"],
    ThingGroup: ["Arn", "Id", "ParentGroupName", "ThingGroupName"],
    ThingPrincipalAttachment: ["Principal", "ThingName"],
    ThingType: ["Arn", "Id", "ThingTypeName"],
    TopicRule: ["Arn", "RuleName"],
    TopicRuleDestination: [
      "Arn",
      "HttpUrlProperties",
      "StatusReason",
      "VpcProperties",
    ],
  },
  IoTAnalytics: {
    Channel: ["ChannelName", "Id"],
    Dataset: ["DatasetName", "Id"],
    Datastore: ["DatastoreName", "Id"],
    Pipeline: ["Id", "PipelineName"],
  },
  IoTCoreDeviceAdvisor: {
    SuiteDefinition: [
      "SuiteDefinitionArn",
      "SuiteDefinitionId",
      "SuiteDefinitionVersion",
    ],
  },
  IoTEvents: {
    AlarmModel: ["AlarmModelName", "Key"],
    DetectorModel: ["DetectorModelName", "Key"],
    Input: ["InputName"],
  },
  IoTFleetHub: {
    Application: [
      "ApplicationArn",
      "ApplicationCreationDate",
      "ApplicationId",
      "ApplicationLastUpdateDate",
      "ApplicationState",
      "ApplicationUrl",
      "ErrorMessage",
      "SsoClientId",
    ],
  },
  IoTFleetWise: {
    Campaign: [
      "Arn",
      "CollectionScheme",
      "Compression",
      "CreationTime",
      "DataPartitions",
      "DiagnosticsMode",
      "ExpiryTime",
      "LastModificationTime",
      "Name",
      "PostTriggerCollectionDuration",
      "Priority",
      "SignalCatalogArn",
      "SpoolingMode",
      "StartTime",
      "Status",
      "TargetArn",
    ],
    DecoderManifest: [
      "Arn",
      "CreationTime",
      "LastModificationTime",
      "ModelManifestArn",
      "Name",
    ],
    Fleet: [
      "Arn",
      "CreationTime",
      "Id",
      "LastModificationTime",
      "SignalCatalogArn",
    ],
    ModelManifest: ["Arn", "CreationTime", "LastModificationTime", "Name"],
    SignalCatalog: [
      "Arn",
      "CreationTime",
      "LastModificationTime",
      "Name",
      "NodeCounts.TotalActuators",
      "NodeCounts.TotalAttributes",
      "NodeCounts.TotalBranches",
      "NodeCounts.TotalNodes",
      "NodeCounts.TotalSensors",
    ],
    StateTemplate: [
      "Arn",
      "CreationTime",
      "Id",
      "LastModificationTime",
      "Name",
      "SignalCatalogArn",
    ],
    Vehicle: ["Arn", "CreationTime", "LastModificationTime", "Name"],
  },
  IoTSiteWise: {
    AccessPolicy: ["AccessPolicyArn", "AccessPolicyId"],
    Asset: ["AssetArn", "AssetId"],
    AssetModel: ["AssetModelArn", "AssetModelId", "AssetModelType"],
    Dashboard: ["DashboardArn", "DashboardId", "ProjectId"],
    Dataset: ["DatasetArn", "DatasetId"],
    Gateway: ["GatewayId", "GatewayPlatform", "GatewayVersion"],
    Portal: [
      "PortalArn",
      "PortalAuthMode",
      "PortalClientId",
      "PortalId",
      "PortalStartUrl",
      "PortalType",
    ],
    Project: ["PortalId", "ProjectArn", "ProjectId"],
  },
  IoTTwinMaker: {
    ComponentType: [
      "Arn",
      "ComponentTypeId",
      "CreationDateTime",
      "IsAbstract",
      "IsSchemaInitialized",
      "Status",
      "Status.Error",
      "Status.Error.Code",
      "Status.Error.Message",
      "Status.State",
      "UpdateDateTime",
      "WorkspaceId",
    ],
    Entity: [
      "Arn",
      "CreationDateTime",
      "EntityId",
      "HasChildEntities",
      "Status",
      "Status.Error",
      "Status.State",
      "UpdateDateTime",
      "WorkspaceId",
    ],
    Scene: [
      "Arn",
      "CreationDateTime",
      "GeneratedSceneMetadata",
      "SceneId",
      "UpdateDateTime",
      "WorkspaceId",
    ],
    SyncJob: [
      "Arn",
      "CreationDateTime",
      "State",
      "SyncRole",
      "SyncSource",
      "Tags",
      "UpdateDateTime",
      "WorkspaceId",
    ],
    Workspace: ["Arn", "CreationDateTime", "UpdateDateTime", "WorkspaceId"],
  },
  IoTWireless: {
    Destination: ["Arn", "Name"],
    DeviceProfile: ["Arn", "Id", "LoRaWAN", "Name"],
    FuotaTask: ["Arn", "FuotaTaskStatus", "Id", "LoRaWAN.StartTime"],
    MulticastGroup: [
      "Arn",
      "Id",
      "LoRaWAN.NumberOfDevicesInGroup",
      "LoRaWAN.NumberOfDevicesRequested",
      "Status",
    ],
    NetworkAnalyzerConfiguration: ["Arn", "Name"],
    PartnerAccount: ["Arn", "Fingerprint", "PartnerAccountId"],
    ServiceProfile: [
      "Arn",
      "Id",
      "LoRaWAN",
      "LoRaWAN.ChannelMask",
      "LoRaWAN.DevStatusReqFreq",
      "LoRaWAN.DlBucketSize",
      "LoRaWAN.DlRate",
      "LoRaWAN.DlRatePolicy",
      "LoRaWAN.DrMax",
      "LoRaWAN.DrMin",
      "LoRaWAN.HrAllowed",
      "LoRaWAN.MinGwDiversity",
      "LoRaWAN.NwkGeoLoc",
      "LoRaWAN.ReportDevStatusBattery",
      "LoRaWAN.ReportDevStatusMargin",
      "LoRaWAN.TargetPer",
      "LoRaWAN.UlBucketSize",
      "LoRaWAN.UlRate",
      "LoRaWAN.UlRatePolicy",
      "Name",
    ],
    TaskDefinition: ["Arn", "Id"],
    WirelessDevice: ["Arn", "Id", "ThingName"],
    WirelessDeviceImportTask: [
      "Arn",
      "CreationDate",
      "FailedImportedDevicesCount",
      "Id",
      "InitializedImportedDevicesCount",
      "OnboardedImportedDevicesCount",
      "PendingImportedDevicesCount",
      "Sidewalk.DeviceCreationFileList",
      "Status",
      "StatusReason",
    ],
    WirelessGateway: ["Arn", "Id"],
  },
  KMS: {
    Alias: ["AliasName"],
    Key: ["Arn", "KeyId"],
    ReplicaKey: ["Arn", "KeyId", "PrimaryKeyArn"],
  },
  KafkaConnect: {
    Connector: [
      "ConnectorArn",
      "ConnectorDescription",
      "ConnectorName",
      "KafkaCluster",
      "KafkaClusterClientAuthentication",
      "KafkaClusterEncryptionInTransit",
      "KafkaConnectVersion",
      "LogDelivery",
      "Plugins",
      "ServiceExecutionRoleArn",
      "WorkerConfiguration",
    ],
    CustomPlugin: [
      "ContentType",
      "CustomPluginArn",
      "Description",
      "FileDescription",
      "FileDescription.FileMd5",
      "FileDescription.FileSize",
      "Location",
      "Name",
      "Revision",
    ],
    WorkerConfiguration: [
      "Description",
      "Name",
      "PropertiesFileContent",
      "Revision",
      "WorkerConfigurationArn",
    ],
  },
  Kendra: {
    DataSource: ["Arn", "Id", "IndexId", "Type"],
    Faq: [
      "Arn",
      "Description",
      "FileFormat",
      "Id",
      "IndexId",
      "Name",
      "RoleArn",
      "S3Path",
    ],
    Index: ["Arn", "Edition", "Id", "ServerSideEncryptionConfiguration"],
  },
  KendraRanking: {
    ExecutionPlan: ["Arn", "Id"],
  },
  Kinesis: {
    ResourcePolicy: ["ResourceArn"],
    Stream: ["Arn", "Name"],
    StreamConsumer: [
      "ConsumerARN",
      "ConsumerCreationTimestamp",
      "ConsumerName",
      "ConsumerName",
      "ConsumerStatus",
      "StreamARN",
      "StreamARN",
    ],
  },
  KinesisAnalytics: {
    Application: ["ApplicationName"],
    ApplicationOutput: ["ApplicationName"],
    ApplicationReferenceDataSource: ["ApplicationName"],
  },
  KinesisAnalyticsV2: {
    Application: ["ApplicationMode", "ApplicationName"],
    ApplicationCloudWatchLoggingOption: ["ApplicationName"],
    ApplicationOutput: ["ApplicationName"],
    ApplicationReferenceDataSource: ["ApplicationName"],
  },
  KinesisFirehose: {
    DeliveryStream: [
      "Arn",
      "DatabaseSourceConfiguration",
      "DeliveryStreamName",
      "DeliveryStreamType",
      "DirectPutSourceConfiguration",
      "KinesisStreamSourceConfiguration",
      "MSKSourceConfiguration",
    ],
  },
  KinesisVideo: {
    SignalingChannel: ["Arn", "Name"],
    Stream: ["Arn", "Name"],
  },
  LakeFormation: {
    DataCellsFilter: [
      "ColumnNames",
      "ColumnWildcard",
      "DatabaseName",
      "Name",
      "RowFilter",
      "TableCatalogId",
      "TableName",
    ],
    Permissions: ["DataLakePrincipal", "Resource"],
    PrincipalPermissions: [
      "Catalog",
      "Permissions",
      "PermissionsWithGrantOption",
      "Principal",
      "PrincipalIdentifier",
      "Resource",
      "ResourceIdentifier",
    ],
    Resource: ["ResourceArn"],
    Tag: ["CatalogId", "TagKey"],
    TagAssociation: [
      "LFTags",
      "Resource",
      "ResourceIdentifier",
      "TagsIdentifier",
    ],
  },
  Lambda: {
    Alias: ["AliasArn", "FunctionName", "Name"],
    CodeSigningConfig: ["CodeSigningConfigArn", "CodeSigningConfigId"],
    EventInvokeConfig: ["FunctionName", "Qualifier"],
    EventSourceMapping: [
      "AmazonManagedKafkaEventSourceConfig",
      "EventSourceArn",
      "EventSourceMappingArn",
      "Id",
      "SelfManagedEventSource",
      "SelfManagedKafkaEventSourceConfig",
      "StartingPosition",
      "StartingPositionTimestamp",
    ],
    Function: [
      "Arn",
      "FunctionName",
      "PackageType",
      "SnapStartResponse",
      "SnapStartResponse.ApplyOn",
      "SnapStartResponse.OptimizationStatus",
    ],
    LayerVersion: [
      "CompatibleArchitectures",
      "CompatibleRuntimes",
      "Content",
      "Description",
      "LayerName",
      "LayerVersionArn",
      "LicenseInfo",
    ],
    LayerVersionPermission: [
      "Action",
      "Id",
      "LayerVersionArn",
      "OrganizationId",
      "Principal",
    ],
    Permission: [
      "Action",
      "EventSourceToken",
      "FunctionName",
      "FunctionUrlAuthType",
      "Id",
      "Principal",
      "PrincipalOrgID",
      "SourceAccount",
      "SourceArn",
    ],
    Url: ["FunctionArn", "FunctionUrl", "Qualifier", "TargetFunctionArn"],
    Version: [
      "CodeSha256",
      "Description",
      "FunctionArn",
      "FunctionName",
      "ProvisionedConcurrencyConfig",
      "RuntimePolicy",
      "Version",
    ],
  },
  LaunchWizard: {
    Deployment: [
      "Arn",
      "CreatedAt",
      "DeletedAt",
      "DeploymentId",
      "DeploymentPatternName",
      "Name",
      "ResourceGroup",
      "Status",
      "WorkloadName",
    ],
  },
  Lex: {
    Bot: ["Arn", "Id"],
    BotAlias: ["Arn", "BotAliasId", "BotAliasStatus", "BotId"],
    BotVersion: ["BotId", "BotVersion"],
    ResourcePolicy: ["Id", "RevisionId"],
  },
  LicenseManager: {
    Grant: ["GrantArn", "Version"],
    License: ["LicenseArn", "Version"],
  },
  Lightsail: {
    Alarm: [
      "AlarmArn",
      "AlarmName",
      "MetricName",
      "MonitoredResourceName",
      "State",
    ],
    Bucket: ["AbleToUpdateBundle", "BucketArn", "BucketName", "Url"],
    Certificate: [
      "CertificateArn",
      "CertificateName",
      "DomainName",
      "Status",
      "SubjectAlternativeNames",
    ],
    Container: [
      "ContainerArn",
      "PrincipalArn",
      "PrivateRegistryAccess.EcrImagePullerRole.PrincipalArn",
      "ServiceName",
      "Url",
    ],
    Database: [
      "AvailabilityZone",
      "DatabaseArn",
      "MasterDatabaseName",
      "MasterUsername",
      "RelationalDatabaseBlueprintId",
      "RelationalDatabaseBundleId",
      "RelationalDatabaseName",
    ],
    Disk: [
      "AttachedTo",
      "AttachmentState",
      "AvailabilityZone",
      "DiskArn",
      "DiskName",
      "Iops",
      "IsAttached",
      "Location.AvailabilityZone",
      "Location.RegionName",
      "Path",
      "ResourceType",
      "SizeInGb",
      "State",
      "SupportCode",
    ],
    Distribution: [
      "AbleToUpdateBundle",
      "DistributionArn",
      "DistributionName",
      "IpAddressType",
      "Status",
    ],
    Instance: [
      "AvailabilityZone",
      "BlueprintId",
      "BundleId",
      "Hardware.CpuCount",
      "Hardware.RamSizeInGb",
      "InstanceArn",
      "InstanceName",
      "Ipv6Addresses",
      "IsStaticIp",
      "Location.AvailabilityZone",
      "Location.RegionName",
      "Networking.MonthlyTransfer.GbPerMonthAllocated",
      "PrivateIpAddress",
      "PublicIpAddress",
      "ResourceType",
      "SshKeyName",
      "State.Code",
      "State.Name",
      "SupportCode",
      "UserName",
    ],
    LoadBalancer: [
      "InstancePort",
      "IpAddressType",
      "LoadBalancerArn",
      "LoadBalancerName",
    ],
    LoadBalancerTlsCertificate: [
      "CertificateAlternativeNames",
      "CertificateDomainName",
      "CertificateName",
      "LoadBalancerName",
      "LoadBalancerTlsCertificateArn",
      "Status",
    ],
    StaticIp: ["IpAddress", "IsAttached", "StaticIpArn", "StaticIpName"],
  },
  Location: {
    APIKey: ["Arn", "CreateTime", "KeyArn", "KeyName", "UpdateTime"],
    GeofenceCollection: [
      "Arn",
      "CollectionArn",
      "CollectionName",
      "CreateTime",
      "KmsKeyId",
      "UpdateTime",
    ],
    Map: [
      "Arn",
      "Configuration",
      "CreateTime",
      "MapArn",
      "MapName",
      "UpdateTime",
    ],
    PlaceIndex: [
      "Arn",
      "CreateTime",
      "DataSource",
      "IndexArn",
      "IndexName",
      "UpdateTime",
    ],
    RouteCalculator: [
      "Arn",
      "CalculatorArn",
      "CalculatorName",
      "CreateTime",
      "DataSource",
      "UpdateTime",
    ],
    Tracker: [
      "Arn",
      "CreateTime",
      "KmsKeyId",
      "TrackerArn",
      "TrackerName",
      "UpdateTime",
    ],
    TrackerConsumer: ["ConsumerArn", "TrackerName"],
  },
  Logs: {
    AccountPolicy: ["AccountId", "PolicyName", "PolicyType"],
    Delivery: [
      "Arn",
      "DeliveryDestinationArn",
      "DeliveryDestinationType",
      "DeliveryId",
      "DeliverySourceName",
    ],
    DeliveryDestination: [
      "Arn",
      "DeliveryDestinationType",
      "DestinationResourceArn",
      "Name",
      "OutputFormat",
    ],
    DeliverySource: ["Arn", "Name", "ResourceArns", "Service"],
    Destination: ["Arn", "DestinationName"],
    Integration: [
      "IntegrationName",
      "IntegrationStatus",
      "IntegrationType",
      "ResourceConfig",
    ],
    LogAnomalyDetector: [
      "AnomalyDetectorArn",
      "AnomalyDetectorStatus",
      "CreationTimeStamp",
      "LastModifiedTimeStamp",
    ],
    LogGroup: ["Arn", "LogGroupName"],
    LogStream: ["LogGroupName", "LogStreamName"],
    MetricFilter: ["FilterName", "LogGroupName"],
    QueryDefinition: ["QueryDefinitionId"],
    ResourcePolicy: ["PolicyName"],
    SubscriptionFilter: ["FilterName", "LogGroupName"],
    Transformer: ["LogGroupIdentifier"],
  },
  LookoutEquipment: {
    InferenceScheduler: [
      "InferenceSchedulerArn",
      "InferenceSchedulerName",
      "ModelName",
      "ServerSideKmsKeyId",
    ],
  },
  LookoutMetrics: {
    Alert: [
      "Action",
      "AlertDescription",
      "AlertName",
      "AlertSensitivityThreshold",
      "AnomalyDetectorArn",
      "Arn",
    ],
    AnomalyDetector: ["AnomalyDetectorName", "Arn"],
  },
  LookoutVision: {
    Project: ["Arn", "ProjectName"],
  },
  M2: {
    Application: [
      "ApplicationArn",
      "ApplicationId",
      "EngineType",
      "KmsKeyId",
      "Name",
      "RoleArn",
    ],
    Deployment: ["ApplicationId", "DeploymentId", "EnvironmentId", "Status"],
    Environment: [
      "Description",
      "EngineType",
      "EnvironmentArn",
      "EnvironmentId",
      "KmsKeyId",
      "Name",
      "NetworkType",
      "PubliclyAccessible",
      "SecurityGroupIds",
      "StorageConfigurations",
      "SubnetIds",
    ],
  },
  MSK: {
    BatchScramSecret: ["ClusterArn"],
    Cluster: ["Arn", "ClusterName"],
    ClusterPolicy: ["ClusterArn", "CurrentVersion"],
    Configuration: [
      "Arn",
      "KafkaVersionsList",
      "LatestRevision.CreationTime",
      "LatestRevision.Description",
      "LatestRevision.Revision",
      "Name",
    ],
    Replicator: [
      "CurrentVersion",
      "Description",
      "KafkaClusters",
      "ReplicatorArn",
      "ReplicatorName",
      "ServiceExecutionRoleArn",
    ],
    ServerlessCluster: [
      "Arn",
      "ClientAuthentication",
      "ClusterName",
      "Tags",
      "VpcConfigs",
    ],
    VpcConnection: [
      "Arn",
      "Authentication",
      "ClientSubnets",
      "SecurityGroups",
      "TargetClusterArn",
      "VpcId",
    ],
  },
  MWAA: {
    Environment: [
      "Arn",
      "CeleryExecutorQueue",
      "DatabaseVpcEndpointService",
      "EndpointManagement",
      "KmsKey",
      "LoggingConfiguration.DagProcessingLogs.CloudWatchLogGroupArn",
      "LoggingConfiguration.SchedulerLogs.CloudWatchLogGroupArn",
      "LoggingConfiguration.TaskLogs.CloudWatchLogGroupArn",
      "LoggingConfiguration.WebserverLogs.CloudWatchLogGroupArn",
      "LoggingConfiguration.WorkerLogs.CloudWatchLogGroupArn",
      "Name",
      "WebserverUrl",
      "WebserverVpcEndpointService",
    ],
  },
  Macie: {
    AllowList: ["Arn", "Id", "Status"],
    CustomDataIdentifier: [
      "Arn",
      "Description",
      "Id",
      "IgnoreWords",
      "Keywords",
      "MaximumMatchDistance",
      "Name",
      "Regex",
    ],
    FindingsFilter: ["Arn", "Id"],
    Session: ["AutomatedDiscoveryStatus", "AwsAccountId", "ServiceRole"],
  },
  ManagedBlockchain: {
    Accessor: [
      "AccessorType",
      "Arn",
      "BillingToken",
      "CreationDate",
      "Id",
      "NetworkType",
      "Status",
    ],
    Member: ["MemberId", "NetworkId"],
    Node: ["Arn", "MemberId", "NetworkId", "NodeId"],
  },
  MediaConnect: {
    Bridge: ["BridgeArn", "BridgeState"],
    BridgeOutput: ["BridgeArn", "Name"],
    BridgeSource: ["BridgeArn", "Name"],
    Flow: [
      "AvailabilityZone",
      "EgressIp",
      "FlowArn",
      "FlowAvailabilityZone",
      "FlowNdiMachineName",
      "Name",
      "Source.IngestIp",
      "Source.SourceArn",
      "Source.SourceIngestPort",
    ],
    FlowEntitlement: [
      "DataTransferSubscriberFeePercent",
      "EntitlementArn",
      "Name",
    ],
    FlowOutput: ["Name", "OutputArn"],
    FlowSource: ["IngestIp", "Name", "SourceArn", "SourceIngestPort"],
    FlowVpcInterface: ["FlowArn", "Name", "NetworkInterfaceIds"],
    Gateway: [
      "EgressCidrBlocks",
      "GatewayArn",
      "GatewayState",
      "Name",
      "Networks",
    ],
  },
  MediaConvert: {
    JobTemplate: ["Arn", "Name", "Name"],
    Preset: ["Arn", "Name", "Name"],
    Queue: ["Arn", "Name", "Name"],
  },
  MediaLive: {
    Channel: ["Arn", "Inputs", "Vpc"],
    ChannelPlacementGroup: ["Arn", "Channels", "ClusterId", "Id", "State"],
    CloudWatchAlarmTemplate: [
      "Arn",
      "CreatedAt",
      "GroupId",
      "Id",
      "Identifier",
      "ModifiedAt",
      "Tags",
    ],
    CloudWatchAlarmTemplateGroup: [
      "Arn",
      "CreatedAt",
      "Id",
      "Identifier",
      "ModifiedAt",
      "Name",
      "Tags",
    ],
    Cluster: [
      "Arn",
      "ChannelIds",
      "ClusterType",
      "Id",
      "InstanceRoleArn",
      "State",
    ],
    EventBridgeRuleTemplate: [
      "Arn",
      "CreatedAt",
      "GroupId",
      "Id",
      "Identifier",
      "ModifiedAt",
      "Tags",
    ],
    EventBridgeRuleTemplateGroup: [
      "Arn",
      "CreatedAt",
      "Id",
      "Identifier",
      "ModifiedAt",
      "Name",
      "Tags",
    ],
    Input: [
      "Arn",
      "Destinations",
      "InputNetworkLocation",
      "Sources",
      "Type",
      "Vpc",
    ],
    InputSecurityGroup: ["Arn", "Tags"],
    Multiplex: [
      "Arn",
      "AvailabilityZones",
      "Id",
      "PipelinesRunningCount",
      "ProgramCount",
      "State",
    ],
    Multiplexprogram: ["ChannelId", "MultiplexId", "ProgramName"],
    Network: ["Arn", "AssociatedClusterIds", "Id", "State"],
    SdiSource: ["Arn", "Id", "Inputs", "State"],
    SignalMap: [
      "Arn",
      "CloudWatchAlarmTemplateGroupIds",
      "CreatedAt",
      "ErrorMessage",
      "EventBridgeRuleTemplateGroupIds",
      "FailedMediaResourceMap",
      "Id",
      "Identifier",
      "LastDiscoveredAt",
      "LastSuccessfulMonitorDeployment",
      "LastSuccessfulMonitorDeployment.DetailsUri",
      "LastSuccessfulMonitorDeployment.Status",
      "MediaResourceMap",
      "ModifiedAt",
      "MonitorChangesPendingDeployment",
      "MonitorDeployment",
      "MonitorDeployment.DetailsUri",
      "MonitorDeployment.ErrorMessage",
      "MonitorDeployment.Status",
      "Status",
      "Tags",
    ],
  },
  MediaPackage: {
    Asset: ["Arn", "CreatedAt"],
    Channel: ["Arn", "Id", "Tags"],
    OriginEndpoint: ["Arn", "Id", "Url"],
    PackagingConfiguration: ["Arn", "Id"],
    PackagingGroup: ["Arn", "DomainName", "Id", "Tags"],
  },
  MediaPackageV2: {
    Channel: [
      "Arn",
      "ChannelGroupName",
      "ChannelName",
      "CreatedAt",
      "IngestEndpointUrls",
      "IngestEndpoints",
      "InputType",
      "ModifiedAt",
    ],
    ChannelGroup: [
      "Arn",
      "ChannelGroupName",
      "CreatedAt",
      "EgressDomain",
      "ModifiedAt",
    ],
    ChannelPolicy: ["ChannelGroupName", "ChannelName"],
    OriginEndpoint: [
      "Arn",
      "ChannelGroupName",
      "ChannelName",
      "CreatedAt",
      "DashManifestUrls",
      "HlsManifestUrls",
      "LowLatencyHlsManifestUrls",
      "ModifiedAt",
      "OriginEndpointName",
    ],
    OriginEndpointPolicy: [
      "ChannelGroupName",
      "ChannelName",
      "OriginEndpointName",
    ],
  },
  MediaStore: {
    Container: ["ContainerName", "Endpoint"],
  },
  MediaTailor: {
    Channel: ["Arn", "ChannelName", "Tier"],
    ChannelPolicy: ["ChannelName"],
    LiveSource: ["Arn", "LiveSourceName", "SourceLocationName"],
    PlaybackConfiguration: [
      "DashConfiguration.ManifestEndpointPrefix",
      "HlsConfiguration.ManifestEndpointPrefix",
      "Name",
      "PlaybackConfigurationArn",
      "PlaybackEndpointPrefix",
      "SessionInitializationEndpointPrefix",
    ],
    SourceLocation: ["Arn", "SourceLocationName"],
    VodSource: ["Arn", "SourceLocationName", "VodSourceName"],
  },
  MemoryDB: {
    ACL: ["ACLName", "Arn", "Status"],
    Cluster: [
      "ARN",
      "ClusterEndpoint.Address",
      "ClusterEndpoint.Port",
      "ClusterName",
      "DataTiering",
      "KmsKeyId",
      "MultiRegionClusterName",
      "NetworkType",
      "ParameterGroupStatus",
      "Port",
      "SnapshotArns",
      "SnapshotName",
      "Status",
      "SubnetGroupName",
      "TLSEnabled",
    ],
    MultiRegionCluster: [
      "ARN",
      "EngineVersion",
      "MultiRegionClusterName",
      "MultiRegionClusterNameSuffix",
      "MultiRegionParameterGroupName",
      "Status",
      "TLSEnabled",
    ],
    ParameterGroup: ["ARN", "Description", "Family", "ParameterGroupName"],
    SubnetGroup: ["ARN", "SubnetGroupName", "SupportedNetworkTypes"],
    User: ["Arn", "Status", "UserName"],
  },
  Neptune: {
    DBCluster: [
      "AvailabilityZones",
      "ClusterResourceId",
      "DBClusterIdentifier",
      "DBSubnetGroupName",
      "Endpoint",
      "KmsKeyId",
      "Port",
      "ReadEndpoint",
      "RestoreToTime",
      "RestoreType",
      "SnapshotIdentifier",
      "SourceDBClusterIdentifier",
      "StorageEncrypted",
      "UseLatestRestorableTime",
    ],
    DBClusterParameterGroup: ["Description", "Family", "Name"],
    DBInstance: [
      "AvailabilityZone",
      "DBClusterIdentifier",
      "DBInstanceIdentifier",
      "DBSnapshotIdentifier",
      "DBSubnetGroupName",
      "Endpoint",
      "Port",
    ],
    DBParameterGroup: ["Description", "Family", "Name"],
    DBSubnetGroup: ["DBSubnetGroupName"],
    EventSubscription: ["SnsTopicArn"],
  },
  NeptuneGraph: {
    Graph: [
      "Endpoint",
      "GraphArn",
      "GraphId",
      "GraphName",
      "ReplicaCount",
      "VectorSearchConfiguration",
    ],
    PrivateGraphEndpoint: [
      "GraphIdentifier",
      "PrivateGraphEndpointIdentifier",
      "SecurityGroupIds",
      "SubnetIds",
      "VpcEndpointId",
      "VpcId",
    ],
  },
  NetworkFirewall: {
    Firewall: [
      "EndpointIds",
      "FirewallArn",
      "FirewallId",
      "FirewallName",
      "VpcId",
    ],
    FirewallPolicy: [
      "FirewallPolicyArn",
      "FirewallPolicyId",
      "FirewallPolicyName",
    ],
    LoggingConfiguration: ["FirewallArn", "FirewallName"],
    RuleGroup: [
      "Capacity",
      "RuleGroupArn",
      "RuleGroupId",
      "RuleGroupName",
      "Type",
    ],
    TLSInspectionConfiguration: [
      "TLSInspectionConfigurationArn",
      "TLSInspectionConfigurationId",
      "TLSInspectionConfigurationName",
    ],
  },
  NetworkManager: {
    ConnectAttachment: [
      "AttachmentId",
      "AttachmentPolicyRuleNumber",
      "AttachmentType",
      "CoreNetworkArn",
      "CoreNetworkId",
      "CreatedAt",
      "EdgeLocation",
      "Options",
      "OwnerAccountId",
      "ResourceArn",
      "SegmentName",
      "State",
      "TransportAttachmentId",
      "UpdatedAt",
    ],
    ConnectPeer: [
      "BgpOptions",
      "Configuration",
      "Configuration.BgpConfigurations",
      "Configuration.CoreNetworkAddress",
      "Configuration.InsideCidrBlocks",
      "Configuration.PeerAddress",
      "Configuration.Protocol",
      "ConnectAttachmentId",
      "ConnectPeerId",
      "CoreNetworkAddress",
      "CoreNetworkId",
      "CreatedAt",
      "EdgeLocation",
      "InsideCidrBlocks",
      "PeerAddress",
      "State",
      "SubnetArn",
    ],
    CoreNetwork: [
      "CoreNetworkArn",
      "CoreNetworkId",
      "CreatedAt",
      "Edges",
      "GlobalNetworkId",
      "NetworkFunctionGroups",
      "OwnerAccount",
      "Segments",
      "State",
    ],
    CustomerGatewayAssociation: [
      "CustomerGatewayArn",
      "DeviceId",
      "GlobalNetworkId",
      "LinkId",
    ],
    Device: ["CreatedAt", "DeviceArn", "DeviceId", "GlobalNetworkId", "State"],
    DirectConnectGatewayAttachment: [
      "AttachmentId",
      "AttachmentPolicyRuleNumber",
      "AttachmentType",
      "CoreNetworkArn",
      "CoreNetworkId",
      "CreatedAt",
      "DirectConnectGatewayArn",
      "NetworkFunctionGroupName",
      "OwnerAccountId",
      "ResourceArn",
      "SegmentName",
      "State",
      "UpdatedAt",
    ],
    GlobalNetwork: ["Arn", "Id"],
    Link: [
      "CreatedAt",
      "GlobalNetworkId",
      "LinkArn",
      "LinkId",
      "SiteId",
      "State",
    ],
    LinkAssociation: ["DeviceId", "GlobalNetworkId", "LinkId"],
    Site: ["CreatedAt", "GlobalNetworkId", "SiteArn", "SiteId", "State"],
    SiteToSiteVpnAttachment: [
      "AttachmentId",
      "AttachmentPolicyRuleNumber",
      "AttachmentType",
      "CoreNetworkArn",
      "CoreNetworkId",
      "CreatedAt",
      "EdgeLocation",
      "OwnerAccountId",
      "ResourceArn",
      "SegmentName",
      "State",
      "UpdatedAt",
      "VpnConnectionArn",
    ],
    TransitGatewayPeering: [
      "CoreNetworkArn",
      "CoreNetworkId",
      "CreatedAt",
      "EdgeLocation",
      "OwnerAccountId",
      "PeeringId",
      "PeeringType",
      "ResourceArn",
      "State",
      "TransitGatewayArn",
      "TransitGatewayPeeringAttachmentId",
    ],
    TransitGatewayRegistration: ["GlobalNetworkId", "TransitGatewayArn"],
    TransitGatewayRouteTableAttachment: [
      "AttachmentId",
      "AttachmentPolicyRuleNumber",
      "AttachmentType",
      "CoreNetworkArn",
      "CoreNetworkId",
      "CreatedAt",
      "EdgeLocation",
      "OwnerAccountId",
      "PeeringId",
      "ResourceArn",
      "SegmentName",
      "State",
      "TransitGatewayRouteTableArn",
      "UpdatedAt",
    ],
    VpcAttachment: [
      "AttachmentId",
      "AttachmentPolicyRuleNumber",
      "AttachmentType",
      "CoreNetworkArn",
      "CoreNetworkId",
      "CreatedAt",
      "EdgeLocation",
      "NetworkFunctionGroupName",
      "OwnerAccountId",
      "ResourceArn",
      "SegmentName",
      "State",
      "UpdatedAt",
      "VpcArn",
    ],
  },
  Notifications: {
    ChannelAssociation: ["Arn", "NotificationConfigurationArn"],
    EventRule: [
      "Arn",
      "CreationTime",
      "EventType",
      "ManagedRules",
      "NotificationConfigurationArn",
      "Source",
      "StatusSummaryByRegion",
    ],
    ManagedNotificationAccountContactAssociation: [
      "ContactIdentifier",
      "ManagedNotificationConfigurationArn",
    ],
    ManagedNotificationAdditionalChannelAssociation: [
      "ChannelArn",
      "ManagedNotificationConfigurationArn",
    ],
    NotificationConfiguration: ["Arn", "CreationTime", "Status", "Tags"],
    NotificationHub: [
      "CreationTime",
      "NotificationHubStatusSummary",
      "NotificationHubStatusSummary.NotificationHubStatus",
      "NotificationHubStatusSummary.NotificationHubStatusReason",
      "Region",
    ],
  },
  NotificationsContacts: {
    EmailContact: [
      "Arn",
      "EmailAddress",
      "EmailContact",
      "EmailContact.Address",
      "EmailContact.Arn",
      "EmailContact.CreationTime",
      "EmailContact.Name",
      "EmailContact.Status",
      "EmailContact.UpdateTime",
      "Name",
      "Tags",
    ],
  },
  OSIS: {
    Pipeline: [
      "IngestEndpointUrls",
      "PipelineArn",
      "PipelineName",
      "VpcEndpointService",
      "VpcEndpoints",
    ],
  },
  Oam: {
    Link: ["Arn", "Label", "LabelTemplate", "SinkIdentifier"],
    Sink: ["Arn", "Name"],
  },
  Omics: {
    AnnotationStore: [
      "CreationTime",
      "Id",
      "Name",
      "Reference",
      "SseConfig",
      "Status",
      "StatusMessage",
      "StoreArn",
      "StoreFormat",
      "StoreOptions",
      "StoreSizeBytes",
      "Tags",
      "UpdateTime",
    ],
    ReferenceStore: [
      "Arn",
      "CreationTime",
      "Description",
      "Name",
      "ReferenceStoreId",
      "SseConfig",
      "Tags",
    ],
    RunGroup: ["Arn", "CreationTime", "Id"],
    SequenceStore: [
      "Arn",
      "CreationTime",
      "ETagAlgorithmFamily",
      "S3AccessPointArn",
      "S3Uri",
      "SequenceStoreId",
      "SseConfig",
      "Status",
      "StatusMessage",
      "UpdateTime",
    ],
    VariantStore: [
      "CreationTime",
      "Id",
      "Name",
      "Reference",
      "SseConfig",
      "Status",
      "StatusMessage",
      "StoreArn",
      "StoreSizeBytes",
      "Tags",
      "UpdateTime",
    ],
    Workflow: [
      "Accelerators",
      "Arn",
      "CreationTime",
      "DefinitionUri",
      "Engine",
      "Id",
      "Main",
      "ParameterTemplate",
      "Status",
      "StorageCapacity",
      "Type",
      "Uuid",
    ],
    WorkflowVersion: [
      "Accelerators",
      "Arn",
      "CreationTime",
      "DefinitionUri",
      "Engine",
      "Main",
      "ParameterTemplate",
      "Status",
      "Type",
      "Uuid",
      "VersionName",
      "WorkflowBucketOwnerId",
      "WorkflowId",
    ],
  },
  OpenSearchServerless: {
    AccessPolicy: ["Name", "Type"],
    Collection: [
      "Arn",
      "CollectionEndpoint",
      "DashboardEndpoint",
      "Id",
      "Name",
      "Tags",
      "Type",
    ],
    Index: ["CollectionEndpoint", "IndexName", "Uuid"],
    LifecyclePolicy: ["Name", "Type"],
    SecurityConfig: [
      "IamIdentityCenterOptions.ApplicationArn",
      "IamIdentityCenterOptions.ApplicationDescription",
      "IamIdentityCenterOptions.ApplicationName",
      "Id",
      "Name",
      "Type",
    ],
    SecurityPolicy: ["Name", "Type"],
    VpcEndpoint: ["Id", "Name", "VpcId"],
  },
  OpenSearchService: {
    Application: ["Arn", "Id", "Name"],
    Domain: [
      "AdvancedSecurityOptions.AnonymousAuthDisableDate",
      "Arn",
      "DomainArn",
      "DomainEndpoint",
      "DomainEndpointV2",
      "DomainEndpoints",
      "DomainName",
      "Id",
      "IdentityCenterOptions.IdentityCenterApplicationARN",
      "IdentityCenterOptions.IdentityStoreId",
      "ServiceSoftwareOptions",
      "ServiceSoftwareOptions.AutomatedUpdateDate",
      "ServiceSoftwareOptions.Cancellable",
      "ServiceSoftwareOptions.CurrentVersion",
      "ServiceSoftwareOptions.Description",
      "ServiceSoftwareOptions.NewVersion",
      "ServiceSoftwareOptions.OptionalDeployment",
      "ServiceSoftwareOptions.UpdateAvailable",
      "ServiceSoftwareOptions.UpdateStatus",
    ],
  },
  OpsWorks: {
    App: ["Shortname", "StackId"],
    Instance: [
      "AutoScalingType",
      "AvailabilityZone",
      "AvailabilityZone",
      "BlockDeviceMappings",
      "EbsOptimized",
      "PrivateDnsName",
      "PrivateIp",
      "PublicDnsName",
      "PublicIp",
      "RootDeviceType",
      "StackId",
      "SubnetId",
      "Tenancy",
      "TimeBasedAutoScaling",
      "VirtualizationType",
    ],
    Layer: ["StackId", "Type"],
    Stack: [
      "CloneAppIds",
      "ClonePermissions",
      "ServiceRoleArn",
      "SourceStackId",
      "VpcId",
    ],
    UserProfile: ["IamUserArn", "SshUsername"],
    Volume: ["Ec2VolumeId", "StackId"],
  },
  OpsWorksCM: {
    Server: [
      "Arn",
      "AssociatePublicIpAddress",
      "BackupId",
      "CustomCertificate",
      "CustomDomain",
      "CustomPrivateKey",
      "Endpoint",
      "Engine",
      "EngineModel",
      "EngineVersion",
      "InstanceProfileArn",
      "InstanceType",
      "KeyPair",
      "SecurityGroupIds",
      "ServerName",
      "ServiceRoleArn",
      "SubnetIds",
    ],
  },
  Organizations: {
    Account: ["AccountId", "Arn", "JoinedMethod", "JoinedTimestamp", "Status"],
    Organization: [
      "Arn",
      "Id",
      "ManagementAccountArn",
      "ManagementAccountEmail",
      "ManagementAccountId",
      "RootId",
    ],
    OrganizationalUnit: ["Arn", "Id", "ParentId"],
    Policy: ["Arn", "AwsManaged", "Id", "Type"],
    ResourcePolicy: ["Arn", "Id"],
  },
  PCAConnectorAD: {
    Connector: [
      "CertificateAuthorityArn",
      "ConnectorArn",
      "DirectoryId",
      "VpcInformation",
    ],
    DirectoryRegistration: ["DirectoryId", "DirectoryRegistrationArn"],
    ServicePrincipalName: ["ConnectorArn", "DirectoryRegistrationArn"],
    Template: ["ConnectorArn", "Name", "TemplateArn"],
    TemplateGroupAccessControlEntry: ["GroupSecurityIdentifier", "TemplateArn"],
  },
  PCAConnectorSCEP: {
    Challenge: ["ChallengeArn", "ConnectorArn"],
    Connector: [
      "CertificateAuthorityArn",
      "ConnectorArn",
      "Endpoint",
      "MobileDeviceManagement",
      "OpenIdConfiguration",
      "OpenIdConfiguration.Audience",
      "OpenIdConfiguration.Issuer",
      "OpenIdConfiguration.Subject",
      "Type",
    ],
  },
  PCS: {
    Cluster: [
      "Arn",
      "Endpoints",
      "ErrorInfo",
      "Id",
      "Name",
      "Networking",
      "Scheduler",
      "Size",
      "SlurmConfiguration",
      "Status",
    ],
    ComputeNodeGroup: [
      "Arn",
      "ClusterId",
      "ErrorInfo",
      "Id",
      "InstanceConfigs",
      "Name",
      "Status",
    ],
    Queue: ["Arn", "ClusterId", "ErrorInfo", "Id", "Name", "Status"],
  },
  Panorama: {
    ApplicationInstance: [
      "ApplicationInstanceId",
      "ApplicationInstanceIdToReplace",
      "Arn",
      "CreatedTime",
      "DefaultRuntimeContextDevice",
      "DefaultRuntimeContextDeviceName",
      "Description",
      "HealthStatus",
      "LastUpdatedTime",
      "ManifestOverridesPayload",
      "ManifestPayload",
      "Name",
      "RuntimeRoleArn",
      "Status",
      "StatusDescription",
    ],
    Package: [
      "Arn",
      "CreatedTime",
      "PackageId",
      "PackageName",
      "StorageLocation.BinaryPrefixLocation",
      "StorageLocation.Bucket",
      "StorageLocation.GeneratedPrefixLocation",
      "StorageLocation.ManifestPrefixLocation",
      "StorageLocation.RepoPrefixLocation",
    ],
    PackageVersion: [
      "IsLatestPatch",
      "OwnerAccount",
      "PackageArn",
      "PackageId",
      "PackageName",
      "PackageVersion",
      "PatchVersion",
      "RegisteredTime",
      "Status",
      "StatusDescription",
    ],
  },
  PaymentCryptography: {
    Alias: ["AliasName"],
    Key: ["KeyIdentifier", "KeyOrigin", "KeyState"],
  },
  Personalize: {
    Dataset: [
      "DatasetArn",
      "DatasetGroupArn",
      "DatasetType",
      "Name",
      "SchemaArn",
    ],
    DatasetGroup: ["DatasetGroupArn", "Domain", "KmsKeyArn", "Name", "RoleArn"],
    Schema: ["Domain", "Name", "Schema", "SchemaArn"],
    Solution: [
      "DatasetGroupArn",
      "EventType",
      "Name",
      "PerformAutoML",
      "PerformHPO",
      "RecipeArn",
      "SolutionArn",
      "SolutionConfig",
    ],
  },
  Pinpoint: {
    ADMChannel: ["ApplicationId"],
    APNSChannel: ["ApplicationId"],
    APNSSandboxChannel: ["ApplicationId"],
    APNSVoipChannel: ["ApplicationId"],
    APNSVoipSandboxChannel: ["ApplicationId"],
    App: ["Arn", "Name"],
    ApplicationSettings: ["ApplicationId"],
    BaiduChannel: ["ApplicationId"],
    Campaign: ["ApplicationId", "Arn", "CampaignId"],
    EmailChannel: ["ApplicationId"],
    EmailTemplate: ["Arn", "TemplateName"],
    EventStream: ["ApplicationId"],
    GCMChannel: ["ApplicationId"],
    InAppTemplate: ["Arn", "TemplateName"],
    PushTemplate: ["Arn", "TemplateName"],
    SMSChannel: ["ApplicationId"],
    Segment: ["ApplicationId", "Arn", "SegmentId"],
    SmsTemplate: ["Arn", "TemplateName"],
    VoiceChannel: ["ApplicationId"],
  },
  PinpointEmail: {
    ConfigurationSet: ["Name"],
    ConfigurationSetEventDestination: [
      "ConfigurationSetName",
      "EventDestinationName",
    ],
    DedicatedIpPool: ["PoolName"],
    Identity: [
      "IdentityDNSRecordName1",
      "IdentityDNSRecordName2",
      "IdentityDNSRecordName3",
      "IdentityDNSRecordValue1",
      "IdentityDNSRecordValue2",
      "IdentityDNSRecordValue3",
      "Name",
    ],
  },
  Pipes: {
    Pipe: [
      "Arn",
      "CreationTime",
      "CurrentState",
      "LastModifiedTime",
      "Name",
      "Source",
      "StateReason",
    ],
  },
  Proton: {
    EnvironmentAccountConnection: ["Arn", "Id", "Status"],
    EnvironmentTemplate: ["Arn", "EncryptionKey", "Name", "Provisioning"],
    ServiceTemplate: ["Arn", "EncryptionKey", "Name", "PipelineProvisioning"],
  },
  QBusiness: {
    Application: [
      "ApplicationArn",
      "ApplicationId",
      "ClientIdsForOIDC",
      "CreatedAt",
      "EncryptionConfiguration",
      "IamIdentityProviderArn",
      "IdentityCenterApplicationArn",
      "IdentityType",
      "QuickSightConfiguration",
      "Status",
      "UpdatedAt",
    ],
    DataAccessor: [
      "ApplicationId",
      "CreatedAt",
      "DataAccessorArn",
      "DataAccessorId",
      "IdcApplicationArn",
      "Principal",
      "UpdatedAt",
    ],
    DataSource: [
      "ApplicationId",
      "CreatedAt",
      "DataSourceArn",
      "DataSourceId",
      "IndexId",
      "Status",
      "Type",
      "UpdatedAt",
    ],
    Index: [
      "ApplicationId",
      "CreatedAt",
      "IndexArn",
      "IndexId",
      "IndexStatistics",
      "IndexStatistics.TextDocumentStatistics",
      "IndexStatistics.TextDocumentStatistics.IndexedTextBytes",
      "IndexStatistics.TextDocumentStatistics.IndexedTextDocumentCount",
      "Status",
      "Type",
      "UpdatedAt",
    ],
    Permission: ["Actions", "ApplicationId", "Principal", "StatementId"],
    Plugin: [
      "ApplicationId",
      "BuildStatus",
      "CreatedAt",
      "PluginArn",
      "PluginId",
      "Type",
      "UpdatedAt",
    ],
    Retriever: [
      "ApplicationId",
      "CreatedAt",
      "RetrieverArn",
      "RetrieverId",
      "Status",
      "Type",
      "UpdatedAt",
    ],
    WebExperience: [
      "ApplicationId",
      "CreatedAt",
      "DefaultEndpoint",
      "Status",
      "UpdatedAt",
      "WebExperienceArn",
      "WebExperienceId",
    ],
  },
  QLDB: {
    Ledger: ["Name"],
    Stream: [
      "Arn",
      "ExclusiveEndTime",
      "Id",
      "InclusiveStartTime",
      "KinesisConfiguration",
      "LedgerName",
      "RoleArn",
      "StreamName",
    ],
  },
  QuickSight: {
    Analysis: [
      "AnalysisId",
      "Arn",
      "AwsAccountId",
      "CreatedTime",
      "DataSetArns",
      "LastUpdatedTime",
    ],
    CustomPermissions: ["Arn", "AwsAccountId", "CustomPermissionsName"],
    Dashboard: [
      "Arn",
      "AwsAccountId",
      "CreatedTime",
      "DashboardId",
      "LastPublishedTime",
      "LastUpdatedTime",
      "Version",
      "Version.Arn",
      "Version.CreatedTime",
      "Version.DataSetArns",
      "Version.Description",
      "Version.Errors",
      "Version.Sheets",
      "Version.SourceEntityArn",
      "Version.Status",
      "Version.ThemeArn",
      "Version.VersionNumber",
    ],
    DataSet: [
      "Arn",
      "AwsAccountId",
      "ConsumedSpiceCapacityInBytes",
      "CreatedTime",
      "DataSetId",
      "LastUpdatedTime",
      "OutputColumns",
    ],
    DataSource: [
      "Arn",
      "AwsAccountId",
      "CreatedTime",
      "DataSourceId",
      "LastUpdatedTime",
      "Status",
      "Type",
    ],
    Folder: [
      "Arn",
      "AwsAccountId",
      "CreatedTime",
      "FolderId",
      "FolderType",
      "LastUpdatedTime",
      "ParentFolderArn",
      "SharingModel",
    ],
    RefreshSchedule: ["Arn", "AwsAccountId", "DataSetId"],
    Template: [
      "Arn",
      "AwsAccountId",
      "CreatedTime",
      "LastUpdatedTime",
      "TemplateId",
      "Version",
      "Version.CreatedTime",
      "Version.DataSetConfigurations",
      "Version.Description",
      "Version.Errors",
      "Version.Sheets",
      "Version.SourceEntityArn",
      "Version.Status",
      "Version.ThemeArn",
      "Version.VersionNumber",
    ],
    Theme: [
      "Arn",
      "AwsAccountId",
      "CreatedTime",
      "LastUpdatedTime",
      "ThemeId",
      "Type",
      "Version",
      "Version.Arn",
      "Version.BaseThemeId",
      "Version.Configuration",
      "Version.Configuration.DataColorPalette",
      "Version.Configuration.Sheet",
      "Version.Configuration.Typography",
      "Version.Configuration.UIColorPalette",
      "Version.CreatedTime",
      "Version.Description",
      "Version.Errors",
      "Version.Status",
      "Version.VersionNumber",
    ],
    Topic: ["Arn", "AwsAccountId", "FolderArns", "TopicId"],
    VPCConnection: [
      "Arn",
      "AwsAccountId",
      "CreatedTime",
      "LastUpdatedTime",
      "NetworkInterfaces",
      "Status",
      "VPCConnectionId",
      "VPCId",
    ],
  },
  RAM: {
    Permission: [
      "Arn",
      "IsResourceTypeDefault",
      "Name",
      "PermissionType",
      "PolicyTemplate",
      "ResourceType",
      "Version",
    ],
    ResourceShare: ["Arn"],
  },
  RDS: {
    CustomDBEngineVersion: [
      "DBEngineVersionArn",
      "DatabaseInstallationFilesS3BucketName",
      "DatabaseInstallationFilesS3Prefix",
      "Engine",
      "EngineVersion",
      "ImageId",
      "KMSKeyId",
      "Manifest",
      "SourceCustomDbEngineVersionIdentifier",
      "UseAwsProvidedLatestImage",
    ],
    DBCluster: [
      "AvailabilityZones",
      "ClusterScalabilityType",
      "DBClusterArn",
      "DBClusterIdentifier",
      "DBClusterResourceId",
      "DBSubnetGroupName",
      "DBSystemId",
      "DatabaseName",
      "Endpoint",
      "Endpoint.Address",
      "Endpoint.Port",
      "EngineMode",
      "KmsKeyId",
      "MasterUserSecret.SecretArn",
      "PubliclyAccessible",
      "ReadEndpoint",
      "ReadEndpoint.Address",
      "RestoreToTime",
      "RestoreType",
      "SnapshotIdentifier",
      "SourceDBClusterIdentifier",
      "SourceRegion",
      "StorageEncrypted",
      "StorageThroughput",
      "UseLatestRestorableTime",
    ],
    DBClusterParameterGroup: [
      "DBClusterParameterGroupName",
      "Description",
      "Family",
    ],
    DBInstance: [
      "CertificateDetails",
      "CertificateDetails.CAIdentifier",
      "CertificateDetails.ValidTill",
      "CharacterSetName",
      "CustomIAMInstanceProfile",
      "DBClusterIdentifier",
      "DBInstanceArn",
      "DBInstanceIdentifier",
      "DBName",
      "DBSubnetGroupName",
      "DBSystemId",
      "DBSystemId",
      "DbiResourceId",
      "Endpoint",
      "Endpoint.Address",
      "Endpoint.HostedZoneId",
      "Endpoint.Port",
      "KmsKeyId",
      "MasterUserSecret.SecretArn",
      "MasterUsername",
      "NcharCharacterSetName",
      "SourceRegion",
      "StorageEncrypted",
      "Timezone",
    ],
    DBParameterGroup: [
      "DBParameterGroupName",
      "DBParameterGroupName",
      "Description",
      "Family",
    ],
    DBProxy: [
      "DBProxyArn",
      "DBProxyName",
      "Endpoint",
      "EngineFamily",
      "VpcId",
      "VpcSubnetIds",
    ],
    DBProxyEndpoint: [
      "DBProxyEndpointArn",
      "DBProxyEndpointName",
      "DBProxyName",
      "Endpoint",
      "IsDefault",
      "VpcId",
      "VpcSubnetIds",
    ],
    DBProxyTargetGroup: ["DBProxyName", "TargetGroupArn", "TargetGroupName"],
    DBSecurityGroup: ["EC2VpcId", "GroupDescription"],
    DBShardGroup: [
      "DBClusterIdentifier",
      "DBShardGroupIdentifier",
      "DBShardGroupResourceId",
      "Endpoint",
      "PubliclyAccessible",
    ],
    DBSubnetGroup: ["DBSubnetGroupName"],
    EventSubscription: ["SnsTopicArn", "SubscriptionName"],
    GlobalCluster: [
      "Engine",
      "GlobalClusterIdentifier",
      "GlobalEndpoint",
      "GlobalEndpoint.Address",
      "SourceDBClusterIdentifier",
      "StorageEncrypted",
    ],
    Integration: [
      "AdditionalEncryptionContext",
      "CreateTime",
      "IntegrationArn",
      "KMSKeyId",
      "SourceArn",
      "TargetArn",
    ],
    OptionGroup: [
      "EngineName",
      "MajorEngineVersion",
      "OptionGroupDescription",
      "OptionGroupName",
    ],
  },
  RUM: {
    AppMonitor: ["Id", "Name"],
  },
  Rbin: {
    Rule: ["Arn", "Identifier", "LockState", "ResourceType"],
  },
  Redshift: {
    Cluster: [
      "ClusterIdentifier",
      "ClusterNamespaceArn",
      "ClusterSubnetGroupName",
      "DBName",
      "DeferMaintenanceIdentifier",
      "Endpoint.Address",
      "Endpoint.Port",
      "MasterPasswordSecretArn",
      "MasterUsername",
      "OwnerAccount",
      "SnapshotClusterIdentifier",
      "SnapshotIdentifier",
    ],
    ClusterParameterGroup: [
      "Description",
      "ParameterGroupFamily",
      "ParameterGroupName",
    ],
    ClusterSecurityGroup: ["Description"],
    ClusterSecurityGroupIngress: [
      "CIDRIP",
      "ClusterSecurityGroupName",
      "EC2SecurityGroupName",
      "EC2SecurityGroupOwnerId",
    ],
    ClusterSubnetGroup: ["ClusterSubnetGroupName"],
    EndpointAccess: [
      "Address",
      "ClusterIdentifier",
      "EndpointCreateTime",
      "EndpointName",
      "EndpointStatus",
      "Port",
      "ResourceOwner",
      "SubnetGroupName",
      "VpcEndpoint",
      "VpcEndpoint.NetworkInterfaces",
      "VpcEndpoint.VpcEndpointId",
      "VpcEndpoint.VpcId",
      "VpcSecurityGroups",
    ],
    EndpointAuthorization: [
      "Account",
      "AllowedAllVPCs",
      "AllowedVPCs",
      "AuthorizeTime",
      "ClusterIdentifier",
      "ClusterStatus",
      "EndpointCount",
      "Grantee",
      "Grantor",
      "Status",
    ],
    EventSubscription: [
      "CustSubscriptionId",
      "CustomerAwsId",
      "EventCategoriesList",
      "SourceIdsList",
      "Status",
      "SubscriptionCreationTime",
      "SubscriptionName",
    ],
    Integration: [
      "AdditionalEncryptionContext",
      "CreateTime",
      "IntegrationArn",
      "KMSKeyId",
      "SourceArn",
      "TargetArn",
    ],
    ScheduledAction: ["NextInvocations", "ScheduledActionName", "State"],
  },
  RedshiftServerless: {
    Namespace: [
      "Namespace",
      "Namespace.AdminPasswordSecretArn",
      "Namespace.AdminPasswordSecretKmsKeyId",
      "Namespace.AdminUsername",
      "Namespace.CreationDate",
      "Namespace.DbName",
      "Namespace.DefaultIamRoleArn",
      "Namespace.IamRoles",
      "Namespace.KmsKeyId",
      "Namespace.LogExports",
      "Namespace.NamespaceArn",
      "Namespace.NamespaceId",
      "Namespace.NamespaceName",
      "Namespace.Status",
      "NamespaceName",
    ],
    Workgroup: [
      "NamespaceName",
      "Workgroup.BaseCapacity",
      "Workgroup.CreationDate",
      "Workgroup.Endpoint.Address",
      "Workgroup.Endpoint.Port",
      "Workgroup.EnhancedVpcRouting",
      "Workgroup.MaxCapacity",
      "Workgroup.NamespaceName",
      "Workgroup.PubliclyAccessible",
      "Workgroup.SecurityGroupIds",
      "Workgroup.Status",
      "Workgroup.SubnetIds",
      "Workgroup.TrackName",
      "Workgroup.WorkgroupArn",
      "Workgroup.WorkgroupId",
      "Workgroup.WorkgroupName",
      "WorkgroupName",
    ],
  },
  RefactorSpaces: {
    Application: [
      "ApiGatewayId",
      "ApiGatewayProxy",
      "ApplicationIdentifier",
      "Arn",
      "EnvironmentIdentifier",
      "Name",
      "NlbArn",
      "NlbName",
      "ProxyType",
      "ProxyUrl",
      "StageName",
      "VpcId",
      "VpcLinkId",
    ],
    Environment: [
      "Arn",
      "Description",
      "EnvironmentIdentifier",
      "Name",
      "NetworkFabricType",
      "TransitGatewayId",
    ],
    Route: [
      "ApplicationIdentifier",
      "Arn",
      "EnvironmentIdentifier",
      "PathResourceToId",
      "RouteIdentifier",
      "RouteType",
      "ServiceIdentifier",
    ],
    Service: [
      "ApplicationIdentifier",
      "Arn",
      "Description",
      "EndpointType",
      "EnvironmentIdentifier",
      "LambdaEndpoint",
      "Name",
      "ServiceIdentifier",
      "UrlEndpoint",
      "VpcId",
    ],
  },
  Rekognition: {
    Collection: ["Arn", "CollectionId"],
    Project: ["Arn", "ProjectName"],
    StreamProcessor: [
      "Arn",
      "BoundingBoxRegionsOfInterest",
      "ConnectedHomeSettings",
      "DataSharingPreference",
      "FaceSearchSettings",
      "KinesisDataStream",
      "KinesisVideoStream",
      "KmsKeyId",
      "Name",
      "NotificationChannel",
      "PolygonRegionsOfInterest",
      "RoleArn",
      "S3Destination",
      "Status",
      "StatusMessage",
    ],
  },
  ResilienceHub: {
    App: ["AppArn", "DriftStatus", "Name"],
    ResiliencyPolicy: ["PolicyArn"],
  },
  ResourceExplorer2: {
    DefaultViewAssociation: ["AssociatedAwsPrincipal"],
    Index: ["Arn", "IndexState"],
    View: ["Scope", "ViewArn", "ViewName"],
  },
  ResourceGroups: {
    Group: ["Arn", "Name"],
    TagSyncTask: [
      "Group",
      "GroupArn",
      "GroupName",
      "RoleArn",
      "Status",
      "TagKey",
      "TagValue",
      "TaskArn",
    ],
  },
  RoboMaker: {
    Fleet: ["Arn", "Name"],
    Robot: ["Architecture", "Arn", "Fleet", "GreengrassGroupId", "Name"],
    RobotApplication: ["Arn", "CurrentRevisionId", "Name"],
    RobotApplicationVersion: [
      "Application",
      "ApplicationVersion",
      "Arn",
      "CurrentRevisionId",
    ],
    SimulationApplication: ["Arn", "CurrentRevisionId", "Name"],
    SimulationApplicationVersion: [
      "Application",
      "ApplicationVersion",
      "Arn",
      "CurrentRevisionId",
    ],
  },
  RolesAnywhere: {
    CRL: ["CrlId"],
    Profile: ["ProfileArn", "ProfileId", "RequireInstanceProperties"],
    TrustAnchor: ["TrustAnchorArn", "TrustAnchorId"],
  },
  Route53: {
    CidrCollection: ["Arn", "Id", "Name"],
    DNSSEC: ["HostedZoneId"],
    HealthCheck: ["HealthCheckId"],
    HostedZone: ["Id", "Name", "NameServers"],
    KeySigningKey: ["HostedZoneId", "KeyManagementServiceArn", "Name"],
    RecordSet: ["HostedZoneId", "HostedZoneName", "Name"],
    RecordSetGroup: ["HostedZoneId", "HostedZoneName"],
  },
  Route53Profiles: {
    Profile: ["Arn", "ClientToken", "Id", "Name"],
    ProfileAssociation: ["Id", "Name", "ProfileId", "ResourceId"],
    ProfileResourceAssociation: [
      "Id",
      "Name",
      "ProfileId",
      "ResourceArn",
      "ResourceType",
    ],
  },
  Route53RecoveryControl: {
    Cluster: ["ClusterArn", "ClusterEndpoints", "Name", "Status", "Tags"],
    ControlPanel: [
      "ClusterArn",
      "ControlPanelArn",
      "DefaultControlPanel",
      "RoutingControlCount",
      "Status",
      "Tags",
    ],
    RoutingControl: [
      "ClusterArn",
      "ControlPanelArn",
      "RoutingControlArn",
      "Status",
    ],
    SafetyRule: ["SafetyRuleArn", "Status"],
  },
  Route53RecoveryReadiness: {
    Cell: ["CellArn", "CellName", "ParentReadinessScopes"],
    ReadinessCheck: ["ReadinessCheckArn", "ReadinessCheckName"],
    RecoveryGroup: ["RecoveryGroupArn", "RecoveryGroupName"],
    ResourceSet: ["ResourceSetArn", "ResourceSetName", "ResourceSetType"],
  },
  Route53Resolver: {
    FirewallDomainList: [
      "Arn",
      "CreationTime",
      "CreatorRequestId",
      "DomainCount",
      "Id",
      "ManagedOwnerName",
      "ModificationTime",
      "Name",
      "Status",
      "StatusMessage",
    ],
    FirewallRuleGroup: [
      "Arn",
      "CreationTime",
      "CreatorRequestId",
      "Id",
      "ModificationTime",
      "Name",
      "OwnerId",
      "RuleCount",
      "ShareStatus",
      "Status",
      "StatusMessage",
    ],
    FirewallRuleGroupAssociation: [
      "Arn",
      "CreationTime",
      "CreatorRequestId",
      "FirewallRuleGroupId",
      "Id",
      "ManagedOwnerName",
      "ModificationTime",
      "Status",
      "StatusMessage",
      "VpcId",
    ],
    OutpostResolver: [
      "Arn",
      "CreationTime",
      "CreatorRequestId",
      "Id",
      "ModificationTime",
      "OutpostArn",
      "Status",
      "StatusMessage",
    ],
    ResolverConfig: [
      "AutodefinedReverse",
      "AutodefinedReverseFlag",
      "Id",
      "OwnerId",
      "ResourceId",
    ],
    ResolverDNSSECConfig: ["Id", "OwnerId", "ResourceId", "ValidationStatus"],
    ResolverEndpoint: [
      "Arn",
      "Direction",
      "Direction",
      "HostVPCId",
      "IpAddressCount",
      "Name",
      "OutpostArn",
      "PreferredInstanceType",
      "ResolverEndpointId",
      "SecurityGroupIds",
    ],
    ResolverQueryLoggingConfig: [
      "Arn",
      "AssociationCount",
      "CreationTime",
      "CreatorRequestId",
      "DestinationArn",
      "Id",
      "Name",
      "OwnerId",
      "ShareStatus",
      "Status",
      "Tags",
    ],
    ResolverQueryLoggingConfigAssociation: [
      "CreationTime",
      "Error",
      "ErrorMessage",
      "Id",
      "ResolverQueryLogConfigId",
      "ResourceId",
      "Status",
    ],
    ResolverRule: [
      "Arn",
      "DomainName",
      "Name",
      "ResolverEndpointId",
      "ResolverRuleId",
      "RuleType",
      "TargetIps",
    ],
    ResolverRuleAssociation: [
      "Name",
      "Name",
      "ResolverRuleAssociationId",
      "ResolverRuleId",
      "ResolverRuleId",
      "VPCId",
      "VPCId",
    ],
  },
  S3: {
    AccessGrant: [
      "AccessGrantArn",
      "AccessGrantId",
      "GrantScope",
      "S3PrefixType",
      "Tags",
    ],
    AccessGrantsInstance: [
      "AccessGrantsInstanceArn",
      "AccessGrantsInstanceId",
      "Tags",
    ],
    AccessGrantsLocation: [
      "AccessGrantsLocationArn",
      "AccessGrantsLocationId",
      "Tags",
    ],
    AccessPoint: [
      "Alias",
      "Arn",
      "Bucket",
      "BucketAccountId",
      "Name",
      "Name",
      "NetworkOrigin",
      "VpcConfiguration",
    ],
    Bucket: [
      "Arn",
      "BucketName",
      "DomainName",
      "DualStackDomainName",
      "MetadataTableConfiguration.S3TablesDestination.TableArn",
      "MetadataTableConfiguration.S3TablesDestination.TableNamespace",
      "RegionalDomainName",
      "WebsiteURL",
    ],
    BucketPolicy: ["Bucket"],
    MultiRegionAccessPoint: [
      "Alias",
      "CreatedAt",
      "Name",
      "PublicAccessBlockConfiguration",
      "Regions",
    ],
    MultiRegionAccessPointPolicy: [
      "MrapName",
      "PolicyStatus",
      "PolicyStatus.IsPublic",
    ],
    StorageLens: ["StorageLensConfiguration.StorageLensArn"],
    StorageLensGroup: ["Name", "StorageLensGroupArn"],
  },
  S3Express: {
    AccessPoint: [
      "Arn",
      "Bucket",
      "BucketAccountId",
      "Name",
      "NetworkOrigin",
      "VpcConfiguration",
    ],
    BucketPolicy: ["Bucket"],
    DirectoryBucket: [
      "Arn",
      "AvailabilityZoneName",
      "BucketName",
      "DataRedundancy",
      "LocationName",
    ],
  },
  S3ObjectLambda: {
    AccessPoint: [
      "Alias",
      "Alias.Status",
      "Alias.Value",
      "Arn",
      "CreationDate",
      "Name",
      "PublicAccessBlockConfiguration",
      "PublicAccessBlockConfiguration.BlockPublicAcls",
      "PublicAccessBlockConfiguration.BlockPublicPolicy",
      "PublicAccessBlockConfiguration.IgnorePublicAcls",
      "PublicAccessBlockConfiguration.RestrictPublicBuckets",
    ],
    AccessPointPolicy: ["ObjectLambdaAccessPoint"],
  },
  S3Outposts: {
    AccessPoint: ["Arn", "Bucket", "Name", "VpcConfiguration"],
    Bucket: ["Arn", "BucketName", "OutpostId"],
    BucketPolicy: ["Bucket"],
    Endpoint: [
      "AccessType",
      "Arn",
      "CidrBlock",
      "CreationTime",
      "CustomerOwnedIpv4Pool",
      "Id",
      "NetworkInterfaces",
      "OutpostId",
      "SecurityGroupId",
      "Status",
      "SubnetId",
    ],
  },
  S3Tables: {
    TableBucket: ["TableBucketARN", "TableBucketName"],
    TableBucketPolicy: ["TableBucketARN"],
  },
  SES: {
    ConfigurationSet: ["Name"],
    ConfigurationSetEventDestination: ["ConfigurationSetName", "Id"],
    ContactList: ["ContactListName"],
    DedicatedIpPool: ["PoolName"],
    EmailIdentity: [
      "DkimDNSTokenName1",
      "DkimDNSTokenName2",
      "DkimDNSTokenName3",
      "DkimDNSTokenValue1",
      "DkimDNSTokenValue2",
      "DkimDNSTokenValue3",
      "EmailIdentity",
    ],
    MailManagerAddonInstance: [
      "AddonInstanceArn",
      "AddonInstanceId",
      "AddonName",
      "AddonSubscriptionId",
    ],
    MailManagerAddonSubscription: [
      "AddonName",
      "AddonSubscriptionArn",
      "AddonSubscriptionId",
    ],
    MailManagerAddressList: [
      "AddressListArn",
      "AddressListId",
      "AddressListName",
    ],
    MailManagerArchive: [
      "ArchiveArn",
      "ArchiveId",
      "ArchiveState",
      "KmsKeyArn",
    ],
    MailManagerIngressPoint: [
      "ARecord",
      "IngressPointArn",
      "IngressPointId",
      "NetworkConfiguration",
      "Status",
      "Type",
    ],
    MailManagerRelay: ["RelayArn", "RelayId"],
    MailManagerRuleSet: ["RuleSetArn", "RuleSetId"],
    MailManagerTrafficPolicy: ["TrafficPolicyArn", "TrafficPolicyId"],
    ReceiptFilter: ["Filter"],
    ReceiptRule: ["RuleSetName"],
    ReceiptRuleSet: ["RuleSetName"],
    Template: ["Id"],
    VdmAttributes: ["VdmAttributesResourceId"],
  },
  SNS: {
    Subscription: ["Arn", "Endpoint", "Protocol", "TopicArn"],
    Topic: ["FifoTopic", "TopicArn", "TopicName", "TopicName"],
    TopicInlinePolicy: ["TopicArn"],
    TopicPolicy: ["Id"],
  },
  SQS: {
    Queue: ["Arn", "FifoQueue", "QueueName", "QueueName", "QueueUrl"],
    QueueInlinePolicy: ["Queue"],
    QueuePolicy: ["Id"],
  },
  SSM: {
    Association: ["AssociationId"],
    Document: ["DocumentType", "Name"],
    MaintenanceWindowTarget: ["WindowId"],
    MaintenanceWindowTask: ["TaskType", "WindowId"],
    Parameter: ["Name", "Type", "Value"],
    PatchBaseline: ["Id", "OperatingSystem"],
    ResourceDataSync: [
      "BucketName",
      "BucketPrefix",
      "BucketRegion",
      "KMSKeyArn",
      "S3Destination",
      "SyncFormat",
      "SyncName",
      "SyncType",
    ],
    ResourcePolicy: ["PolicyHash", "PolicyId", "ResourceArn"],
  },
  SSMContacts: {
    Contact: ["Alias", "Arn", "Type"],
    ContactChannel: ["Arn", "ChannelType", "ContactId"],
    Plan: ["Arn", "ContactId"],
    Rotation: ["Arn"],
  },
  SSMGuiConnect: {
    Preferences: ["AccountId"],
  },
  SSMIncidents: {
    ReplicationSet: ["Arn"],
    ResponsePlan: ["Arn", "Name"],
  },
  SSMQuickSetup: {
    ConfigurationManager: [
      "CreatedAt",
      "LastModifiedAt",
      "ManagerArn",
      "StatusSummaries",
    ],
  },
  SSO: {
    Application: ["ApplicationArn", "ApplicationProviderArn", "InstanceArn"],
    ApplicationAssignment: ["ApplicationArn", "PrincipalId", "PrincipalType"],
    Assignment: [
      "InstanceArn",
      "PermissionSetArn",
      "PrincipalId",
      "PrincipalType",
      "TargetId",
      "TargetType",
    ],
    Instance: ["IdentityStoreId", "InstanceArn", "OwnerAccountId", "Status"],
    InstanceAccessControlAttributeConfiguration: ["InstanceArn"],
    PermissionSet: ["InstanceArn", "Name", "PermissionSetArn"],
  },
  SageMaker: {
    App: [
      "AppArn",
      "AppName",
      "AppType",
      "BuiltInLifecycleConfigArn",
      "DomainId",
      "ResourceSpec",
      "Tags",
      "UserProfileName",
    ],
    AppImageConfig: ["AppImageConfigArn", "AppImageConfigName", "Tags"],
    Cluster: [
      "ClusterArn",
      "ClusterName",
      "ClusterStatus",
      "CreationTime",
      "FailureMessage",
      "Orchestrator",
      "VpcConfig",
    ],
    CodeRepository: ["CodeRepositoryName", "CodeRepositoryName"],
    DataQualityJobDefinition: [
      "CreationTime",
      "DataQualityAppSpecification",
      "DataQualityBaselineConfig",
      "DataQualityJobInput",
      "DataQualityJobOutputConfig",
      "EndpointName",
      "JobDefinitionArn",
      "JobDefinitionName",
      "JobResources",
      "NetworkConfig",
      "RoleArn",
      "StoppingCondition",
      "Tags",
    ],
    DeviceFleet: ["DeviceFleetName"],
    Domain: [
      "AuthMode",
      "DomainArn",
      "DomainId",
      "DomainName",
      "HomeEfsFileSystemId",
      "KmsKeyId",
      "SecurityGroupIdForDomainBoundary",
      "SingleSignOnApplicationArn",
      "SingleSignOnManagedApplicationInstanceId",
      "Tags",
      "Url",
      "VpcId",
    ],
    Endpoint: ["EndpointName", "EndpointName"],
    EndpointConfig: [
      "AsyncInferenceConfig",
      "DataCaptureConfig",
      "EnableNetworkIsolation",
      "EndpointConfigName",
      "EndpointConfigName",
      "ExecutionRoleArn",
      "ExplainerConfig",
      "KmsKeyId",
      "ProductionVariants",
      "ShadowProductionVariants",
      "VpcConfig",
    ],
    FeatureGroup: [
      "CreationTime",
      "Description",
      "EventTimeFeatureName",
      "FeatureGroupName",
      "FeatureGroupStatus",
      "OfflineStoreConfig",
      "RecordIdentifierFeatureName",
      "RoleArn",
      "Tags",
    ],
    Image: ["ImageArn", "ImageName"],
    ImageVersion: [
      "BaseImage",
      "ContainerImage",
      "ImageArn",
      "ImageName",
      "ImageVersionArn",
      "Version",
    ],
    InferenceComponent: [
      "CreationTime",
      "FailureReason",
      "InferenceComponentArn",
      "InferenceComponentStatus",
      "LastModifiedTime",
      "RuntimeConfig.CurrentCopyCount",
      "RuntimeConfig.DesiredCopyCount",
      "Specification.Container.DeployedImage",
      "Specification.Container.DeployedImage.ResolutionTime",
      "Specification.Container.DeployedImage.ResolvedImage",
      "Specification.Container.DeployedImage.SpecifiedImage",
    ],
    InferenceExperiment: [
      "Arn",
      "CreationTime",
      "EndpointMetadata",
      "EndpointMetadata.EndpointConfigName",
      "EndpointMetadata.EndpointName",
      "EndpointMetadata.EndpointStatus",
      "EndpointName",
      "KmsKey",
      "LastModifiedTime",
      "Name",
      "RoleArn",
      "Status",
      "Type",
    ],
    MlflowTrackingServer: ["TrackingServerArn", "TrackingServerName"],
    Model: [
      "Containers",
      "EnableNetworkIsolation",
      "ExecutionRoleArn",
      "InferenceExecutionConfig",
      "ModelName",
      "ModelName",
      "PrimaryContainer",
      "VpcConfig",
    ],
    ModelBiasJobDefinition: [
      "CreationTime",
      "EndpointName",
      "JobDefinitionArn",
      "JobDefinitionName",
      "JobResources",
      "ModelBiasAppSpecification",
      "ModelBiasBaselineConfig",
      "ModelBiasJobInput",
      "ModelBiasJobOutputConfig",
      "NetworkConfig",
      "RoleArn",
      "StoppingCondition",
      "Tags",
    ],
    ModelCard: [
      "CreatedBy.DomainId",
      "CreatedBy.UserProfileArn",
      "CreatedBy.UserProfileName",
      "CreationTime",
      "LastModifiedBy.DomainId",
      "LastModifiedBy.UserProfileArn",
      "LastModifiedBy.UserProfileName",
      "LastModifiedTime",
      "ModelCardArn",
      "ModelCardName",
      "ModelCardProcessingStatus",
      "ModelCardVersion",
      "SecurityConfig",
    ],
    ModelExplainabilityJobDefinition: [
      "CreationTime",
      "EndpointName",
      "JobDefinitionArn",
      "JobDefinitionName",
      "JobResources",
      "ModelExplainabilityAppSpecification",
      "ModelExplainabilityBaselineConfig",
      "ModelExplainabilityJobInput",
      "ModelExplainabilityJobOutputConfig",
      "NetworkConfig",
      "RoleArn",
      "StoppingCondition",
      "Tags",
    ],
    ModelPackage: [
      "ClientToken",
      "CreationTime",
      "Domain",
      "DriftCheckBaselines",
      "InferenceSpecification",
      "MetadataProperties",
      "ModelMetrics",
      "ModelPackageArn",
      "ModelPackageDescription",
      "ModelPackageGroupName",
      "ModelPackageStatus",
      "SamplePayloadUrl",
      "SecurityConfig",
      "SourceAlgorithmSpecification",
      "Task",
      "ValidationSpecification",
    ],
    ModelPackageGroup: [
      "CreationTime",
      "ModelPackageGroupArn",
      "ModelPackageGroupDescription",
      "ModelPackageGroupName",
      "ModelPackageGroupStatus",
    ],
    ModelQualityJobDefinition: [
      "CreationTime",
      "EndpointName",
      "JobDefinitionArn",
      "JobDefinitionName",
      "JobResources",
      "ModelQualityAppSpecification",
      "ModelQualityBaselineConfig",
      "ModelQualityJobInput",
      "ModelQualityJobOutputConfig",
      "NetworkConfig",
      "RoleArn",
      "StoppingCondition",
      "Tags",
    ],
    MonitoringSchedule: [
      "CreationTime",
      "LastModifiedTime",
      "MonitoringScheduleArn",
      "MonitoringScheduleName",
    ],
    NotebookInstance: [
      "DirectInternetAccess",
      "KmsKeyId",
      "NotebookInstanceName",
      "NotebookInstanceName",
      "PlatformIdentifier",
      "SecurityGroupIds",
      "SubnetId",
    ],
    NotebookInstanceLifecycleConfig: [
      "NotebookInstanceLifecycleConfigName",
      "NotebookInstanceLifecycleConfigName",
    ],
    PartnerApp: [
      "Arn",
      "AuthType",
      "BaseUrl",
      "ExecutionRoleArn",
      "KmsKeyId",
      "Name",
      "Type",
    ],
    Pipeline: ["PipelineName"],
    Project: [
      "CreationTime",
      "ProjectArn",
      "ProjectDescription",
      "ProjectId",
      "ProjectName",
      "ProjectStatus",
      "ServiceCatalogProvisioningDetails",
      "Tags",
    ],
    Space: [
      "DomainId",
      "OwnershipSettings",
      "SpaceArn",
      "SpaceName",
      "SpaceSharingSettings",
      "Url",
    ],
    StudioLifecycleConfig: [
      "StudioLifecycleConfigAppType",
      "StudioLifecycleConfigArn",
      "StudioLifecycleConfigContent",
      "StudioLifecycleConfigName",
      "Tags",
    ],
    UserProfile: [
      "DomainId",
      "SingleSignOnUserIdentifier",
      "SingleSignOnUserValue",
      "Tags",
      "UserProfileArn",
      "UserProfileName",
    ],
    Workteam: ["WorkforceName", "WorkteamName", "WorkteamName"],
  },
  Scheduler: {
    Schedule: ["Arn", "Name"],
    ScheduleGroup: [
      "Arn",
      "CreationDate",
      "LastModificationDate",
      "Name",
      "State",
    ],
  },
  SecretsManager: {
    ResourcePolicy: ["Id", "SecretId"],
    RotationSchedule: ["Id", "SecretId"],
    Secret: ["Id", "Name"],
    SecretTargetAttachment: ["Id", "SecretId"],
  },
  SecurityHub: {
    AutomationRule: ["CreatedAt", "CreatedBy", "RuleArn", "UpdatedAt"],
    ConfigurationPolicy: [
      "Arn",
      "CreatedAt",
      "Id",
      "ServiceEnabled",
      "UpdatedAt",
    ],
    DelegatedAdmin: ["AdminAccountId", "DelegatedAdminIdentifier", "Status"],
    FindingAggregator: ["FindingAggregationRegion", "FindingAggregatorArn"],
    Hub: ["ARN", "SubscribedAt"],
    Insight: ["InsightArn"],
    OrganizationConfiguration: [
      "MemberAccountLimitReached",
      "OrganizationConfigurationIdentifier",
      "Status",
      "StatusMessage",
    ],
    PolicyAssociation: [
      "AssociationIdentifier",
      "AssociationStatus",
      "AssociationStatusMessage",
      "AssociationType",
      "TargetId",
      "TargetType",
      "UpdatedAt",
    ],
    ProductSubscription: ["ProductArn", "ProductSubscriptionArn"],
    SecurityControl: ["SecurityControlId"],
    Standard: ["StandardsArn", "StandardsSubscriptionArn"],
  },
  SecurityLake: {
    AwsLogSource: ["DataLakeArn", "SourceName", "SourceVersion"],
    DataLake: ["Arn", "S3BucketArn"],
    Subscriber: [
      "DataLakeArn",
      "ResourceShareArn",
      "ResourceShareName",
      "S3BucketArn",
      "SubscriberArn",
      "SubscriberRoleArn",
    ],
    SubscriberNotification: ["SubscriberArn", "SubscriberEndpoint"],
  },
  ServiceCatalog: {
    AcceptedPortfolioShare: ["AcceptLanguage", "PortfolioId"],
    CloudFormationProduct: [
      "ProductName",
      "ProvisioningArtifactIds",
      "ProvisioningArtifactNames",
    ],
    CloudFormationProvisionedProduct: [
      "CloudformationStackArn",
      "NotificationArns",
      "Outputs",
      "ProvisionedProductId",
      "ProvisionedProductName",
      "RecordId",
    ],
    LaunchNotificationConstraint: ["PortfolioId", "ProductId"],
    LaunchRoleConstraint: ["PortfolioId", "ProductId"],
    LaunchTemplateConstraint: ["PortfolioId", "ProductId"],
    Portfolio: ["PortfolioName"],
    PortfolioPrincipalAssociation: [
      "AcceptLanguage",
      "PortfolioId",
      "PrincipalARN",
      "PrincipalType",
    ],
    PortfolioProductAssociation: [
      "AcceptLanguage",
      "PortfolioId",
      "ProductId",
      "SourcePortfolioId",
    ],
    PortfolioShare: ["AcceptLanguage", "AccountId", "PortfolioId"],
    ResourceUpdateConstraint: ["PortfolioId", "ProductId"],
    ServiceAction: ["Id"],
    ServiceActionAssociation: [
      "ProductId",
      "ProvisioningArtifactId",
      "ServiceActionId",
    ],
    StackSetConstraint: ["PortfolioId", "ProductId"],
    TagOption: ["Key", "Value"],
    TagOptionAssociation: ["ResourceId", "TagOptionId"],
  },
  ServiceCatalogAppRegistry: {
    Application: [
      "ApplicationName",
      "ApplicationTagKey",
      "ApplicationTagValue",
      "Arn",
      "Id",
    ],
    AttributeGroup: ["Arn", "Id"],
    AttributeGroupAssociation: [
      "Application",
      "ApplicationArn",
      "AttributeGroup",
      "AttributeGroupArn",
    ],
    ResourceAssociation: [
      "Application",
      "ApplicationArn",
      "Resource",
      "ResourceArn",
      "ResourceType",
    ],
  },
  ServiceDiscovery: {
    HttpNamespace: ["Arn", "Id", "Name"],
    Instance: ["InstanceId", "ServiceId"],
    PrivateDnsNamespace: ["Arn", "HostedZoneId", "Id", "Name", "Vpc"],
    PublicDnsNamespace: ["Arn", "HostedZoneId", "Id", "Name"],
    Service: [
      "Arn",
      "HealthCheckCustomConfig",
      "Id",
      "Name",
      "Name",
      "NamespaceId",
      "Type",
    ],
  },
  Shield: {
    DRTAccess: ["AccountId"],
    ProactiveEngagement: ["AccountId"],
    Protection: ["Name", "ProtectionArn", "ProtectionId", "ResourceArn"],
    ProtectionGroup: ["ProtectionGroupArn", "ProtectionGroupId"],
  },
  Signer: {
    ProfilePermission: [
      "Action",
      "Principal",
      "ProfileName",
      "ProfileVersion",
      "StatementId",
    ],
    SigningProfile: [
      "Arn",
      "PlatformId",
      "ProfileName",
      "ProfileVersion",
      "ProfileVersionArn",
      "SignatureValidityPeriod",
    ],
  },
  SimSpaceWeaver: {
    Simulation: [
      "DescribePayload",
      "MaximumDuration",
      "Name",
      "RoleArn",
      "SchemaS3Location",
      "SnapshotS3Location",
    ],
  },
  StepFunctions: {
    Activity: ["Arn", "EncryptionConfiguration", "Name", "Name"],
    StateMachine: [
      "Arn",
      "Name",
      "StateMachineName",
      "StateMachineRevisionId",
      "StateMachineType",
    ],
    StateMachineAlias: ["Arn", "Name"],
    StateMachineVersion: [
      "Arn",
      "Description",
      "StateMachineArn",
      "StateMachineRevisionId",
    ],
  },
  SupportApp: {
    AccountAlias: ["AccountAliasResourceId"],
    SlackChannelConfiguration: ["ChannelId", "TeamId"],
    SlackWorkspaceConfiguration: ["TeamId"],
  },
  Synthetics: {
    Canary: ["Code.SourceLocationArn", "Id", "Name", "State"],
    Group: ["Id", "Name"],
  },
  SystemsManagerSAP: {
    Application: [
      "Arn",
      "ComponentsInfo",
      "Credentials",
      "DatabaseArn",
      "Instances",
      "SapInstanceNumber",
      "Sid",
    ],
  },
  Timestream: {
    Database: ["Arn", "DatabaseName"],
    InfluxDBInstance: [
      "AllocatedStorage",
      "Arn",
      "AvailabilityZone",
      "Bucket",
      "DbStorageType",
      "Endpoint",
      "Id",
      "InfluxAuthParametersSecretArn",
      "Name",
      "NetworkType",
      "Organization",
      "Password",
      "PubliclyAccessible",
      "SecondaryAvailabilityZone",
      "Status",
      "Username",
      "VpcSecurityGroupIds",
      "VpcSubnetIds",
    ],
    ScheduledQuery: [
      "Arn",
      "ErrorReportConfiguration",
      "KmsKeyId",
      "NotificationConfiguration",
      "QueryString",
      "SQErrorReportConfiguration",
      "SQKmsKeyId",
      "SQName",
      "SQNotificationConfiguration",
      "SQQueryString",
      "SQScheduleConfiguration",
      "SQScheduledQueryExecutionRoleArn",
      "SQTargetConfiguration",
      "ScheduleConfiguration",
      "ScheduledQueryExecutionRoleArn",
      "ScheduledQueryName",
      "TargetConfiguration",
    ],
    Table: ["Arn", "DatabaseName", "Name", "TableName"],
  },
  Transfer: {
    Agreement: ["AgreementId", "Arn", "ServerId"],
    Certificate: [
      "Arn",
      "Certificate",
      "CertificateChain",
      "CertificateId",
      "NotAfterDate",
      "NotBeforeDate",
      "PrivateKey",
      "Serial",
      "Status",
      "Type",
    ],
    Connector: ["Arn", "ConnectorId", "ServiceManagedEgressIpAddresses"],
    Profile: ["Arn", "ProfileId", "ProfileType"],
    Server: [
      "Arn",
      "As2ServiceManagedEgressIpAddresses",
      "Domain",
      "IdentityProviderType",
      "ServerId",
      "State",
    ],
    User: ["Arn", "ServerId", "ServerId", "UserName", "UserName"],
    WebApp: [
      "Arn",
      "IdentityProviderDetails.ApplicationArn",
      "WebAppEndpointPolicy",
      "WebAppId",
    ],
    Workflow: ["Arn", "Description", "OnExceptionSteps", "Steps", "WorkflowId"],
  },
  VerifiedPermissions: {
    IdentitySource: ["IdentitySourceId", "PolicyStoreId"],
    Policy: ["PolicyId", "PolicyStoreId", "PolicyType"],
    PolicyStore: ["Arn", "PolicyStoreId"],
    PolicyTemplate: ["PolicyStoreId", "PolicyTemplateId"],
  },
  VoiceID: {
    Domain: ["DomainId"],
  },
  VpcLattice: {
    AccessLogSubscription: [
      "Arn",
      "Id",
      "ResourceArn",
      "ResourceId",
      "ResourceIdentifier",
    ],
    AuthPolicy: ["ResourceIdentifier", "State"],
    Listener: [
      "Arn",
      "Id",
      "Name",
      "Port",
      "Protocol",
      "ServiceArn",
      "ServiceId",
      "ServiceIdentifier",
    ],
    ResourceConfiguration: [
      "Arn",
      "Id",
      "ProtocolType",
      "ResourceConfigurationAuthType",
      "ResourceConfigurationType",
      "ResourceGatewayId",
    ],
    ResourceGateway: [
      "Arn",
      "Id",
      "IpAddressType",
      "Name",
      "SubnetIds",
      "VpcIdentifier",
    ],
    ResourcePolicy: ["ResourceArn"],
    Rule: ["Arn", "Id", "ListenerIdentifier", "Name", "ServiceIdentifier"],
    Service: [
      "Arn",
      "CreatedAt",
      "CustomDomainName",
      "DnsEntry.DomainName",
      "DnsEntry.HostedZoneId",
      "Id",
      "LastUpdatedAt",
      "Name",
      "Status",
    ],
    ServiceNetwork: ["Arn", "CreatedAt", "Id", "LastUpdatedAt", "Name"],
    ServiceNetworkResourceAssociation: [
      "Arn",
      "Id",
      "ResourceConfigurationId",
      "ServiceNetworkId",
    ],
    ServiceNetworkServiceAssociation: [
      "Arn",
      "CreatedAt",
      "DnsEntry.DomainName",
      "DnsEntry.HostedZoneId",
      "Id",
      "ServiceArn",
      "ServiceId",
      "ServiceIdentifier",
      "ServiceName",
      "ServiceNetworkArn",
      "ServiceNetworkId",
      "ServiceNetworkIdentifier",
      "ServiceNetworkName",
      "Status",
    ],
    ServiceNetworkVpcAssociation: [
      "Arn",
      "CreatedAt",
      "Id",
      "ServiceNetworkArn",
      "ServiceNetworkId",
      "ServiceNetworkIdentifier",
      "ServiceNetworkName",
      "Status",
      "VpcId",
      "VpcIdentifier",
    ],
    TargetGroup: [
      "Arn",
      "CreatedAt",
      "Id",
      "LastUpdatedAt",
      "Name",
      "Status",
      "Type",
    ],
  },
  WAF: {
    ByteMatchSet: ["Name"],
    IPSet: ["Name"],
    Rule: ["MetricName", "Name"],
    SizeConstraintSet: ["Name"],
    SqlInjectionMatchSet: ["Name"],
    WebACL: ["MetricName", "Name"],
    XssMatchSet: ["Name"],
  },
  WAFRegional: {
    ByteMatchSet: ["Name"],
    GeoMatchSet: ["Name"],
    IPSet: ["Name"],
    RateBasedRule: ["MetricName", "Name", "RateKey"],
    RegexPatternSet: ["Name"],
    Rule: ["MetricName", "Name"],
    SizeConstraintSet: ["Name"],
    SqlInjectionMatchSet: ["Name"],
    WebACL: ["MetricName", "Name"],
    WebACLAssociation: ["ResourceArn", "WebACLId"],
    XssMatchSet: ["Name"],
  },
  WAFv2: {
    IPSet: ["Arn", "Id", "Name", "Scope"],
    LoggingConfiguration: ["ManagedByFirewallManager", "ResourceArn"],
    RegexPatternSet: ["Arn", "Id", "Name", "Scope"],
    RuleGroup: ["Arn", "Id", "LabelNamespace", "Name", "Scope"],
    WebACL: ["Arn", "Capacity", "Id", "LabelNamespace", "Name", "Scope"],
    WebACLAssociation: ["ResourceArn", "WebACLArn"],
  },
  Wisdom: {
    AIAgent: [
      "AIAgentArn",
      "AIAgentId",
      "AssistantArn",
      "AssistantId",
      "ModifiedTimeSeconds",
      "Name",
      "Tags",
      "Type",
    ],
    AIAgentVersion: [
      "AIAgentArn",
      "AIAgentId",
      "AIAgentVersionId",
      "AssistantArn",
      "AssistantId",
      "ModifiedTimeSeconds",
      "VersionNumber",
    ],
    AIGuardrail: [
      "AIGuardrailArn",
      "AIGuardrailId",
      "AssistantArn",
      "AssistantId",
      "Name",
      "Tags",
    ],
    AIGuardrailVersion: [
      "AIGuardrailArn",
      "AIGuardrailId",
      "AIGuardrailVersionId",
      "AssistantArn",
      "AssistantId",
      "ModifiedTimeSeconds",
      "VersionNumber",
    ],
    AIPrompt: [
      "AIPromptArn",
      "AIPromptId",
      "ApiFormat",
      "AssistantArn",
      "AssistantId",
      "ModelId",
      "ModifiedTimeSeconds",
      "Name",
      "Tags",
      "TemplateType",
      "Type",
    ],
    AIPromptVersion: [
      "AIPromptArn",
      "AIPromptId",
      "AIPromptVersionId",
      "AssistantArn",
      "AssistantId",
      "ModifiedTimeSeconds",
      "VersionNumber",
    ],
    Assistant: [
      "AssistantArn",
      "AssistantId",
      "Description",
      "Name",
      "ServerSideEncryptionConfiguration",
      "Tags",
      "Type",
    ],
    AssistantAssociation: [
      "AssistantArn",
      "AssistantAssociationArn",
      "AssistantAssociationId",
      "AssistantId",
      "Association",
      "AssociationType",
      "Tags",
    ],
    KnowledgeBase: [
      "Description",
      "KnowledgeBaseArn",
      "KnowledgeBaseId",
      "KnowledgeBaseType",
      "Name",
      "ServerSideEncryptionConfiguration",
      "SourceConfiguration",
      "Tags",
    ],
    MessageTemplate: [
      "ChannelSubtype",
      "KnowledgeBaseArn",
      "MessageTemplateArn",
      "MessageTemplateContentSha256",
      "MessageTemplateId",
    ],
    MessageTemplateVersion: [
      "MessageTemplateArn",
      "MessageTemplateVersionArn",
      "MessageTemplateVersionNumber",
    ],
  },
  WorkSpaces: {
    ConnectionAlias: [
      "AliasId",
      "Associations",
      "ConnectionAliasState",
      "ConnectionString",
      "Tags",
    ],
    Workspace: ["UserName"],
    WorkspacesPool: ["CreatedAt", "PoolArn", "PoolId", "PoolName"],
  },
  WorkSpacesThinClient: {
    Environment: [
      "ActivationCode",
      "Arn",
      "CreatedAt",
      "DesktopArn",
      "DesktopType",
      "Id",
      "KmsKeyArn",
      "PendingSoftwareSetId",
      "PendingSoftwareSetVersion",
      "RegisteredDevicesCount",
      "SoftwareSetComplianceStatus",
      "UpdatedAt",
    ],
  },
  WorkSpacesWeb: {
    BrowserSettings: [
      "AdditionalEncryptionContext",
      "AssociatedPortalArns",
      "BrowserSettingsArn",
      "CustomerManagedKey",
    ],
    DataProtectionSettings: [
      "AdditionalEncryptionContext",
      "AssociatedPortalArns",
      "CreationDate",
      "CustomerManagedKey",
      "DataProtectionSettingsArn",
    ],
    IdentityProvider: ["IdentityProviderArn", "PortalArn"],
    IpAccessSettings: [
      "AdditionalEncryptionContext",
      "AssociatedPortalArns",
      "CreationDate",
      "CustomerManagedKey",
      "IpAccessSettingsArn",
    ],
    NetworkSettings: ["AssociatedPortalArns", "NetworkSettingsArn"],
    Portal: [
      "AdditionalEncryptionContext",
      "BrowserType",
      "CreationDate",
      "CustomerManagedKey",
      "PortalArn",
      "PortalEndpoint",
      "PortalStatus",
      "RendererType",
      "ServiceProviderSamlMetadata",
      "StatusReason",
    ],
    TrustStore: ["AssociatedPortalArns", "TrustStoreArn"],
    UserAccessLoggingSettings: [
      "AssociatedPortalArns",
      "UserAccessLoggingSettingsArn",
    ],
    UserSettings: ["AssociatedPortalArns", "UserSettingsArn"],
  },
  XRay: {
    Group: ["GroupARN"],
    ResourcePolicy: ["PolicyName"],
    SamplingRule: ["RuleARN"],
    TransactionSearchConfig: ["AccountId"],
  },
  Alexa: {
    ASKSkill: ["VendorId"],
  },
};

export default properties;
