// This file is generated by scripts/planetscale/generate.ts. Do not edit manually.

import type {
  Backup,
  CancelBranchChangeRequestData,
  CancelDeployRequestData,
  CloseDeployRequestData,
  CompleteErroredDeployData,
  CompleteGatedDeployRequestData,
  CompleteRevertData,
  CreateBackupData,
  CreateBranchData,
  CreateDatabaseData,
  CreateDeployRequestData,
  CreateKeyspaceData,
  CreateOauthTokenData,
  CreatePasswordData,
  CreateQueryPatternsReportData,
  CreateRoleData,
  CreateWebhookData,
  CreateWorkflowData,
  Database,
  DatabaseBranch,
  DatabaseBranchKeyspace,
  DatabaseBranchPassword,
  DatabaseDeployRequest,
  DatabaseWebhook,
  DeleteBackupData,
  DeleteBranchData,
  DeleteDatabaseData,
  DeleteKeyspaceData,
  DeleteOauthTokenData,
  DeletePasswordData,
  DeleteQueryPatternsReportData,
  DeleteRoleData,
  DeleteWebhookData,
  DemoteBranchData,
  DeployRequestReview,
  Deployment,
  DisableSafeMigrationsData,
  EnableSafeMigrationsData,
  GetBackupData,
  GetBranchData,
  GetBranchSchemaData,
  GetBranchSchemaResponse,
  GetCurrentUserData,
  GetDatabaseData,
  GetDatabaseThrottlerData,
  GetDeployQueueData,
  GetDeployRequestData,
  GetDeployRequestThrottlerData,
  GetDeploymentData,
  GetInvoiceData,
  GetInvoiceLineItemsData,
  GetKeyspaceData,
  GetKeyspaceRolloutStatusData,
  GetKeyspaceRolloutStatusResponse,
  GetKeyspaceVschemaData,
  GetKeyspaceVschemaResponse,
  GetOauthApplicationData,
  GetOauthTokenData,
  GetOrganizationData,
  GetPasswordData,
  GetQueryPatternsReportData,
  GetQueryPatternsReportStatusData,
  GetRoleData,
  GetWebhookData,
  GetWorkflowData,
  Invoice,
  LintBranchSchemaData,
  ListAuditLogsData,
  ListBackupsData,
  ListBranchChangeRequestsData,
  ListBranchesData,
  ListDatabaseRegionsData,
  ListDatabasesData,
  ListDeployOperationsData,
  ListDeployRequestReviewsData,
  ListDeployRequestsData,
  ListExtensionsData,
  ListExtensionsResponse,
  ListGeneratedQueryPatternsReportsData,
  ListInvoicesData,
  ListKeyspaceResizesData,
  ListKeyspacesData,
  ListOauthApplicationsData,
  ListOauthTokensData,
  ListOrganizationMembersData,
  ListOrganizationsData,
  ListParametersData,
  ListParametersResponse,
  ListPasswordsData,
  ListPublicRegionsData,
  ListReadOnlyRegionsData,
  ListRegionsForOrganizationData,
  ListRolesData,
  ListWebhooksData,
  ListWorkflowsData,
  OauthApplication,
  Organization,
  PaginatedAuditLogEvent,
  PaginatedBackup,
  PaginatedDatabase,
  PaginatedDatabaseBranch,
  PaginatedDatabaseBranchKeyspace,
  PaginatedDatabaseBranchPassword,
  PaginatedDatabaseBranchReadOnlyRegion,
  PaginatedDatabaseDeployRequest,
  PaginatedDatabaseWebhook,
  PaginatedDeployOperation,
  PaginatedDeployRequestReview,
  PaginatedDeployment,
  PaginatedInvoice,
  PaginatedKeyspaceResizeRequest,
  PaginatedLineItem,
  PaginatedOauthApplication,
  PaginatedOrganization,
  PaginatedOrganizationMembership,
  PaginatedPlanetscaleRegion,
  PaginatedPostgresClusterResizeRequest,
  PaginatedPostgresRole,
  PaginatedPublicPlanetscaleRegionSerializer,
  PaginatedQueryPatternsDownload,
  PaginatedSchemaLintError,
  PaginatedServiceToken,
  PaginatedWorkflow,
  PostgresClusterResizeRequest,
  PostgresRole,
  PromoteBranchData,
  QueryPatternsDownload,
  QueueDeployRequestData,
  RenewPasswordData,
  RenewRoleData,
  ReviewDeployRequestData,
  ServiceToken,
  SkipRevertPeriodData,
  TestWebhookData,
  ThrottlerConfigurations,
  UpdateAutoApplyData,
  UpdateBackupData,
  UpdateBranchChangeRequestData,
  UpdateBranchClusterConfigData,
  UpdateDatabaseSettingsData,
  UpdateDatabaseThrottlerData,
  UpdateDeployRequestThrottlerData,
  UpdateKeyspaceData,
  UpdateKeyspaceVschemaData,
  UpdateKeyspaceVschemaResponse,
  UpdateOrganizationData,
  UpdatePasswordData,
  UpdateRoleData,
  UpdateWebhookData,
  User,
  VerifyWorkflowData,
  Workflow,
  WorkflowCancelData,
  WorkflowCompleteData,
  WorkflowCutoverData,
  WorkflowRetryData,
  WorkflowReverseCutoverData,
  WorkflowReverseTrafficData,
  WorkflowSwitchPrimariesData,
  WorkflowSwitchReplicasData,
} from "./types.gen.ts";

import type { Secret } from "../../secret.ts";

export class PlanetScaleError extends Error {
  readonly code: string;
  readonly status: number;
  readonly url: string;
  readonly method: string;

  constructor(props: {
    code: string;
    message: string;
    status: number;
    url: string;
    method: string;
  }) {
    super(
      `A request to the PlanetScale API failed (${props.status} ${props.code}): ${props.message}`,
    );
    this.code = props.code;
    this.status = props.status;
    this.url = props.url;
    this.method = props.method;
  }
}

export interface PlanetScaleProps {
  /**
   * The base URL of the PlanetScale API. Defaults to https://api.planetscale.com/v1.
   */
  baseUrl?: string;
  /**
   * The ID of the service token to use for authentication. Defaults to the value of the PLANETSCALE_SERVICE_TOKEN_ID environment variable.
   */
  serviceTokenId?: Secret;
  /**
   * The secret of the service token to use for authentication. Defaults to the value of the PLANETSCALE_SERVICE_TOKEN environment variable.
   */
  serviceToken?: Secret;
  /**
   * The API key to use for authentication. Defaults to the value of the PLANETSCALE_API_TOKEN environment variable.
   * @deprecated Use serviceTokenId and serviceToken instead.
   */
  apiKey?: Secret;
  /**
   * The organization to use for authentication. Defaults to the value of the PLANETSCALE_ORGANIZATION or PLANETSCALE_ORG_ID environment variable.
   */
  organizationId?: string;
}

type ResultType = "json" | "full";

type RequestType<TParams, TResult extends ResultType> = Omit<TParams, "url"> & {
  /**
   * The type of response to return.
   * If "json", the response JSON will be returned and any errors will be thrown.
   * If "response", the entire response will be returned regardless of errors.
   * @default "json"
   */
  result?: TResult;
};

type ResponseType<T, TResult extends ResultType> = TResult extends "json"
  ? T
  :
      | { status: number; data: T; error: null; response: Response }
      | {
          status: number;
          data: null;
          error: PlanetScaleError;
          response: Response;
        };

export class PlanetScaleClient {
  private readonly baseUrl: string;
  private readonly token: string;

  constructor(props: PlanetScaleProps = {}) {
    this.baseUrl = props.baseUrl ?? "https://api.planetscale.com/v1";
    if (props.apiKey) {
      this.token = props.apiKey.unencrypted;
    } else if (props.serviceTokenId && props.serviceToken) {
      this.token = `${props.serviceTokenId.unencrypted}:${props.serviceToken.unencrypted}`;
    } else if (process.env.PLANETSCALE_API_TOKEN) {
      this.token = process.env.PLANETSCALE_API_TOKEN;
    } else if (
      process.env.PLANETSCALE_SERVICE_TOKEN_ID &&
      process.env.PLANETSCALE_SERVICE_TOKEN
    ) {
      this.token = `${process.env.PLANETSCALE_SERVICE_TOKEN_ID}:${process.env.PLANETSCALE_SERVICE_TOKEN}`;
    } else {
      throw new Error(
        "No authentication token provided for PlanetScale. Please provide an API key, service token ID and secret, or set the PLANETSCALE_SERVICE_TOKEN_ID and PLANETSCALE_SERVICE_TOKEN environment variables.",
      );
    }
  }

  async request<T, TResult extends ResultType = "json">(input: {
    method: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
    path: `/${string}`;
    params?: {
      body?: Record<string, unknown>;
      query?: Record<string, string | number | boolean>;
      path?: Record<string, string>;
      result?: TResult;
    };
  }): Promise<ResponseType<T, TResult>> {
    const url = formatURL({
      url: this.baseUrl + input.path,
      path: input.params?.path,
      query: input.params?.query,
    });
    const res = await fetch(url, {
      method: input.method,
      headers: {
        Authorization: this.token,
        ...(input.params?.body ? { "Content-Type": "application/json" } : {}),
      },
      ...(input.params?.body
        ? { body: JSON.stringify(input.params.body) }
        : {}),
    });
    if (!res.ok) {
      const json = (await res.json()) as { code: string; message: string };
      const error = new PlanetScaleError({
        code: json.code,
        message: json.message,
        status: res.status,
        url,
        method: input.method,
      });
      if (input.params?.result === "full") {
        return {
          status: res.status,
          data: null,
          error,
          response: res,
        } as ResponseType<T, TResult>;
      }
      throw error;
    }
    const json = res.status === 204 ? null : ((await res.json()) as T);
    return (
      input.params?.result === "full"
        ? { status: res.status, data: json, error: null, response: res }
        : json
    ) as ResponseType<T, TResult>;
  }

  organizations = {
    /**
     * List organizations
     *
     * @description When using a service token, returns the list of organizations the service token has access to. When using an OAuth token, returns the list of organizations the user has access to.
     * ### Authorization
     * A   OAuth token must have at least one of the following   scopes in order to use this API endpoint:
     *
     * **OAuth Scopes**
     *
     *  | Resource | Scopes |
     * | :------- | :---------- |
     * | User | `read_organizations` |
     */
    list: async <TResult extends ResultType = "json">(
      params?: RequestType<ListOrganizationsData, TResult>,
    ) => {
      return await this.request<PaginatedOrganization, TResult>({
        method: "GET",
        path: "/organizations",
        params,
      });
    },
    /**
     * Get an organization
     *
     * @description ### Authorization
     * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
     *
     * **Service Token Accesses**
     *  `read_organization`
     *
     * **OAuth Scopes**
     *
     *  | Resource | Scopes |
     * | :------- | :---------- |
     * | User | `read_organizations` |
     * | Organization | `read_organization` |
     */
    get: async <TResult extends ResultType = "json">(
      params: RequestType<GetOrganizationData, TResult>,
    ) => {
      return await this.request<Organization, TResult>({
        method: "GET",
        path: "/organizations/{name}",
        params,
      });
    },
    /**
     * Update an organization
     *
     * @description ### Authorization
     * A   OAuth token must have at least one of the following   scopes in order to use this API endpoint:
     *
     * **OAuth Scopes**
     *
     *  | Resource | Scopes |
     * | :------- | :---------- |
     * | Organization | `write_organization` |
     */
    patch: async <TResult extends ResultType = "json">(
      params: RequestType<UpdateOrganizationData, TResult>,
    ) => {
      return await this.request<Organization, TResult>({
        method: "PATCH",
        path: "/organizations/{name}",
        params,
      });
    },
    auditLog: {
      /**
       * List audit logs
       *
       * @description ### Authorization
       * A service token   must have at least one of the following access   in order to use this API endpoint:
       *
       * **Service Token Accesses**
       *  `read_audit_logs`
       */
      list: async <TResult extends ResultType = "json">(
        params: RequestType<ListAuditLogsData, TResult>,
      ) => {
        return await this.request<PaginatedAuditLogEvent, TResult>({
          method: "GET",
          path: "/organizations/{name}/audit-log",
          params,
        });
      },
    },
    regions: {
      /**
       * List regions for an organization
       *
       * @description ### Authorization
       * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
       *
       * **Service Token Accesses**
       *  `read_organization`
       *
       * **OAuth Scopes**
       *
       *  | Resource | Scopes |
       * | :------- | :---------- |
       * | User | `read_organizations` |
       * | Organization | `read_organization` |
       */
      list: async <TResult extends ResultType = "json">(
        params: RequestType<ListRegionsForOrganizationData, TResult>,
      ) => {
        return await this.request<PaginatedPlanetscaleRegion, TResult>({
          method: "GET",
          path: "/organizations/{name}/regions",
          params,
        });
      },
    },
    databases: {
      /**
       * List databases
       *
       * @description ### Authorization
       * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
       *
       * **Service Token Accesses**
       *  `read_database`, `delete_database`, `write_database`, `read_branch`, `delete_branch`, `create_branch`, `delete_production_branch`, `connect_branch`, `connect_production_branch`, `delete_branch_password`, `delete_production_branch_password`, `read_deploy_request`, `create_deploy_request`, `approve_deploy_request`, `read_schema_recommendations`, `close_schema_recommendations`, `read_comment`, `create_comment`, `restore_backup`, `restore_production_branch_backup`, `read_backups`, `write_backups`, `delete_backups`, `delete_production_branch_backups`, `write_branch_vschema`, `write_production_branch_vschema`
       *
       * **OAuth Scopes**
       *
       *  | Resource | Scopes |
       * | :------- | :---------- |
       * | Organization | `read_databases` |
       */
      list: async <TResult extends ResultType = "json">(
        params: RequestType<ListDatabasesData, TResult>,
      ) => {
        return await this.request<PaginatedDatabase, TResult>({
          method: "GET",
          path: "/organizations/{organization}/databases",
          params,
        });
      },
      /**
       * Create a database
       *
       * @description ### Authorization
       * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
       *
       * **Service Token Accesses**
       *  `create_databases`
       *
       * **OAuth Scopes**
       *
       *  | Resource | Scopes |
       * | :------- | :---------- |
       * | Organization | `create_databases` |
       */
      post: async <TResult extends ResultType = "json">(
        params: RequestType<CreateDatabaseData, TResult>,
      ) => {
        return await this.request<Database, TResult>({
          method: "POST",
          path: "/organizations/{organization}/databases",
          params,
        });
      },
      branches: {
        /**
         * List branches
         *
         * @description ### Authorization
         * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
         *
         * **Service Token Accesses**
         *  `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`
         *
         * **OAuth Scopes**
         *
         *  | Resource | Scopes |
         * | :------- | :---------- |
         * | Organization | `read_branches` |
         * | Database | `read_branches` |
         * | Branch | `read_branch` |
         */
        list: async <TResult extends ResultType = "json">(
          params: RequestType<ListBranchesData, TResult>,
        ) => {
          return await this.request<PaginatedDatabaseBranch, TResult>({
            method: "GET",
            path: "/organizations/{organization}/databases/{database}/branches",
            params,
          });
        },
        /**
         * Create a branch
         *
         * @description ### Authorization
         * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
         *
         * **Service Token Accesses**
         *  `create_branch`, `restore_production_branch_backup`, `restore_backup`
         *
         * **OAuth Scopes**
         *
         *  | Resource | Scopes |
         * | :------- | :---------- |
         * | Organization | `write_branches`, `restore_production_branch_backups`, `restore_backups` |
         * | Database | `write_branches`, `restore_production_branch_backups`, `restore_backups` |
         * | Branch | `restore_backups` |
         */
        post: async <TResult extends ResultType = "json">(
          params: RequestType<CreateBranchData, TResult>,
        ) => {
          return await this.request<DatabaseBranch, TResult>({
            method: "POST",
            path: "/organizations/{organization}/databases/{database}/branches",
            params,
          });
        },
        backups: {
          /**
           * List backups
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `read_backups`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `read_backups` |
           * | Database | `read_backups` |
           * | Branch | `read_backups` |
           */
          list: async <TResult extends ResultType = "json">(
            params: RequestType<ListBackupsData, TResult>,
          ) => {
            return await this.request<PaginatedBackup, TResult>({
              method: "GET",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/backups",
              params,
            });
          },
          /**
           * Create a backup
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `write_backups`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `write_backups` |
           * | Database | `write_backups` |
           * | Branch | `write_backups` |
           */
          post: async <TResult extends ResultType = "json">(
            params: RequestType<CreateBackupData, TResult>,
          ) => {
            return await this.request<Backup, TResult>({
              method: "POST",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/backups",
              params,
            });
          },
          /**
           * Get a backup
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `read_backups`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `read_backups` |
           * | Database | `read_backups` |
           * | Branch | `read_backups` |
           */
          get: async <TResult extends ResultType = "json">(
            params: RequestType<GetBackupData, TResult>,
          ) => {
            return await this.request<Backup, TResult>({
              method: "GET",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/backups/{id}",
              params,
            });
          },
          /**
           * Update a backup
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `write_backups`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `write_backups` |
           * | Database | `write_backups` |
           * | Branch | `write_backups` |
           */
          patch: async <TResult extends ResultType = "json">(
            params: RequestType<UpdateBackupData, TResult>,
          ) => {
            return await this.request<Backup, TResult>({
              method: "PATCH",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/backups/{id}",
              params,
            });
          },
          /**
           * Delete a backup
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `delete_backups`, `delete_production_branch_backups`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `delete_backups`, `delete_production_branch_backups` |
           * | Database | `delete_backups`, `delete_production_branch_backups` |
           * | Branch | `delete_backups` |
           */
          delete: async <TResult extends ResultType = "json">(
            params: RequestType<DeleteBackupData, TResult>,
          ) => {
            return await this.request<unknown, TResult>({
              method: "DELETE",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/backups/{id}",
              params,
            });
          },
        },
        changes: {
          /**
           * Get branch change requests
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `read_branches` |
           * | Database | `read_branches` |
           * | Branch | `read_branch` |
           */
          list: async <TResult extends ResultType = "json">(
            params: RequestType<ListBranchChangeRequestsData, TResult>,
          ) => {
            return await this.request<
              PaginatedPostgresClusterResizeRequest,
              TResult
            >({
              method: "GET",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/changes",
              params,
            });
          },
          /**
           * Upsert a change request
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `write_database`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `write_databases` |
           * | Database | `write_database` |
           */
          patch: async <TResult extends ResultType = "json">(
            params: RequestType<UpdateBranchChangeRequestData, TResult>,
          ) => {
            return await this.request<PostgresClusterResizeRequest, TResult>({
              method: "PATCH",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/changes",
              params,
            });
          },
        },
        extensions: {
          /**
           * List cluster extensions
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `read_branches` |
           * | Database | `read_branches` |
           * | Branch | `read_branch` |
           */
          list: async <TResult extends ResultType = "json">(
            params: RequestType<ListExtensionsData, TResult>,
          ) => {
            return await this.request<ListExtensionsResponse, TResult>({
              method: "GET",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/extensions",
              params,
            });
          },
        },
        keyspaces: {
          /**
           * Get keyspaces
           *
           */
          list: async <TResult extends ResultType = "json">(
            params: RequestType<ListKeyspacesData, TResult>,
          ) => {
            return await this.request<PaginatedDatabaseBranchKeyspace, TResult>(
              {
                method: "GET",
                path: "/organizations/{organization}/databases/{database}/branches/{branch}/keyspaces",
                params,
              },
            );
          },
          /**
           * Create a keyspace
           *
           */
          post: async <TResult extends ResultType = "json">(
            params: RequestType<CreateKeyspaceData, TResult>,
          ) => {
            return await this.request<DatabaseBranchKeyspace, TResult>({
              method: "POST",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/keyspaces",
              params,
            });
          },
          vschema: {
            /**
             * Get the VSchema for the keyspace
             *
             * @description ### Authorization
             * A service token   must have at least one of the following access   in order to use this API endpoint:
             *
             * **Service Token Accesses**
             *  `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`
             */
            get: async <TResult extends ResultType = "json">(
              params: RequestType<GetKeyspaceVschemaData, TResult>,
            ) => {
              return await this.request<GetKeyspaceVschemaResponse, TResult>({
                method: "GET",
                path: "/organizations/{organization}/databases/{database}/branches/{branch}/keyspaces/{keyspace}/vschema",
                params,
              });
            },
            /**
             * Update the VSchema for the keyspace
             *
             * @description ### Authorization
             * A service token   must have at least one of the following access   in order to use this API endpoint:
             *
             * **Service Token Accesses**
             *  `write_production_branch_vschema`, `write_branch_vschema`
             */
            patch: async <TResult extends ResultType = "json">(
              params: RequestType<UpdateKeyspaceVschemaData, TResult>,
            ) => {
              return await this.request<UpdateKeyspaceVschemaResponse, TResult>(
                {
                  method: "PATCH",
                  path: "/organizations/{organization}/databases/{database}/branches/{branch}/keyspaces/{keyspace}/vschema",
                  params,
                },
              );
            },
          },
          /**
           * Get a keyspace
           *
           */
          get: async <TResult extends ResultType = "json">(
            params: RequestType<GetKeyspaceData, TResult>,
          ) => {
            return await this.request<DatabaseBranchKeyspace, TResult>({
              method: "GET",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/keyspaces/{name}",
              params,
            });
          },
          /**
           * Configure keyspace settings
           *
           */
          patch: async <TResult extends ResultType = "json">(
            params: RequestType<UpdateKeyspaceData, TResult>,
          ) => {
            return await this.request<DatabaseBranchKeyspace, TResult>({
              method: "PATCH",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/keyspaces/{name}",
              params,
            });
          },
          /**
           * Delete a keyspace
           *
           */
          delete: async <TResult extends ResultType = "json">(
            params: RequestType<DeleteKeyspaceData, TResult>,
          ) => {
            return await this.request<unknown, TResult>({
              method: "DELETE",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/keyspaces/{name}",
              params,
            });
          },
          rolloutStatus: {
            /**
             * Get keyspace rollout status
             *
             */
            get: async <TResult extends ResultType = "json">(
              params: RequestType<GetKeyspaceRolloutStatusData, TResult>,
            ) => {
              return await this.request<
                GetKeyspaceRolloutStatusResponse,
                TResult
              >({
                method: "GET",
                path: "/organizations/{organization}/databases/{database}/branches/{branch}/keyspaces/{name}/rollout-status",
                params,
              });
            },
          },
          resizes: {
            /**
             * List keyspace resizes
             *
             */
            list: async <TResult extends ResultType = "json">(
              params: RequestType<ListKeyspaceResizesData, TResult>,
            ) => {
              return await this.request<
                PaginatedKeyspaceResizeRequest,
                TResult
              >({
                method: "GET",
                path: "/organizations/{organization}/databases/{database}/branches/{branch}/keyspaces/{name}/resizes",
                params,
              });
            },
          },
        },
        parameters: {
          /**
           * List cluster parameters
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `read_branches` |
           * | Database | `read_branches` |
           * | Branch | `read_branch` |
           */
          list: async <TResult extends ResultType = "json">(
            params: RequestType<ListParametersData, TResult>,
          ) => {
            return await this.request<ListParametersResponse, TResult>({
              method: "GET",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/parameters",
              params,
            });
          },
        },
        passwords: {
          /**
           * List passwords
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `manage_passwords`, `manage_production_branch_passwords` |
           * | Database | `manage_passwords`, `manage_production_branch_passwords` |
           * | Branch | `manage_passwords` |
           */
          list: async <TResult extends ResultType = "json">(
            params: RequestType<ListPasswordsData, TResult>,
          ) => {
            return await this.request<PaginatedDatabaseBranchPassword, TResult>(
              {
                method: "GET",
                path: "/organizations/{organization}/databases/{database}/branches/{branch}/passwords",
                params,
              },
            );
          },
          /**
           * Create a password
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `connect_production_branch`, `connect_branch`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `manage_passwords`, `manage_production_branch_passwords` |
           * | Database | `manage_passwords`, `manage_production_branch_passwords` |
           * | Branch | `manage_passwords` |
           */
          post: async <TResult extends ResultType = "json">(
            params: RequestType<CreatePasswordData, TResult>,
          ) => {
            return await this.request<DatabaseBranchPassword, TResult>({
              method: "POST",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/passwords",
              params,
            });
          },
          /**
           * Get a password
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `manage_passwords`, `manage_production_branch_passwords` |
           * | Database | `manage_passwords`, `manage_production_branch_passwords` |
           * | Branch | `manage_passwords` |
           */
          get: async <TResult extends ResultType = "json">(
            params: RequestType<GetPasswordData, TResult>,
          ) => {
            return await this.request<DatabaseBranchPassword, TResult>({
              method: "GET",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}",
              params,
            });
          },
          /**
           * Update a password
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `connect_production_branch`, `connect_branch`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `manage_passwords`, `manage_production_branch_passwords` |
           * | Database | `manage_passwords`, `manage_production_branch_passwords` |
           * | Branch | `manage_passwords` |
           */
          patch: async <TResult extends ResultType = "json">(
            params: RequestType<UpdatePasswordData, TResult>,
          ) => {
            return await this.request<DatabaseBranchPassword, TResult>({
              method: "PATCH",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}",
              params,
            });
          },
          /**
           * Delete a password
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `delete_production_branch_password`, `delete_branch_password`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `manage_passwords`, `manage_production_branch_passwords` |
           * | Database | `manage_passwords`, `manage_production_branch_passwords` |
           * | Branch | `manage_passwords` |
           */
          delete: async <TResult extends ResultType = "json">(
            params: RequestType<DeletePasswordData, TResult>,
          ) => {
            return await this.request<unknown, TResult>({
              method: "DELETE",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}",
              params,
            });
          },
          renew: {
            /**
             * Renew a password
             *
             * @description ### Authorization
             * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
             *
             * **Service Token Accesses**
             *  `connect_production_branch`, `connect_branch`
             *
             * **OAuth Scopes**
             *
             *  | Resource | Scopes |
             * | :------- | :---------- |
             * | Organization | `manage_passwords`, `manage_production_branch_passwords` |
             * | Database | `manage_passwords`, `manage_production_branch_passwords` |
             * | Branch | `manage_passwords` |
             */
            post: async <TResult extends ResultType = "json">(
              params: RequestType<RenewPasswordData, TResult>,
            ) => {
              return await this.request<DatabaseBranchPassword, TResult>({
                method: "POST",
                path: "/organizations/{organization}/databases/{database}/branches/{branch}/passwords/{id}/renew",
                params,
              });
            },
          },
        },
        queryPatterns: {
          /**
           * List generated query patterns reports
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `read_branch`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `read_branches` |
           * | Database | `read_branches` |
           * | Branch | `read_branch` |
           */
          list: async <TResult extends ResultType = "json">(
            params: RequestType<ListGeneratedQueryPatternsReportsData, TResult>,
          ) => {
            return await this.request<PaginatedQueryPatternsDownload, TResult>({
              method: "GET",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/query-patterns",
              params,
            });
          },
          /**
           * Create a new query patterns report
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `read_branch`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `read_branches` |
           * | Database | `read_branches` |
           * | Branch | `read_branch` |
           */
          post: async <TResult extends ResultType = "json">(
            params: RequestType<CreateQueryPatternsReportData, TResult>,
          ) => {
            return await this.request<QueryPatternsDownload, TResult>({
              method: "POST",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/query-patterns",
              params,
            });
          },
          /**
           * Show the status of a query patterns report
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `read_branch`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `read_branches` |
           * | Database | `read_branches` |
           * | Branch | `read_branch` |
           */
          get: async <TResult extends ResultType = "json">(
            params: RequestType<GetQueryPatternsReportStatusData, TResult>,
          ) => {
            return await this.request<QueryPatternsDownload, TResult>({
              method: "GET",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/query-patterns/{id}",
              params,
            });
          },
          /**
           * Delete a query patterns report
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `read_branch`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `read_branches` |
           * | Database | `read_branches` |
           * | Branch | `read_branch` |
           */
          delete: async <TResult extends ResultType = "json">(
            params: RequestType<DeleteQueryPatternsReportData, TResult>,
          ) => {
            return await this.request<unknown, TResult>({
              method: "DELETE",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/query-patterns/{id}",
              params,
            });
          },
          download: {
            /**
             * Download a finished query patterns report
             *
             * @description ### Authorization
             * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
             *
             * **Service Token Accesses**
             *  `read_branch`
             *
             * **OAuth Scopes**
             *
             *  | Resource | Scopes |
             * | :------- | :---------- |
             * | Organization | `read_branches` |
             * | Database | `read_branches` |
             * | Branch | `read_branch` |
             */
            get: async <TResult extends ResultType = "json">(
              params: RequestType<GetQueryPatternsReportData, TResult>,
            ) => {
              return await this.request<QueryPatternsDownload, TResult>({
                method: "GET",
                path: "/organizations/{organization}/databases/{database}/branches/{branch}/query-patterns/{id}/download",
                params,
              });
            },
          },
        },
        resizes: {
          /**
           * Cancel a change request
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `write_database`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `write_databases` |
           * | Database | `write_database` |
           */
          delete: async <TResult extends ResultType = "json">(
            params: RequestType<CancelBranchChangeRequestData, TResult>,
          ) => {
            return await this.request<unknown, TResult>({
              method: "DELETE",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/resizes",
              params,
            });
          },
        },
        roles: {
          /**
           * List roles
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `manage_passwords`, `manage_production_branch_passwords` |
           * | Database | `manage_passwords`, `manage_production_branch_passwords` |
           * | Branch | `manage_passwords` |
           */
          list: async <TResult extends ResultType = "json">(
            params: RequestType<ListRolesData, TResult>,
          ) => {
            return await this.request<PaginatedPostgresRole, TResult>({
              method: "GET",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/roles",
              params,
            });
          },
          /**
           * Create role credentials
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `create_production_branch_password`, `create_branch_password`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `manage_passwords`, `manage_production_branch_passwords` |
           * | Database | `manage_passwords`, `manage_production_branch_passwords` |
           * | Branch | `manage_passwords` |
           */
          post: async <TResult extends ResultType = "json">(
            params: RequestType<CreateRoleData, TResult>,
          ) => {
            return await this.request<PostgresRole, TResult>({
              method: "POST",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/roles",
              params,
            });
          },
          /**
           * Get a role
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `manage_passwords`, `manage_production_branch_passwords` |
           * | Database | `manage_passwords`, `manage_production_branch_passwords` |
           * | Branch | `manage_passwords` |
           */
          get: async <TResult extends ResultType = "json">(
            params: RequestType<GetRoleData, TResult>,
          ) => {
            return await this.request<PostgresRole, TResult>({
              method: "GET",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/roles/{id}",
              params,
            });
          },
          /**
           * Update role name
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `create_production_branch_password`, `create_branch_password`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `manage_passwords`, `manage_production_branch_passwords` |
           * | Database | `manage_passwords`, `manage_production_branch_passwords` |
           * | Branch | `manage_passwords` |
           */
          patch: async <TResult extends ResultType = "json">(
            params: RequestType<UpdateRoleData, TResult>,
          ) => {
            return await this.request<PostgresRole, TResult>({
              method: "PATCH",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/roles/{id}",
              params,
            });
          },
          /**
           * Delete role credentials
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `delete_production_branch_password`, `delete_branch_password`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `manage_passwords`, `manage_production_branch_passwords` |
           * | Database | `manage_passwords`, `manage_production_branch_passwords` |
           * | Branch | `manage_passwords` |
           */
          delete: async <TResult extends ResultType = "json">(
            params: RequestType<DeleteRoleData, TResult>,
          ) => {
            return await this.request<unknown, TResult>({
              method: "DELETE",
              path: "/organizations/{organization}/databases/{database}/branches/{branch}/roles/{id}",
              params,
            });
          },
          renew: {
            /**
             * Renew role expiration
             *
             * @description ### Authorization
             * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
             *
             * **Service Token Accesses**
             *  `create_production_branch_password`, `create_branch_password`
             *
             * **OAuth Scopes**
             *
             *  | Resource | Scopes |
             * | :------- | :---------- |
             * | Organization | `manage_passwords`, `manage_production_branch_passwords` |
             * | Database | `manage_passwords`, `manage_production_branch_passwords` |
             * | Branch | `manage_passwords` |
             */
            post: async <TResult extends ResultType = "json">(
              params: RequestType<RenewRoleData, TResult>,
            ) => {
              return await this.request<PostgresRole, TResult>({
                method: "POST",
                path: "/organizations/{organization}/databases/{database}/branches/{branch}/roles/{id}/renew",
                params,
              });
            },
          },
        },
        /**
         * Get a branch
         *
         * @description ### Authorization
         * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
         *
         * **Service Token Accesses**
         *  `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`
         *
         * **OAuth Scopes**
         *
         *  | Resource | Scopes |
         * | :------- | :---------- |
         * | Organization | `read_branches` |
         * | Database | `read_branches` |
         * | Branch | `read_branch` |
         */
        get: async <TResult extends ResultType = "json">(
          params: RequestType<GetBranchData, TResult>,
        ) => {
          return await this.request<DatabaseBranch, TResult>({
            method: "GET",
            path: "/organizations/{organization}/databases/{database}/branches/{name}",
            params,
          });
        },
        /**
         * Delete a branch
         *
         * @description ### Authorization
         * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
         *
         * **Service Token Accesses**
         *  `delete_branch`
         *
         * **OAuth Scopes**
         *
         *  | Resource | Scopes |
         * | :------- | :---------- |
         * | Organization | `delete_branches`, `delete_production_branches` |
         * | Database | `delete_branches`, `delete_production_branches` |
         * | Branch | `delete_branch` |
         */
        delete: async <TResult extends ResultType = "json">(
          params: RequestType<DeleteBranchData, TResult>,
        ) => {
          return await this.request<unknown, TResult>({
            method: "DELETE",
            path: "/organizations/{organization}/databases/{database}/branches/{name}",
            params,
          });
        },
        cluster: {
          /**
           * Change a branch cluster configuration
           *
           * @description ### Authorization
           * A service token   must have at least one of the following access   in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `write_database`
           */
          patch: async <TResult extends ResultType = "json">(
            params: RequestType<UpdateBranchClusterConfigData, TResult>,
          ) => {
            return await this.request<unknown, TResult>({
              method: "PATCH",
              path: "/organizations/{organization}/databases/{database}/branches/{name}/cluster",
              params,
            });
          },
        },
        demote: {
          /**
           * Demote a branch
           *
           * @description Demotes a branch from production to development
           * ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `connect_production_branch`, `demote_branches`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `demote_branches` |
           * | Database | `demote_branches` |
           */
          post: async <TResult extends ResultType = "json">(
            params: RequestType<DemoteBranchData, TResult>,
          ) => {
            return await this.request<DatabaseBranch, TResult>({
              method: "POST",
              path: "/organizations/{organization}/databases/{database}/branches/{name}/demote",
              params,
            });
          },
        },
        promote: {
          /**
           * Promote a branch
           *
           * @description Promotes a branch from development to production
           * ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `connect_production_branch`, `promote_branches`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `promote_branches` |
           * | Database | `promote_branches` |
           */
          post: async <TResult extends ResultType = "json">(
            params: RequestType<PromoteBranchData, TResult>,
          ) => {
            return await this.request<DatabaseBranch, TResult>({
              method: "POST",
              path: "/organizations/{organization}/databases/{database}/branches/{name}/promote",
              params,
            });
          },
        },
        safeMigrations: {
          /**
           * Enable safe migrations for a branch
           *
           */
          post: async <TResult extends ResultType = "json">(
            params: RequestType<EnableSafeMigrationsData, TResult>,
          ) => {
            return await this.request<DatabaseBranch, TResult>({
              method: "POST",
              path: "/organizations/{organization}/databases/{database}/branches/{name}/safe-migrations",
              params,
            });
          },
          /**
           * Disable safe migrations for a branch
           *
           */
          delete: async <TResult extends ResultType = "json">(
            params: RequestType<DisableSafeMigrationsData, TResult>,
          ) => {
            return await this.request<DatabaseBranch, TResult>({
              method: "DELETE",
              path: "/organizations/{organization}/databases/{database}/branches/{name}/safe-migrations",
              params,
            });
          },
        },
        schema: {
          /**
           * Get a branch schema
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `read_branches` |
           * | Database | `read_branches` |
           * | Branch | `read_branch` |
           */
          get: async <TResult extends ResultType = "json">(
            params: RequestType<GetBranchSchemaData, TResult>,
          ) => {
            return await this.request<GetBranchSchemaResponse, TResult>({
              method: "GET",
              path: "/organizations/{organization}/databases/{database}/branches/{name}/schema",
              params,
            });
          },
          lint: {
            /**
             * Lint a branch schema
             *
             * @description ### Authorization
             * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
             *
             * **Service Token Accesses**
             *  `read_branch`, `delete_branch`, `create_branch`, `connect_production_branch`, `connect_branch`
             *
             * **OAuth Scopes**
             *
             *  | Resource | Scopes |
             * | :------- | :---------- |
             * | Organization | `read_branches` |
             * | Database | `read_branches` |
             * | Branch | `read_branch` |
             */
            get: async <TResult extends ResultType = "json">(
              params: RequestType<LintBranchSchemaData, TResult>,
            ) => {
              return await this.request<PaginatedSchemaLintError, TResult>({
                method: "GET",
                path: "/organizations/{organization}/databases/{database}/branches/{name}/schema/lint",
                params,
              });
            },
          },
        },
      },
      deployQueue: {
        /**
         * Get the deploy queue
         *
         * @description The deploy queue returns the current list of deploy requests in the order they will be deployed.
         */
        get: async <TResult extends ResultType = "json">(
          params: RequestType<GetDeployQueueData, TResult>,
        ) => {
          return await this.request<PaginatedDeployment, TResult>({
            method: "GET",
            path: "/organizations/{organization}/databases/{database}/deploy-queue",
            params,
          });
        },
      },
      deployRequests: {
        /**
         * List deploy requests
         *
         * @description List deploy requests for a database
         * ### Authorization
         * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
         *
         * **Service Token Accesses**
         *  `read_deploy_request`
         *
         * **OAuth Scopes**
         *
         *  | Resource | Scopes |
         * | :------- | :---------- |
         * | Organization | `read_deploy_requests` |
         * | Database | `read_deploy_requests` |
         */
        list: async <TResult extends ResultType = "json">(
          params: RequestType<ListDeployRequestsData, TResult>,
        ) => {
          return await this.request<PaginatedDatabaseDeployRequest, TResult>({
            method: "GET",
            path: "/organizations/{organization}/databases/{database}/deploy-requests",
            params,
          });
        },
        /**
         * Create a deploy request
         *
         * @description ### Authorization
         * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
         *
         * **Service Token Accesses**
         *  `read_deploy_request`, `create_deploy_requests`
         *
         * **OAuth Scopes**
         *
         *  | Resource | Scopes |
         * | :------- | :---------- |
         * | Organization | `write_deploy_requests` |
         * | Database | `write_deploy_requests` |
         */
        post: async <TResult extends ResultType = "json">(
          params: RequestType<CreateDeployRequestData, TResult>,
        ) => {
          return await this.request<DatabaseDeployRequest, TResult>({
            method: "POST",
            path: "/organizations/{organization}/databases/{database}/deploy-requests",
            params,
          });
        },
        /**
         * Get a deploy request
         *
         * @description ### Authorization
         * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
         *
         * **Service Token Accesses**
         *  `read_deploy_request`
         *
         * **OAuth Scopes**
         *
         *  | Resource | Scopes |
         * | :------- | :---------- |
         * | Organization | `read_deploy_requests` |
         * | Database | `read_deploy_requests` |
         */
        get: async <TResult extends ResultType = "json">(
          params: RequestType<GetDeployRequestData, TResult>,
        ) => {
          return await this.request<DatabaseDeployRequest, TResult>({
            method: "GET",
            path: "/organizations/{organization}/databases/{database}/deploy-requests/{number}",
            params,
          });
        },
        /**
         * Close a deploy request
         *
         * @description ### Authorization
         * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
         *
         * **Service Token Accesses**
         *  `read_deploy_request`
         *
         * **OAuth Scopes**
         *
         *  | Resource | Scopes |
         * | :------- | :---------- |
         * | Organization | `write_deploy_requests` |
         * | Database | `write_deploy_requests` |
         */
        patch: async <TResult extends ResultType = "json">(
          params: RequestType<CloseDeployRequestData, TResult>,
        ) => {
          return await this.request<DatabaseDeployRequest, TResult>({
            method: "PATCH",
            path: "/organizations/{organization}/databases/{database}/deploy-requests/{number}",
            params,
          });
        },
        applyDeploy: {
          /**
           * Complete a gated deploy request
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `read_deploy_request`, `create_deploy_request`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `deploy_deploy_requests` |
           * | Database | `deploy_deploy_requests` |
           */
          post: async <TResult extends ResultType = "json">(
            params: RequestType<CompleteGatedDeployRequestData, TResult>,
          ) => {
            return await this.request<DatabaseDeployRequest, TResult>({
              method: "POST",
              path: "/organizations/{organization}/databases/{database}/deploy-requests/{number}/apply-deploy",
              params,
            });
          },
        },
        autoApply: {
          /**
           * Update auto-apply for deploy request
           *
           * @description Enables or disabled the auto-apply setting for a deploy request
           * ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `read_deploy_request`, `create_deploy_request`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `deploy_deploy_requests` |
           * | Database | `deploy_deploy_requests` |
           */
          put: async <TResult extends ResultType = "json">(
            params: RequestType<UpdateAutoApplyData, TResult>,
          ) => {
            return await this.request<DatabaseDeployRequest, TResult>({
              method: "PUT",
              path: "/organizations/{organization}/databases/{database}/deploy-requests/{number}/auto-apply",
              params,
            });
          },
        },
        cancel: {
          /**
           * Cancel a queued deploy request
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `read_deploy_request`, `create_deploy_request`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `deploy_deploy_requests` |
           * | Database | `deploy_deploy_requests` |
           */
          post: async <TResult extends ResultType = "json">(
            params: RequestType<CancelDeployRequestData, TResult>,
          ) => {
            return await this.request<DatabaseDeployRequest, TResult>({
              method: "POST",
              path: "/organizations/{organization}/databases/{database}/deploy-requests/{number}/cancel",
              params,
            });
          },
        },
        completeDeploy: {
          /**
           * Complete an errored deploy
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `read_deploy_request`, `create_deploy_request`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `deploy_deploy_requests` |
           * | Database | `deploy_deploy_requests` |
           */
          post: async <TResult extends ResultType = "json">(
            params: RequestType<CompleteErroredDeployData, TResult>,
          ) => {
            return await this.request<DatabaseDeployRequest, TResult>({
              method: "POST",
              path: "/organizations/{organization}/databases/{database}/deploy-requests/{number}/complete-deploy",
              params,
            });
          },
        },
        deploy: {
          /**
           * Queue a deploy request
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `read_deploy_request`, `create_deploy_request`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `deploy_deploy_requests` |
           * | Database | `deploy_deploy_requests` |
           */
          post: async <TResult extends ResultType = "json">(
            params: RequestType<QueueDeployRequestData, TResult>,
          ) => {
            return await this.request<DatabaseDeployRequest, TResult>({
              method: "POST",
              path: "/organizations/{organization}/databases/{database}/deploy-requests/{number}/deploy",
              params,
            });
          },
        },
        deployment: {
          /**
           * Get a deployment
           *
           * @description Get the deployment for a deploy request
           * ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `read_deploy_request`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `read_deploy_requests` |
           * | Database | `read_deploy_requests` |
           */
          get: async <TResult extends ResultType = "json">(
            params: RequestType<GetDeploymentData, TResult>,
          ) => {
            return await this.request<Deployment, TResult>({
              method: "GET",
              path: "/organizations/{organization}/databases/{database}/deploy-requests/{number}/deployment",
              params,
            });
          },
        },
        operations: {
          /**
           * List deploy operations
           *
           * @description List deploy operations for a deploy request
           * ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `read_deploy_request`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `read_deploy_requests` |
           * | Database | `read_deploy_requests` |
           */
          list: async <TResult extends ResultType = "json">(
            params: RequestType<ListDeployOperationsData, TResult>,
          ) => {
            return await this.request<PaginatedDeployOperation, TResult>({
              method: "GET",
              path: "/organizations/{organization}/databases/{database}/deploy-requests/{number}/operations",
              params,
            });
          },
        },
        revert: {
          /**
           * Complete a revert
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `read_deploy_request`, `create_deploy_request`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `deploy_deploy_requests` |
           * | Database | `deploy_deploy_requests` |
           */
          post: async <TResult extends ResultType = "json">(
            params: RequestType<CompleteRevertData, TResult>,
          ) => {
            return await this.request<DatabaseDeployRequest, TResult>({
              method: "POST",
              path: "/organizations/{organization}/databases/{database}/deploy-requests/{number}/revert",
              params,
            });
          },
        },
        reviews: {
          /**
           * List deploy request reviews
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `read_deploy_request`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `read_deploy_requests` |
           * | Database | `read_deploy_requests` |
           */
          list: async <TResult extends ResultType = "json">(
            params: RequestType<ListDeployRequestReviewsData, TResult>,
          ) => {
            return await this.request<PaginatedDeployRequestReview, TResult>({
              method: "GET",
              path: "/organizations/{organization}/databases/{database}/deploy-requests/{number}/reviews",
              params,
            });
          },
          /**
           * Review a deploy request
           *
           * @description Review a deploy request by either approving or commenting on the deploy request
           * ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `approve_deploy_request`, `review_deploy_request`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `approve_deploy_requests` |
           * | Database | `approve_deploy_requests` |
           */
          post: async <TResult extends ResultType = "json">(
            params: RequestType<ReviewDeployRequestData, TResult>,
          ) => {
            return await this.request<DeployRequestReview, TResult>({
              method: "POST",
              path: "/organizations/{organization}/databases/{database}/deploy-requests/{number}/reviews",
              params,
            });
          },
        },
        skipRevert: {
          /**
           * Skip revert period
           *
           * @description Skips the revert period for a deploy request
           * ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `read_deploy_request`, `create_deploy_request`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `deploy_deploy_requests` |
           * | Database | `deploy_deploy_requests` |
           */
          post: async <TResult extends ResultType = "json">(
            params: RequestType<SkipRevertPeriodData, TResult>,
          ) => {
            return await this.request<DatabaseDeployRequest, TResult>({
              method: "POST",
              path: "/organizations/{organization}/databases/{database}/deploy-requests/{number}/skip-revert",
              params,
            });
          },
        },
        throttler: {
          /**
           * Get deploy request throttler configurations
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `read_deploy_request`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `read_deploy_requests` |
           * | Database | `read_deploy_requests` |
           */
          get: async <TResult extends ResultType = "json">(
            params: RequestType<GetDeployRequestThrottlerData, TResult>,
          ) => {
            return await this.request<ThrottlerConfigurations, TResult>({
              method: "GET",
              path: "/organizations/{organization}/databases/{database}/deploy-requests/{number}/throttler",
              params,
            });
          },
          /**
           * Update deploy request throttler configurations
           *
           * @description ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `read_deploy_request`, `create_deploy_request`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `deploy_deploy_requests` |
           * | Database | `deploy_deploy_requests` |
           */
          patch: async <TResult extends ResultType = "json">(
            params: RequestType<UpdateDeployRequestThrottlerData, TResult>,
          ) => {
            return await this.request<ThrottlerConfigurations, TResult>({
              method: "PATCH",
              path: "/organizations/{organization}/databases/{database}/deploy-requests/{number}/throttler",
              params,
            });
          },
        },
      },
      throttler: {
        /**
         * Get database throttler configurations
         *
         * @description ### Authorization
         * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
         *
         * **Service Token Accesses**
         *  `read_deploy_request`, `create_deploy_request`
         *
         * **OAuth Scopes**
         *
         *  | Resource | Scopes |
         * | :------- | :---------- |
         * | Organization | `read_databases` |
         * | Database | `read_database` |
         */
        get: async <TResult extends ResultType = "json">(
          params: RequestType<GetDatabaseThrottlerData, TResult>,
        ) => {
          return await this.request<ThrottlerConfigurations, TResult>({
            method: "GET",
            path: "/organizations/{organization}/databases/{database}/throttler",
            params,
          });
        },
        /**
         * Update database throttler configurations
         *
         * @description ### Authorization
         * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
         *
         * **Service Token Accesses**
         *  `read_deploy_request`, `create_deploy_request`
         *
         * **OAuth Scopes**
         *
         *  | Resource | Scopes |
         * | :------- | :---------- |
         * | Organization | `deploy_deploy_requests` |
         * | Database | `deploy_deploy_requests` |
         */
        patch: async <TResult extends ResultType = "json">(
          params: RequestType<UpdateDatabaseThrottlerData, TResult>,
        ) => {
          return await this.request<ThrottlerConfigurations, TResult>({
            method: "PATCH",
            path: "/organizations/{organization}/databases/{database}/throttler",
            params,
          });
        },
      },
      webhooks: {
        /**
         * List webhooks
         *
         * @description List webhooks for a database
         * ### Authorization
         * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
         *
         * **Service Token Accesses**
         *  `read_database`
         *
         * **OAuth Scopes**
         *
         *  | Resource | Scopes |
         * | :------- | :---------- |
         * | Organization | `read_databases` |
         * | Database | `read_database` |
         */
        list: async <TResult extends ResultType = "json">(
          params: RequestType<ListWebhooksData, TResult>,
        ) => {
          return await this.request<PaginatedDatabaseWebhook, TResult>({
            method: "GET",
            path: "/organizations/{organization}/databases/{database}/webhooks",
            params,
          });
        },
        /**
         * Create a webhook
         *
         * @description ### Authorization
         * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
         *
         * **Service Token Accesses**
         *  `write_database`
         *
         * **OAuth Scopes**
         *
         *  | Resource | Scopes |
         * | :------- | :---------- |
         * | Organization | `write_databases` |
         * | Database | `write_database` |
         */
        post: async <TResult extends ResultType = "json">(
          params: RequestType<CreateWebhookData, TResult>,
        ) => {
          return await this.request<DatabaseWebhook, TResult>({
            method: "POST",
            path: "/organizations/{organization}/databases/{database}/webhooks",
            params,
          });
        },
        /**
         * Get a webhook
         *
         * @description ### Authorization
         * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
         *
         * **Service Token Accesses**
         *  `read_database`
         *
         * **OAuth Scopes**
         *
         *  | Resource | Scopes |
         * | :------- | :---------- |
         * | Organization | `read_databases` |
         * | Database | `read_database` |
         */
        get: async <TResult extends ResultType = "json">(
          params: RequestType<GetWebhookData, TResult>,
        ) => {
          return await this.request<DatabaseWebhook, TResult>({
            method: "GET",
            path: "/organizations/{organization}/databases/{database}/webhooks/{id}",
            params,
          });
        },
        /**
         * Update a webhook
         *
         * @description ### Authorization
         * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
         *
         * **Service Token Accesses**
         *  `write_database`
         *
         * **OAuth Scopes**
         *
         *  | Resource | Scopes |
         * | :------- | :---------- |
         * | Organization | `write_databases` |
         * | Database | `write_database` |
         */
        patch: async <TResult extends ResultType = "json">(
          params: RequestType<UpdateWebhookData, TResult>,
        ) => {
          return await this.request<DatabaseWebhook, TResult>({
            method: "PATCH",
            path: "/organizations/{organization}/databases/{database}/webhooks/{id}",
            params,
          });
        },
        /**
         * Delete a webhook
         *
         * @description ### Authorization
         * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
         *
         * **Service Token Accesses**
         *  `write_database`
         *
         * **OAuth Scopes**
         *
         *  | Resource | Scopes |
         * | :------- | :---------- |
         * | Organization | `write_databases` |
         * | Database | `write_database` |
         */
        delete: async <TResult extends ResultType = "json">(
          params: RequestType<DeleteWebhookData, TResult>,
        ) => {
          return await this.request<unknown, TResult>({
            method: "DELETE",
            path: "/organizations/{organization}/databases/{database}/webhooks/{id}",
            params,
          });
        },
        test: {
          /**
           * Test a webhook
           *
           * @description Sends a test event to the webhook
           * ### Authorization
           * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
           *
           * **Service Token Accesses**
           *  `write_database`
           *
           * **OAuth Scopes**
           *
           *  | Resource | Scopes |
           * | :------- | :---------- |
           * | Organization | `write_databases` |
           * | Database | `write_database` |
           */
          post: async <TResult extends ResultType = "json">(
            params: RequestType<TestWebhookData, TResult>,
          ) => {
            return await this.request<unknown, TResult>({
              method: "POST",
              path: "/organizations/{organization}/databases/{database}/webhooks/{id}/test",
              params,
            });
          },
        },
      },
      workflows: {
        /**
         * List workflows
         *
         */
        list: async <TResult extends ResultType = "json">(
          params: RequestType<ListWorkflowsData, TResult>,
        ) => {
          return await this.request<PaginatedWorkflow, TResult>({
            method: "GET",
            path: "/organizations/{organization}/databases/{database}/workflows",
            params,
          });
        },
        /**
         * Create a workflow
         *
         */
        post: async <TResult extends ResultType = "json">(
          params: RequestType<CreateWorkflowData, TResult>,
        ) => {
          return await this.request<Workflow, TResult>({
            method: "POST",
            path: "/organizations/{organization}/databases/{database}/workflows",
            params,
          });
        },
        /**
         * Get a workflow
         *
         */
        get: async <TResult extends ResultType = "json">(
          params: RequestType<GetWorkflowData, TResult>,
        ) => {
          return await this.request<Workflow, TResult>({
            method: "GET",
            path: "/organizations/{organization}/databases/{database}/workflows/{number}",
            params,
          });
        },
        /**
         * Cancel a workflow
         *
         */
        delete: async <TResult extends ResultType = "json">(
          params: RequestType<WorkflowCancelData, TResult>,
        ) => {
          return await this.request<Workflow, TResult>({
            method: "DELETE",
            path: "/organizations/{organization}/databases/{database}/workflows/{number}",
            params,
          });
        },
        complete: {
          /**
           * Complete a workflow
           *
           */
          patch: async <TResult extends ResultType = "json">(
            params: RequestType<WorkflowCompleteData, TResult>,
          ) => {
            return await this.request<Workflow, TResult>({
              method: "PATCH",
              path: "/organizations/{organization}/databases/{database}/workflows/{number}/complete",
              params,
            });
          },
        },
        cutover: {
          /**
           * Cutover traffic
           *
           */
          patch: async <TResult extends ResultType = "json">(
            params: RequestType<WorkflowCutoverData, TResult>,
          ) => {
            return await this.request<Workflow, TResult>({
              method: "PATCH",
              path: "/organizations/{organization}/databases/{database}/workflows/{number}/cutover",
              params,
            });
          },
        },
        retry: {
          /**
           * Retry a failed workflow
           *
           */
          patch: async <TResult extends ResultType = "json">(
            params: RequestType<WorkflowRetryData, TResult>,
          ) => {
            return await this.request<Workflow, TResult>({
              method: "PATCH",
              path: "/organizations/{organization}/databases/{database}/workflows/{number}/retry",
              params,
            });
          },
        },
        reverseCutover: {
          /**
           * Reverse traffic cutover
           *
           */
          patch: async <TResult extends ResultType = "json">(
            params: RequestType<WorkflowReverseCutoverData, TResult>,
          ) => {
            return await this.request<Workflow, TResult>({
              method: "PATCH",
              path: "/organizations/{organization}/databases/{database}/workflows/{number}/reverse-cutover",
              params,
            });
          },
        },
        reverseTraffic: {
          /**
           * Reverse traffic
           *
           */
          patch: async <TResult extends ResultType = "json">(
            params: RequestType<WorkflowReverseTrafficData, TResult>,
          ) => {
            return await this.request<Workflow, TResult>({
              method: "PATCH",
              path: "/organizations/{organization}/databases/{database}/workflows/{number}/reverse-traffic",
              params,
            });
          },
        },
        switchPrimaries: {
          /**
           * Switch primary traffic
           *
           */
          patch: async <TResult extends ResultType = "json">(
            params: RequestType<WorkflowSwitchPrimariesData, TResult>,
          ) => {
            return await this.request<Workflow, TResult>({
              method: "PATCH",
              path: "/organizations/{organization}/databases/{database}/workflows/{number}/switch-primaries",
              params,
            });
          },
        },
        switchReplicas: {
          /**
           * Switch replica traffic
           *
           */
          patch: async <TResult extends ResultType = "json">(
            params: RequestType<WorkflowSwitchReplicasData, TResult>,
          ) => {
            return await this.request<Workflow, TResult>({
              method: "PATCH",
              path: "/organizations/{organization}/databases/{database}/workflows/{number}/switch-replicas",
              params,
            });
          },
        },
        verifyData: {
          /**
           * Verify workflow data
           *
           */
          patch: async <TResult extends ResultType = "json">(
            params: RequestType<VerifyWorkflowData, TResult>,
          ) => {
            return await this.request<Workflow, TResult>({
              method: "PATCH",
              path: "/organizations/{organization}/databases/{database}/workflows/{number}/verify-data",
              params,
            });
          },
        },
      },
      /**
       * Get a database
       *
       * @description ### Authorization
       * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
       *
       * **Service Token Accesses**
       *  `read_database`, `delete_database`, `write_database`, `read_branch`, `delete_branch`, `create_branch`, `delete_production_branch`, `connect_branch`, `connect_production_branch`, `delete_branch_password`, `delete_production_branch_password`, `read_deploy_request`, `create_deploy_request`, `approve_deploy_request`, `read_schema_recommendations`, `close_schema_recommendations`, `read_comment`, `create_comment`, `restore_backup`, `restore_production_branch_backup`, `read_backups`, `write_backups`, `delete_backups`, `delete_production_branch_backups`, `write_branch_vschema`, `write_production_branch_vschema`
       *
       * **OAuth Scopes**
       *
       *  | Resource | Scopes |
       * | :------- | :---------- |
       * | Organization | `read_databases` |
       * | Database | `read_database` |
       */
      get: async <TResult extends ResultType = "json">(
        params: RequestType<GetDatabaseData, TResult>,
      ) => {
        return await this.request<Database, TResult>({
          method: "GET",
          path: "/organizations/{organization}/databases/{name}",
          params,
        });
      },
      /**
       * Update database settings
       *
       * @description ### Authorization
       * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
       *
       * **Service Token Accesses**
       *  `write_database`
       *
       * **OAuth Scopes**
       *
       *  | Resource | Scopes |
       * | :------- | :---------- |
       * | Organization | `write_databases` |
       * | Database | `write_database` |
       */
      patch: async <TResult extends ResultType = "json">(
        params: RequestType<UpdateDatabaseSettingsData, TResult>,
      ) => {
        return await this.request<Database, TResult>({
          method: "PATCH",
          path: "/organizations/{organization}/databases/{name}",
          params,
        });
      },
      /**
       * Delete a database
       *
       * @description ### Authorization
       * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
       *
       * **Service Token Accesses**
       *  `delete_database`
       *
       * **OAuth Scopes**
       *
       *  | Resource | Scopes |
       * | :------- | :---------- |
       * | Organization | `delete_databases` |
       * | Database | `delete_database` |
       */
      delete: async <TResult extends ResultType = "json">(
        params: RequestType<DeleteDatabaseData, TResult>,
      ) => {
        return await this.request<unknown, TResult>({
          method: "DELETE",
          path: "/organizations/{organization}/databases/{name}",
          params,
        });
      },
      readOnlyRegions: {
        /**
         * List read-only regions
         *
         * @description List read-only regions for the database's default branch
         * ### Authorization
         * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
         *
         * **Service Token Accesses**
         *  `read_database`, `delete_database`, `write_database`, `read_branch`, `delete_branch`, `create_branch`, `delete_production_branch`, `connect_branch`, `connect_production_branch`, `delete_branch_password`, `delete_production_branch_password`, `read_deploy_request`, `create_deploy_request`, `approve_deploy_request`, `read_schema_recommendations`, `close_schema_recommendations`, `read_comment`, `create_comment`, `restore_backup`, `restore_production_branch_backup`, `read_backups`, `write_backups`, `delete_backups`, `delete_production_branch_backups`, `write_branch_vschema`, `write_production_branch_vschema`
         *
         * **OAuth Scopes**
         *
         *  | Resource | Scopes |
         * | :------- | :---------- |
         * | Organization | `read_branches` |
         * | Database | `read_branches` |
         */
        list: async <TResult extends ResultType = "json">(
          params: RequestType<ListReadOnlyRegionsData, TResult>,
        ) => {
          return await this.request<
            PaginatedDatabaseBranchReadOnlyRegion,
            TResult
          >({
            method: "GET",
            path: "/organizations/{organization}/databases/{name}/read-only-regions",
            params,
          });
        },
      },
      regions: {
        /**
         * List database regions
         *
         * @description ### Authorization
         * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
         *
         * **Service Token Accesses**
         *  `read_database`, `delete_database`, `write_database`, `read_branch`, `delete_branch`, `create_branch`, `delete_production_branch`, `connect_branch`, `connect_production_branch`, `delete_branch_password`, `delete_production_branch_password`, `read_deploy_request`, `create_deploy_request`, `approve_deploy_request`, `read_schema_recommendations`, `close_schema_recommendations`, `read_comment`, `create_comment`, `restore_backup`, `restore_production_branch_backup`, `read_backups`, `write_backups`, `delete_backups`, `delete_production_branch_backups`, `write_branch_vschema`, `write_production_branch_vschema`
         *
         * **OAuth Scopes**
         *
         *  | Resource | Scopes |
         * | :------- | :---------- |
         * | Organization | `read_databases` |
         * | Database | `read_database` |
         */
        list: async <TResult extends ResultType = "json">(
          params: RequestType<ListDatabaseRegionsData, TResult>,
        ) => {
          return await this.request<PaginatedPlanetscaleRegion, TResult>({
            method: "GET",
            path: "/organizations/{organization}/databases/{name}/regions",
            params,
          });
        },
      },
    },
    invoices: {
      /**
       * Get invoices
       *
       * @description Get the invoices for an organization
       * ### Authorization
       * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
       *
       * **Service Token Accesses**
       *  `read_invoices`
       *
       * **OAuth Scopes**
       *
       *  | Resource | Scopes |
       * | :------- | :---------- |
       * | Organization | `read_invoices` |
       */
      list: async <TResult extends ResultType = "json">(
        params: RequestType<ListInvoicesData, TResult>,
      ) => {
        return await this.request<PaginatedInvoice, TResult>({
          method: "GET",
          path: "/organizations/{organization}/invoices",
          params,
        });
      },
      /**
       * Get an invoice
       *
       * @description ### Authorization
       * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
       *
       * **Service Token Accesses**
       *  `read_invoices`
       *
       * **OAuth Scopes**
       *
       *  | Resource | Scopes |
       * | :------- | :---------- |
       * | Organization | `read_invoices` |
       */
      get: async <TResult extends ResultType = "json">(
        params: RequestType<GetInvoiceData, TResult>,
      ) => {
        return await this.request<Invoice, TResult>({
          method: "GET",
          path: "/organizations/{organization}/invoices/{id}",
          params,
        });
      },
      lineItems: {
        /**
         * Get invoice line items
         *
         * @description Get the line items for an invoice
         * ### Authorization
         * A service token or OAuth token must have at least one of the following access or scopes in order to use this API endpoint:
         *
         * **Service Token Accesses**
         *  `read_invoices`
         *
         * **OAuth Scopes**
         *
         *  | Resource | Scopes |
         * | :------- | :---------- |
         * | Organization | `read_invoices` |
         */
        get: async <TResult extends ResultType = "json">(
          params: RequestType<GetInvoiceLineItemsData, TResult>,
        ) => {
          return await this.request<PaginatedLineItem, TResult>({
            method: "GET",
            path: "/organizations/{organization}/invoices/{id}/line-items",
            params,
          });
        },
      },
    },
    members: {
      /**
       * List organization members
       *
       * @description ### Authorization
       * A service token   must have at least one of the following access   in order to use this API endpoint:
       *
       * **Service Token Accesses**
       *  `read_organization`
       */
      list: async <TResult extends ResultType = "json">(
        params: RequestType<ListOrganizationMembersData, TResult>,
      ) => {
        return await this.request<PaginatedOrganizationMembership, TResult>({
          method: "GET",
          path: "/organizations/{organization}/members",
          params,
        });
      },
    },
    oauthApplications: {
      /**
       * List OAuth applications
       *
       * @description ### Authorization
       * A service token   must have at least one of the following access   in order to use this API endpoint:
       *
       * **Service Token Accesses**
       *  `read_oauth_applications`
       */
      list: async <TResult extends ResultType = "json">(
        params: RequestType<ListOauthApplicationsData, TResult>,
      ) => {
        return await this.request<PaginatedOauthApplication, TResult>({
          method: "GET",
          path: "/organizations/{organization}/oauth-applications",
          params,
        });
      },
      /**
       * Get an OAuth application
       *
       * @description ### Authorization
       * A service token   must have at least one of the following access   in order to use this API endpoint:
       *
       * **Service Token Accesses**
       *  `read_oauth_applications`
       */
      get: async <TResult extends ResultType = "json">(
        params: RequestType<GetOauthApplicationData, TResult>,
      ) => {
        return await this.request<OauthApplication, TResult>({
          method: "GET",
          path: "/organizations/{organization}/oauth-applications/{application_id}",
          params,
        });
      },
      tokens: {
        /**
         * List OAuth tokens
         *
         * @description List OAuth tokens created by an OAuth application
         * ### Authorization
         * A service token   must have at least one of the following access   in order to use this API endpoint:
         *
         * **Service Token Accesses**
         *  `read_oauth_tokens`
         */
        list: async <TResult extends ResultType = "json">(
          params: RequestType<ListOauthTokensData, TResult>,
        ) => {
          return await this.request<PaginatedServiceToken, TResult>({
            method: "GET",
            path: "/organizations/{organization}/oauth-applications/{application_id}/tokens",
            params,
          });
        },
        /**
         * Get an OAuth token
         *
         * @description ### Authorization
         * A service token   must have at least one of the following access   in order to use this API endpoint:
         *
         * **Service Token Accesses**
         *  `read_oauth_tokens`
         */
        get: async <TResult extends ResultType = "json">(
          params: RequestType<GetOauthTokenData, TResult>,
        ) => {
          return await this.request<ServiceToken, TResult>({
            method: "GET",
            path: "/organizations/{organization}/oauth-applications/{application_id}/tokens/{token_id}",
            params,
          });
        },
        /**
         * Delete an OAuth token
         *
         * @description ### Authorization
         * A service token   must have at least one of the following access   in order to use this API endpoint:
         *
         * **Service Token Accesses**
         *  `delete_oauth_tokens`
         */
        delete: async <TResult extends ResultType = "json">(
          params: RequestType<DeleteOauthTokenData, TResult>,
        ) => {
          return await this.request<unknown, TResult>({
            method: "DELETE",
            path: "/organizations/{organization}/oauth-applications/{application_id}/tokens/{token_id}",
            params,
          });
        },
      },
      token: {
        /**
         * Create or renew an OAuth token
         *
         * @description Create an OAuth token from an authorization grant code, or refresh an OAuth token from a refresh token
         * ### Authorization
         * A service token   must have at least one of the following access   in order to use this API endpoint:
         *
         * **Service Token Accesses**
         *  `write_oauth_tokens`
         */
        post: async <TResult extends ResultType = "json">(
          params: RequestType<CreateOauthTokenData, TResult>,
        ) => {
          return await this.request<ServiceToken, TResult>({
            method: "POST",
            path: "/organizations/{organization}/oauth-applications/{id}/token",
            params,
          });
        },
      },
    },
  };
  regions = {
    /**
     * List public regions
     *
     * @description Endpoint is available without authentication.
     */
    list: async <TResult extends ResultType = "json">(
      params?: RequestType<ListPublicRegionsData, TResult>,
    ) => {
      return await this.request<
        PaginatedPublicPlanetscaleRegionSerializer,
        TResult
      >({
        method: "GET",
        path: "/regions",
        params,
      });
    },
  };
  user = {
    /**
     * Get current user
     *
     * @description Get the user associated with this service token
     * ### Authorization
     * A   OAuth token must have at least one of the following   scopes in order to use this API endpoint:
     *
     * **OAuth Scopes**
     *
     *  | Resource | Scopes |
     * | :------- | :---------- |
     * | User | `read_user` |
     */
    get: async <TResult extends ResultType = "json">(
      params?: RequestType<GetCurrentUserData, TResult>,
    ) => {
      return await this.request<User, TResult>({
        method: "GET",
        path: "/user",
        params,
      });
    },
  };
}

const formatURL = (input: {
  url: string;
  path?: Record<string, string>;
  query?: Record<string, string | number | boolean>;
}) => {
  const url = new URL(
    input.url.replaceAll(/{(\w+)}/g, (_, key) => {
      if (!input.path?.[key]) {
        throw new Error(`Missing required parameter: ${key}`);
      }
      return input.path[key];
    }),
  );
  if (input.query) {
    for (const [key, value] of Object.entries(input.query)) {
      url.searchParams.set(key, value.toString());
    }
  }
  return url.toString();
};
