import type { Context } from "../context.ts";
import { Resource, ResourceKind } from "../resource.ts";
import { handleApiError } from "./api-error.ts";
import {
  createCloudflareApi,
  type CloudflareApi,
  type CloudflareApiOptions,
} from "./api.ts";

/**
 * Properties for creating or updating an Images Signing Key
 */
export interface ImagesSigningKeyProps extends CloudflareApiOptions {
  /**
   * Unique name for the signing key
   */
  name?: string;

  /**
   * Whether to adopt an existing signing key with the same name if it exists
   */
  adopt?: boolean;

  /**
   * Whether to delete the signing key when removed from Alchemy
   */
  delete?: boolean;
}

/**
 * Output returned after Images Signing Key creation/update
 */
export interface ImagesSigningKeyResource
  extends Resource<"cloudflare::ImagesSigningKey"> {
  /**
   * The unique name for the signing key
   */
  name: string;

  /**
   * The signing key value (auto-generated by Cloudflare)
   */
  value: string;

  /**
   * When the signing key was created
   */
  createdAt: string;

  /**
   * When the signing key was last modified
   */
  modifiedAt: string;
}

export function isImagesSigningKey(
  resource: Resource,
): resource is ImagesSigningKeyResource {
  return resource[ResourceKind] === "cloudflare::ImagesSigningKey";
}

/**
 * A Cloudflare Images Signing Key is used to sign image URLs for secure access.
 *
 * @see https://developers.cloudflare.com/images/transform-images/serve-images/serve-private-images/
 *
 * @example
 * // Create a signing key for private images
 * const signingKey = await ImagesSigningKey("main-key", {
 *   name: "main-signing-key"
 * });
 *
 * @example
 * // Create a signing key with adoption
 * const existingKey = await ImagesSigningKey("backup-key", {
 *   name: "backup-signing-key",
 *   adopt: true
 * });
 *
 * @example
 * // Create a signing key that won't be deleted when removed from Alchemy
 * const persistentKey = await ImagesSigningKey("persistent-key", {
 *   name: "persistent-signing-key",
 *   delete: false
 * });
 */
export const ImagesSigningKey = Resource(
  "cloudflare::ImagesSigningKey",
  async function (
    this: Context<ImagesSigningKeyResource>,
    id: string,
    props: ImagesSigningKeyProps,
  ): Promise<ImagesSigningKeyResource> {
    const api = await createCloudflareApi(props);

    const keyName = props.name ?? id;

    if (this.phase === "delete") {
      const existingKeyName = this.output?.name;
      if (existingKeyName && props.delete !== false) {
        await deleteImagesSigningKey(api, existingKeyName);
      }
      return this.destroy();
    }

    let signingKey: ImagesSigningKeyResource;

    if (this.phase === "update") {
      // Update existing signing key (regenerate)
      signingKey = await updateImagesSigningKey(api, keyName);
    } else {
      // Create new signing key
      try {
        signingKey = await createImagesSigningKey(api, keyName);
      } catch (error) {
        if (
          props.adopt &&
          error instanceof Error &&
          error.message.includes("already exists")
        ) {
          // Adopt existing signing key
          signingKey = await getImagesSigningKey(api, keyName);
        } else {
          throw error;
        }
      }
    }

    return this(signingKey);
  },
);

async function createImagesSigningKey(
  api: CloudflareApi,
  keyName: string,
): Promise<ImagesSigningKeyResource> {
  const payload = {
    name: keyName,
  };

  const response = await api.post(
    `/accounts/${api.accountId}/images/v1/keys`,
    payload,
  );

  if (!response.ok) {
    await handleApiError(response, "create", "images_signing_key", keyName);
  }

  const data = await response.json();
  return transformApiResponse(data.result);
}

async function updateImagesSigningKey(
  api: CloudflareApi,
  keyName: string,
): Promise<ImagesSigningKeyResource> {
  // For signing keys, update regenerates the key value
  const response = await api.put(
    `/accounts/${api.accountId}/images/v1/keys/${keyName}`,
    {},
  );

  if (!response.ok) {
    await handleApiError(response, "update", "images_signing_key", keyName);
  }

  const data = await response.json();
  return transformApiResponse(data.result);
}

async function getImagesSigningKey(
  api: CloudflareApi,
  keyName: string,
): Promise<ImagesSigningKeyResource> {
  const response = await api.get(
    `/accounts/${api.accountId}/images/v1/keys/${keyName}`,
  );

  if (!response.ok) {
    await handleApiError(response, "get", "images_signing_key", keyName);
  }

  const data = await response.json();
  return transformApiResponse(data.result);
}

async function deleteImagesSigningKey(
  api: CloudflareApi,
  keyName: string,
): Promise<void> {
  const response = await api.delete(
    `/accounts/${api.accountId}/images/v1/keys/${keyName}`,
  );

  if (!response.ok && response.status !== 404) {
    await handleApiError(response, "delete", "images_signing_key", keyName);
  }
}

function transformApiResponse(result: any): ImagesSigningKeyResource {
  return {
    [ResourceKind]: "cloudflare::ImagesSigningKey",
    name: result.name,
    value: result.value,
    createdAt: result.createdAt,
    modifiedAt: result.modifiedAt,
  };
}
