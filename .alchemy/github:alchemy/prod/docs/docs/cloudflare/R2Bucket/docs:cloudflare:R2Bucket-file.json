{
  "kind": "fs::File",
  "id": "docs/cloudflare/R2Bucket-file",
  "fqn": "github:alchemy/prod/docs/docs/cloudflare/R2Bucket/docs/cloudflare/R2Bucket-file",
  "seq": 0,
  "data": {},
  "status": "created",
  "output": {
    "path": "alchemy-web/docs/providers/cloudflare/bucket.md",
    "content": "# R2Bucket\n\nThe R2Bucket resource lets you create and manage [Cloudflare R2 buckets](https://developers.cloudflare.com/r2/buckets/) for object storage.\n\n## Minimal Example\n\nCreate a basic R2 bucket with default settings:\n\n```ts\nimport { R2Bucket } from \"alchemy/cloudflare\";\n\nconst bucket = await R2Bucket(\"my-bucket\", {\n  name: \"my-bucket\"\n});\n```\n\n## With Location Hint\n\nCreate a bucket with location hint for optimal performance:\n\n```ts\nimport { R2Bucket } from \"alchemy/cloudflare\";\n\nconst euBucket = await R2Bucket(\"eu-bucket\", {\n  name: \"eu-bucket\",\n  locationHint: \"eu\",\n  jurisdiction: \"eu\"\n});\n```\n\n## With Public Access\n\nCreate a development bucket with public access enabled:\n\n```ts\nimport { R2Bucket } from \"alchemy/cloudflare\";\n\nconst publicBucket = await R2Bucket(\"public-assets\", {\n  name: \"public-assets\", \n  allowPublicAccess: true\n});\n```\n\n## FedRAMP Compliant\n\nCreate a FedRAMP compliant bucket for government workloads:\n\n```ts\nimport { R2Bucket } from \"alchemy/cloudflare\";\n\nconst govBucket = await R2Bucket(\"gov-data\", {\n  name: \"gov-data\",\n  jurisdiction: \"fedramp\"\n});\n```\n\n## Auto-Empty on Delete\n\nCreate a bucket that will be automatically emptied when deleted:\n\n```ts\nimport { R2Bucket } from \"alchemy/cloudflare\";\n\nconst tempBucket = await R2Bucket(\"temp-storage\", {\n  name: \"temp-storage\",\n  empty: true // All objects will be deleted when this resource is destroyed\n});\n```\n\n## Bind to a Worker\n\nBind an R2 bucket to a Cloudflare Worker:\n\n```ts\nimport { Worker, R2Bucket } from \"alchemy/cloudflare\";\n\nconst bucket = await R2Bucket(\"my-bucket\", {\n  name: \"my-bucket\"\n});\n\nawait Worker(\"my-worker\", {\n  name: \"my-worker\",\n  script: \"console.log('Hello, world!')\",\n  bindings: {\n    MY_BUCKET: bucket\n  }\n});\n```",
    "Kind": "fs::File",
    "ID": "docs/cloudflare/R2Bucket-file",
    "FQN": "github:alchemy/prod/docs/docs/cloudflare/R2Bucket/docs/cloudflare/R2Bucket-file",
    "Seq": 0
  },
  "props": {
    "path": "alchemy-web/docs/providers/cloudflare/bucket.md",
    "content": "# R2Bucket\n\nThe R2Bucket resource lets you create and manage [Cloudflare R2 buckets](https://developers.cloudflare.com/r2/buckets/) for object storage.\n\n## Minimal Example\n\nCreate a basic R2 bucket with default settings:\n\n```ts\nimport { R2Bucket } from \"alchemy/cloudflare\";\n\nconst bucket = await R2Bucket(\"my-bucket\", {\n  name: \"my-bucket\"\n});\n```\n\n## With Location Hint\n\nCreate a bucket with location hint for optimal performance:\n\n```ts\nimport { R2Bucket } from \"alchemy/cloudflare\";\n\nconst euBucket = await R2Bucket(\"eu-bucket\", {\n  name: \"eu-bucket\",\n  locationHint: \"eu\",\n  jurisdiction: \"eu\"\n});\n```\n\n## With Public Access\n\nCreate a development bucket with public access enabled:\n\n```ts\nimport { R2Bucket } from \"alchemy/cloudflare\";\n\nconst publicBucket = await R2Bucket(\"public-assets\", {\n  name: \"public-assets\", \n  allowPublicAccess: true\n});\n```\n\n## FedRAMP Compliant\n\nCreate a FedRAMP compliant bucket for government workloads:\n\n```ts\nimport { R2Bucket } from \"alchemy/cloudflare\";\n\nconst govBucket = await R2Bucket(\"gov-data\", {\n  name: \"gov-data\",\n  jurisdiction: \"fedramp\"\n});\n```\n\n## Auto-Empty on Delete\n\nCreate a bucket that will be automatically emptied when deleted:\n\n```ts\nimport { R2Bucket } from \"alchemy/cloudflare\";\n\nconst tempBucket = await R2Bucket(\"temp-storage\", {\n  name: \"temp-storage\",\n  empty: true // All objects will be deleted when this resource is destroyed\n});\n```\n\n## Bind to a Worker\n\nBind an R2 bucket to a Cloudflare Worker:\n\n```ts\nimport { Worker, R2Bucket } from \"alchemy/cloudflare\";\n\nconst bucket = await R2Bucket(\"my-bucket\", {\n  name: \"my-bucket\"\n});\n\nawait Worker(\"my-worker\", {\n  name: \"my-worker\",\n  script: \"console.log('Hello, world!')\",\n  bindings: {\n    MY_BUCKET: bucket\n  }\n});\n```"
  }
}