{
  "kind": "fs::File",
  "id": "docs/cloudflare/AccountApiToken-file",
  "fqn": "github:alchemy/prod/docs/docs/cloudflare/AccountApiToken/docs/cloudflare/AccountApiToken-file",
  "seq": 0,
  "data": {},
  "status": "created",
  "output": {
    "path": "alchemy-web/docs/providers/cloudflare/account-api-token.md",
    "content": "# AccountApiToken\n\nCreates a [Cloudflare API Token](https://developers.cloudflare.com/api/tokens/) with specified permissions and restrictions.\n\n# Minimal Example\n\nCreate a basic API token with read-only permissions:\n\n```ts\nimport { AccountApiToken, PermissionGroups } from \"alchemy/cloudflare\";\n\n// First, fetch all permission groups\nconst permissions = await PermissionGroups(\"cloudflare-permissions\", {\n  accountId: cfAccountId,\n});\n\n// Create a token with read-only permissions\nconst token = await AccountApiToken(\"readonly-token\", {\n  name: \"Readonly Zone Token\", \n  policies: [{\n    effect: \"allow\",\n    permissionGroups: [\n      { id: permissions[\"Zone Read\"].id },\n      { id: permissions[\"Analytics Read\"].id }\n    ],\n    resources: {\n      \"com.cloudflare.api.account.zone.*\": \"*\"\n    }\n  }]\n});\n```\n\n# Time and IP Restrictions\n\nCreate a token with time and IP restrictions:\n\n```ts\nconst restrictedToken = await AccountApiToken(\"restricted-token\", {\n  name: \"Restricted Access Token\",\n  policies: [{\n    effect: \"allow\", \n    permissionGroups: [\n      { id: permissions[\"Worker Routes Edit\"].id }\n    ],\n    resources: {\n      \"com.cloudflare.api.account.worker.route.*\": \"*\"\n    }\n  }],\n  notBefore: \"2023-01-01T00:00:00Z\",\n  expiresOn: \"2023-12-31T23:59:59Z\",\n  condition: {\n    requestIp: {\n      in: [\"192.168.1.0/24\", \"10.0.0.0/8\"],\n      notIn: [\"192.168.1.100/32\"]\n    }\n  }\n});\n```\n\n# Bind to a Worker\n\nUse the token in a Worker binding:\n\n```ts\nimport { Worker, AccountApiToken } from \"alchemy/cloudflare\";\n\nconst token = await AccountApiToken(\"api-token\", {\n  name: \"Worker API Token\",\n  policies: [{\n    effect: \"allow\",\n    permissionGroups: [\n      { id: permissions[\"Zone Read\"].id }\n    ],\n    resources: {\n      \"com.cloudflare.api.account.zone.*\": \"*\" \n    }\n  }]\n});\n\nawait Worker(\"my-worker\", {\n  name: \"my-worker\",\n  script: \"console.log('Hello, world!')\",\n  bindings: {\n    API_TOKEN: token.value\n  }\n});\n```",
    "Kind": "fs::File",
    "ID": "docs/cloudflare/AccountApiToken-file",
    "FQN": "github:alchemy/prod/docs/docs/cloudflare/AccountApiToken/docs/cloudflare/AccountApiToken-file",
    "Seq": 0
  },
  "props": {
    "path": "alchemy-web/docs/providers/cloudflare/account-api-token.md",
    "content": "# AccountApiToken\n\nCreates a [Cloudflare API Token](https://developers.cloudflare.com/api/tokens/) with specified permissions and restrictions.\n\n# Minimal Example\n\nCreate a basic API token with read-only permissions:\n\n```ts\nimport { AccountApiToken, PermissionGroups } from \"alchemy/cloudflare\";\n\n// First, fetch all permission groups\nconst permissions = await PermissionGroups(\"cloudflare-permissions\", {\n  accountId: cfAccountId,\n});\n\n// Create a token with read-only permissions\nconst token = await AccountApiToken(\"readonly-token\", {\n  name: \"Readonly Zone Token\", \n  policies: [{\n    effect: \"allow\",\n    permissionGroups: [\n      { id: permissions[\"Zone Read\"].id },\n      { id: permissions[\"Analytics Read\"].id }\n    ],\n    resources: {\n      \"com.cloudflare.api.account.zone.*\": \"*\"\n    }\n  }]\n});\n```\n\n# Time and IP Restrictions\n\nCreate a token with time and IP restrictions:\n\n```ts\nconst restrictedToken = await AccountApiToken(\"restricted-token\", {\n  name: \"Restricted Access Token\",\n  policies: [{\n    effect: \"allow\", \n    permissionGroups: [\n      { id: permissions[\"Worker Routes Edit\"].id }\n    ],\n    resources: {\n      \"com.cloudflare.api.account.worker.route.*\": \"*\"\n    }\n  }],\n  notBefore: \"2023-01-01T00:00:00Z\",\n  expiresOn: \"2023-12-31T23:59:59Z\",\n  condition: {\n    requestIp: {\n      in: [\"192.168.1.0/24\", \"10.0.0.0/8\"],\n      notIn: [\"192.168.1.100/32\"]\n    }\n  }\n});\n```\n\n# Bind to a Worker\n\nUse the token in a Worker binding:\n\n```ts\nimport { Worker, AccountApiToken } from \"alchemy/cloudflare\";\n\nconst token = await AccountApiToken(\"api-token\", {\n  name: \"Worker API Token\",\n  policies: [{\n    effect: \"allow\",\n    permissionGroups: [\n      { id: permissions[\"Zone Read\"].id }\n    ],\n    resources: {\n      \"com.cloudflare.api.account.zone.*\": \"*\" \n    }\n  }]\n});\n\nawait Worker(\"my-worker\", {\n  name: \"my-worker\",\n  script: \"console.log('Hello, world!')\",\n  bindings: {\n    API_TOKEN: token.value\n  }\n});\n```"
  }
}