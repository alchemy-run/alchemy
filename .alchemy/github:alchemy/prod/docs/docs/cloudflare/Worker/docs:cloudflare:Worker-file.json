{
  "kind": "fs::File",
  "id": "docs/cloudflare/Worker-file",
  "fqn": "github:alchemy/prod/docs/docs/cloudflare/Worker/docs/cloudflare/Worker-file",
  "seq": 0,
  "data": {},
  "status": "created",
  "output": {
    "path": "alchemy-web/docs/providers/cloudflare/worker.md",
    "content": "# Worker\n\nThe Worker resource lets you deploy [Cloudflare Workers](https://developers.cloudflare.com/workers/) - serverless JavaScript functions that run on Cloudflare's edge network.\n\n## Minimal Example\n\nCreate a basic HTTP handler worker:\n\n```ts\nimport { Worker } from \"alchemy/cloudflare\";\n\nconst worker = await Worker(\"api\", {\n  name: \"api-worker\", \n  script: \"export default { async fetch() { return new Response('Hello!') } }\"\n});\n```\n\n## Worker with Bindings\n\nBind KV namespaces, Durable Objects and other resources to your worker:\n\n```ts\nimport { Worker, KVNamespace, DurableObjectNamespace } from \"alchemy/cloudflare\";\n\nconst kv = await KVNamespace(\"data\", {\n  title: \"data-store\"\n});\n\nconst counter = new DurableObjectNamespace(\"counter\", {\n  className: \"Counter\"\n});\n\nconst worker = await Worker(\"api\", {\n  name: \"api-worker\",\n  entrypoint: \"./src/worker.ts\",\n  bindings: {\n    DATA: kv,\n    COUNTER: counter\n  }\n});\n```\n\n## Worker with Assets\n\nServe static assets from your worker:\n\n```ts\nimport { Worker, Assets } from \"alchemy/cloudflare\";\n\nconst assets = await Assets(\"static\", {\n  path: \"./dist\"\n});\n\nconst worker = await Worker(\"frontend\", {\n  name: \"frontend-worker\", \n  entrypoint: \"./src/worker.ts\",\n  bindings: {\n    ASSETS: assets\n  }\n});\n```\n\n## Worker with Environment Variables\n\nAdd environment variables and secrets:\n\n```ts\nimport { Worker } from \"alchemy/cloudflare\";\nimport { alchemy } from \"alchemy\";\n\nconst worker = await Worker(\"api\", {\n  name: \"api-worker\",\n  entrypoint: \"./src/worker.ts\",\n  env: {\n    API_URL: \"https://api.example.com\"\n  },\n  bindings: {\n    API_KEY: alchemy.secret(process.env.API_KEY)\n  }\n});\n```\n\n## Worker with Custom Domain\n\nEnable workers.dev URL and custom domain:\n\n```ts\nimport { Worker, CustomDomain } from \"alchemy/cloudflare\";\n\nconst worker = await Worker(\"api\", {\n  name: \"api-worker\",\n  entrypoint: \"./src/worker.ts\",\n  url: true // Enable workers.dev URL\n});\n\nconst domain = await CustomDomain(\"api-domain\", {\n  name: \"api.example.com\",\n  zoneId: \"YOUR_ZONE_ID\",\n  workerName: worker.name\n});\n```",
    "Kind": "fs::File",
    "ID": "docs/cloudflare/Worker-file",
    "FQN": "github:alchemy/prod/docs/docs/cloudflare/Worker/docs/cloudflare/Worker-file",
    "Seq": 0
  },
  "props": {
    "path": "alchemy-web/docs/providers/cloudflare/worker.md",
    "content": "# Worker\n\nThe Worker resource lets you deploy [Cloudflare Workers](https://developers.cloudflare.com/workers/) - serverless JavaScript functions that run on Cloudflare's edge network.\n\n## Minimal Example\n\nCreate a basic HTTP handler worker:\n\n```ts\nimport { Worker } from \"alchemy/cloudflare\";\n\nconst worker = await Worker(\"api\", {\n  name: \"api-worker\", \n  script: \"export default { async fetch() { return new Response('Hello!') } }\"\n});\n```\n\n## Worker with Bindings\n\nBind KV namespaces, Durable Objects and other resources to your worker:\n\n```ts\nimport { Worker, KVNamespace, DurableObjectNamespace } from \"alchemy/cloudflare\";\n\nconst kv = await KVNamespace(\"data\", {\n  title: \"data-store\"\n});\n\nconst counter = new DurableObjectNamespace(\"counter\", {\n  className: \"Counter\"\n});\n\nconst worker = await Worker(\"api\", {\n  name: \"api-worker\",\n  entrypoint: \"./src/worker.ts\",\n  bindings: {\n    DATA: kv,\n    COUNTER: counter\n  }\n});\n```\n\n## Worker with Assets\n\nServe static assets from your worker:\n\n```ts\nimport { Worker, Assets } from \"alchemy/cloudflare\";\n\nconst assets = await Assets(\"static\", {\n  path: \"./dist\"\n});\n\nconst worker = await Worker(\"frontend\", {\n  name: \"frontend-worker\", \n  entrypoint: \"./src/worker.ts\",\n  bindings: {\n    ASSETS: assets\n  }\n});\n```\n\n## Worker with Environment Variables\n\nAdd environment variables and secrets:\n\n```ts\nimport { Worker } from \"alchemy/cloudflare\";\nimport { alchemy } from \"alchemy\";\n\nconst worker = await Worker(\"api\", {\n  name: \"api-worker\",\n  entrypoint: \"./src/worker.ts\",\n  env: {\n    API_URL: \"https://api.example.com\"\n  },\n  bindings: {\n    API_KEY: alchemy.secret(process.env.API_KEY)\n  }\n});\n```\n\n## Worker with Custom Domain\n\nEnable workers.dev URL and custom domain:\n\n```ts\nimport { Worker, CustomDomain } from \"alchemy/cloudflare\";\n\nconst worker = await Worker(\"api\", {\n  name: \"api-worker\",\n  entrypoint: \"./src/worker.ts\",\n  url: true // Enable workers.dev URL\n});\n\nconst domain = await CustomDomain(\"api-domain\", {\n  name: \"api.example.com\",\n  zoneId: \"YOUR_ZONE_ID\",\n  workerName: worker.name\n});\n```"
  }
}