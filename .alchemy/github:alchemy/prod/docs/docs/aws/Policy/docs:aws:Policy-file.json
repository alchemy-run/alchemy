{
  "kind": "fs::File",
  "id": "docs/aws/Policy-file",
  "fqn": "github:alchemy/prod/docs/docs/aws/Policy/docs/aws/Policy-file",
  "seq": 0,
  "data": {},
  "status": "created",
  "output": {
    "path": "alchemy-web/docs/providers/aws/policy.md",
    "content": "# Policy\n\nThe Policy resource lets you create and manage [AWS IAM Policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html) that define permissions for AWS services and resources.\n\n## Minimal Example\n\nCreate a basic policy that allows S3 bucket access:\n\n```ts\nimport { Policy } from \"alchemy/aws\";\n\nconst s3Policy = await Policy(\"bucket-access\", {\n  policyName: \"s3-bucket-access\", \n  document: {\n    Version: \"2012-10-17\",\n    Statement: [{\n      Effect: \"Allow\",\n      Action: [\n        \"s3:GetObject\",\n        \"s3:PutObject\"\n      ],\n      Resource: `${bucket.arn}/*`\n    }]\n  }\n});\n```\n\n## Multiple Statements\n\nCreate a policy with multiple statements and conditions:\n\n```ts\nimport { Policy } from \"alchemy/aws\";\n\nconst apiPolicy = await Policy(\"api-access\", {\n  policyName: \"api-gateway-access\",\n  document: {\n    Version: \"2012-10-17\", \n    Statement: [\n      {\n        Sid: \"InvokeAPI\",\n        Effect: \"Allow\",\n        Action: \"execute-api:Invoke\",\n        Resource: `${api.executionArn}/*`,\n        Condition: {\n          StringEquals: {\n            \"aws:SourceVpc\": vpc.id\n          }\n        }\n      },\n      {\n        Sid: \"ReadLogs\",\n        Effect: \"Allow\", \n        Action: [\n          \"logs:GetLogEvents\",\n          \"logs:FilterLogEvents\"\n        ],\n        Resource: `${api.logGroupArn}:*`\n      }\n    ]\n  },\n  description: \"Allows invoking API Gateway endpoints and reading logs\",\n  tags: {\n    Service: \"API Gateway\",\n    Environment: \"production\" \n  }\n});\n```\n\n## Deny Policy\n\nCreate a policy that denies access based on tags:\n\n```ts\nimport { Policy } from \"alchemy/aws\";\n\nconst denyPolicy = await Policy(\"deny-production\", {\n  policyName: \"deny-production-access\",\n  document: {\n    Version: \"2012-10-17\",\n    Statement: [{\n      Effect: \"Deny\",\n      Action: \"*\", \n      Resource: \"*\",\n      Condition: {\n        StringEquals: {\n          \"aws:ResourceTag/Environment\": \"production\"\n        }\n      }\n    }]\n  }\n});\n```",
    "Kind": "fs::File",
    "ID": "docs/aws/Policy-file",
    "FQN": "github:alchemy/prod/docs/docs/aws/Policy/docs/aws/Policy-file",
    "Seq": 0
  },
  "props": {
    "path": "alchemy-web/docs/providers/aws/policy.md",
    "content": "# Policy\n\nThe Policy resource lets you create and manage [AWS IAM Policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html) that define permissions for AWS services and resources.\n\n## Minimal Example\n\nCreate a basic policy that allows S3 bucket access:\n\n```ts\nimport { Policy } from \"alchemy/aws\";\n\nconst s3Policy = await Policy(\"bucket-access\", {\n  policyName: \"s3-bucket-access\", \n  document: {\n    Version: \"2012-10-17\",\n    Statement: [{\n      Effect: \"Allow\",\n      Action: [\n        \"s3:GetObject\",\n        \"s3:PutObject\"\n      ],\n      Resource: `${bucket.arn}/*`\n    }]\n  }\n});\n```\n\n## Multiple Statements\n\nCreate a policy with multiple statements and conditions:\n\n```ts\nimport { Policy } from \"alchemy/aws\";\n\nconst apiPolicy = await Policy(\"api-access\", {\n  policyName: \"api-gateway-access\",\n  document: {\n    Version: \"2012-10-17\", \n    Statement: [\n      {\n        Sid: \"InvokeAPI\",\n        Effect: \"Allow\",\n        Action: \"execute-api:Invoke\",\n        Resource: `${api.executionArn}/*`,\n        Condition: {\n          StringEquals: {\n            \"aws:SourceVpc\": vpc.id\n          }\n        }\n      },\n      {\n        Sid: \"ReadLogs\",\n        Effect: \"Allow\", \n        Action: [\n          \"logs:GetLogEvents\",\n          \"logs:FilterLogEvents\"\n        ],\n        Resource: `${api.logGroupArn}:*`\n      }\n    ]\n  },\n  description: \"Allows invoking API Gateway endpoints and reading logs\",\n  tags: {\n    Service: \"API Gateway\",\n    Environment: \"production\" \n  }\n});\n```\n\n## Deny Policy\n\nCreate a policy that denies access based on tags:\n\n```ts\nimport { Policy } from \"alchemy/aws\";\n\nconst denyPolicy = await Policy(\"deny-production\", {\n  policyName: \"deny-production-access\",\n  document: {\n    Version: \"2012-10-17\",\n    Statement: [{\n      Effect: \"Deny\",\n      Action: \"*\", \n      Resource: \"*\",\n      Condition: {\n        StringEquals: {\n          \"aws:ResourceTag/Environment\": \"production\"\n        }\n      }\n    }]\n  }\n});\n```"
  }
}