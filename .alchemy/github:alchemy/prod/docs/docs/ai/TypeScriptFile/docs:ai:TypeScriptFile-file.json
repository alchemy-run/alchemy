{
  "kind": "fs::File",
  "id": "docs/ai/TypeScriptFile-file",
  "fqn": "github:alchemy/prod/docs/docs/ai/TypeScriptFile/docs/ai/TypeScriptFile-file",
  "seq": 0,
  "data": {},
  "status": "created",
  "output": {
    "path": "alchemy-web/docs/providers/ai/typescript-file.md",
    "content": "# TypeScriptFile\n\nThe TypeScriptFile resource lets you generate TypeScript code files using AI models like [OpenAI GPT-4](https://platform.openai.com/docs/models/gpt-4) or [Anthropic Claude](https://www.anthropic.com/claude).\n\n# Minimal Example\n\nGenerate a simple TypeScript utility file:\n\n```ts\nimport { TypeScriptFile } from \"alchemy/ai\";\n\nconst utils = await TypeScriptFile(\"string-utils\", {\n  path: \"./src/utils/string-utils.ts\",\n  prompt: \"Generate TypeScript utility functions for string manipulation (capitalize, truncate, camelCase, etc)\"\n});\n```\n\n# Generate with Context\n\nUse alchemy template literals to include file context:\n\n```ts\nimport { TypeScriptFile } from \"alchemy/ai\";\n\nconst service = await TypeScriptFile(\"user-service\", {\n  path: \"./src/services/UserService.ts\",\n  prompt: await alchemy`\n    Create a UserService class that handles user authentication and profile management.\n    Use the User type from:\n    ${alchemy.file(\"src/types/User.ts\")}\n  `,\n  temperature: 0.2\n});\n```\n\n# Custom Formatting\n\nConfigure Prettier options for code formatting:\n\n```ts\nimport { TypeScriptFile } from \"alchemy/ai\";\n\nconst component = await TypeScriptFile(\"button\", {\n  path: \"./src/components/Button.tsx\",\n  prompt: \"Generate a reusable React button component with variants and sizes\",\n  prettierConfig: {\n    semi: false,\n    singleQuote: true,\n    printWidth: 120\n  }\n});\n```\n\n# Custom Model\n\nUse a specific AI model with custom options:\n\n```ts\nimport { TypeScriptFile } from \"alchemy/ai\";\n\nconst hook = await TypeScriptFile(\"use-form\", {\n  path: \"./src/hooks/useForm.ts\",\n  prompt: \"Create a React form hook with validation and submission handling\",\n  model: {\n    id: \"claude-3-opus-20240229\",\n    provider: \"anthropic\",\n    options: {\n      temperature: 0.3\n    }\n  }\n});\n```",
    "Kind": "fs::File",
    "ID": "docs/ai/TypeScriptFile-file",
    "FQN": "github:alchemy/prod/docs/docs/ai/TypeScriptFile/docs/ai/TypeScriptFile-file",
    "Seq": 0
  },
  "props": {
    "path": "alchemy-web/docs/providers/ai/typescript-file.md",
    "content": "# TypeScriptFile\n\nThe TypeScriptFile resource lets you generate TypeScript code files using AI models like [OpenAI GPT-4](https://platform.openai.com/docs/models/gpt-4) or [Anthropic Claude](https://www.anthropic.com/claude).\n\n# Minimal Example\n\nGenerate a simple TypeScript utility file:\n\n```ts\nimport { TypeScriptFile } from \"alchemy/ai\";\n\nconst utils = await TypeScriptFile(\"string-utils\", {\n  path: \"./src/utils/string-utils.ts\",\n  prompt: \"Generate TypeScript utility functions for string manipulation (capitalize, truncate, camelCase, etc)\"\n});\n```\n\n# Generate with Context\n\nUse alchemy template literals to include file context:\n\n```ts\nimport { TypeScriptFile } from \"alchemy/ai\";\n\nconst service = await TypeScriptFile(\"user-service\", {\n  path: \"./src/services/UserService.ts\",\n  prompt: await alchemy`\n    Create a UserService class that handles user authentication and profile management.\n    Use the User type from:\n    ${alchemy.file(\"src/types/User.ts\")}\n  `,\n  temperature: 0.2\n});\n```\n\n# Custom Formatting\n\nConfigure Prettier options for code formatting:\n\n```ts\nimport { TypeScriptFile } from \"alchemy/ai\";\n\nconst component = await TypeScriptFile(\"button\", {\n  path: \"./src/components/Button.tsx\",\n  prompt: \"Generate a reusable React button component with variants and sizes\",\n  prettierConfig: {\n    semi: false,\n    singleQuote: true,\n    printWidth: 120\n  }\n});\n```\n\n# Custom Model\n\nUse a specific AI model with custom options:\n\n```ts\nimport { TypeScriptFile } from \"alchemy/ai\";\n\nconst hook = await TypeScriptFile(\"use-form\", {\n  path: \"./src/hooks/useForm.ts\",\n  prompt: \"Create a React form hook with validation and submission handling\",\n  model: {\n    id: \"claude-3-opus-20240229\",\n    provider: \"anthropic\",\n    options: {\n      temperature: 0.3\n    }\n  }\n});\n```"
  }
}