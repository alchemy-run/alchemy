{
  "kind": "fs::File",
  "id": "docs/ai/Data-file",
  "fqn": "github:alchemy/prod/docs/docs/ai/Data/docs/ai/Data-file",
  "seq": 0,
  "data": {},
  "status": "created",
  "output": {
    "path": "alchemy-web/docs/providers/ai/data.md",
    "content": "# Data\n\nThe Data resource uses AI models to generate structured content based on a schema. It leverages the [Vercel AI SDK](https://sdk.vercel.ai/docs) for content generation and [ArkType](https://arktype.io/) for schema validation.\n\n# Minimal Example\n\nGenerate structured data using a schema:\n\n```ts\nimport { Data } from \"alchemy/ai\";\nimport { type } from \"arktype\";\n\nconst productSchema = type({\n  name: \"string\",\n  description: \"string\", \n  price: \"number\"\n});\n\nconst product = await Data(\"product\", {\n  schema: productSchema,\n  prompt: \"Generate a product description for a smartphone\"\n});\n\nconsole.log(product.object); // Typed as per schema\n```\n\n# With Message History\n\nUse message history for iterative content generation:\n\n```ts\nimport { Data } from \"alchemy/ai\";\nimport { type } from \"arktype\";\n\nconst feedbackSchema = type({\n  rating: \"number\",\n  positives: \"string[]\",\n  improvements: \"string[]\"\n});\n\nconst feedback = await Data(\"feedback\", {\n  schema: feedbackSchema,\n  messages: [\n    { role: \"user\", content: \"Review my product design\" },\n    { role: \"assistant\", content: \"I'll help review it. What's the product?\" },\n    { role: \"user\", content: \"It's a smart home device that...\" }\n  ],\n  temperature: 0.3\n});\n```\n\n# With File Context\n\nUse alchemy template literals to include file context:\n\n```ts\nimport { Data } from \"alchemy/ai\";\nimport { type } from \"arktype\";\n\nconst docSchema = type({\n  summary: \"string\",\n  parameters: [{\n    name: \"string\",\n    type: \"string\",\n    description: \"string\"\n  }],\n  returns: \"string\"\n});\n\nconst docs = await Data(\"function-docs\", {\n  schema: docSchema,\n  prompt: await alchemy`\n    Generate documentation for this function:\n    ${alchemy.file(\"src/utils/format.ts\")}\n  `,\n  system: \"You are a technical documentation writer\"\n});\n```",
    "Kind": "fs::File",
    "ID": "docs/ai/Data-file",
    "FQN": "github:alchemy/prod/docs/docs/ai/Data/docs/ai/Data-file",
    "Seq": 0
  },
  "props": {
    "path": "alchemy-web/docs/providers/ai/data.md",
    "content": "# Data\n\nThe Data resource uses AI models to generate structured content based on a schema. It leverages the [Vercel AI SDK](https://sdk.vercel.ai/docs) for content generation and [ArkType](https://arktype.io/) for schema validation.\n\n# Minimal Example\n\nGenerate structured data using a schema:\n\n```ts\nimport { Data } from \"alchemy/ai\";\nimport { type } from \"arktype\";\n\nconst productSchema = type({\n  name: \"string\",\n  description: \"string\", \n  price: \"number\"\n});\n\nconst product = await Data(\"product\", {\n  schema: productSchema,\n  prompt: \"Generate a product description for a smartphone\"\n});\n\nconsole.log(product.object); // Typed as per schema\n```\n\n# With Message History\n\nUse message history for iterative content generation:\n\n```ts\nimport { Data } from \"alchemy/ai\";\nimport { type } from \"arktype\";\n\nconst feedbackSchema = type({\n  rating: \"number\",\n  positives: \"string[]\",\n  improvements: \"string[]\"\n});\n\nconst feedback = await Data(\"feedback\", {\n  schema: feedbackSchema,\n  messages: [\n    { role: \"user\", content: \"Review my product design\" },\n    { role: \"assistant\", content: \"I'll help review it. What's the product?\" },\n    { role: \"user\", content: \"It's a smart home device that...\" }\n  ],\n  temperature: 0.3\n});\n```\n\n# With File Context\n\nUse alchemy template literals to include file context:\n\n```ts\nimport { Data } from \"alchemy/ai\";\nimport { type } from \"arktype\";\n\nconst docSchema = type({\n  summary: \"string\",\n  parameters: [{\n    name: \"string\",\n    type: \"string\",\n    description: \"string\"\n  }],\n  returns: \"string\"\n});\n\nconst docs = await Data(\"function-docs\", {\n  schema: docSchema,\n  prompt: await alchemy`\n    Generate documentation for this function:\n    ${alchemy.file(\"src/utils/format.ts\")}\n  `,\n  system: \"You are a technical documentation writer\"\n});\n```"
  }
}