{
  "kind": "fs::File",
  "id": "docs/ai/JSONFile-file",
  "fqn": "github:alchemy/prod/docs/docs/ai/JSONFile/docs/ai/JSONFile-file",
  "seq": 0,
  "data": {},
  "status": "created",
  "output": {
    "path": "alchemy-web/docs/providers/ai/json-file.md",
    "content": "# JSONFile\n\nThe JSONFile resource lets you generate JSON files using AI models. It supports both schema-based validation and freeform JSON generation.\n\n## Minimal Example\n\nGenerate a simple JSON configuration file:\n\n```ts\nimport { JSONFile } from \"alchemy/ai\";\n\nconst config = await JSONFile(\"app-config\", {\n  path: \"./config/app.json\",\n  prompt: \"Generate a configuration for a web application with server settings, database connection details, and logging configuration\"\n});\n```\n\n## Schema Validation\n\nUse ArkType schemas to validate and type the generated JSON:\n\n```ts\nimport { JSONFile } from \"alchemy/ai\";\nimport { type } from \"arktype\";\n\nconst userSchema = type({\n  users: [{\n    id: \"string\",\n    name: \"string\", \n    email: \"string\",\n    role: \"'admin' | 'user' | 'guest'\",\n    permissions: \"string[]\"\n  }]\n});\n\nconst userData = await JSONFile(\"user-data\", {\n  path: \"./data/users.json\",\n  schema: userSchema,\n  prompt: \"Generate sample user data with various roles and permissions\",\n  temperature: 0.2\n});\n\n// Type-safe access\nconsole.log(userData.json.users[0].role); // Typed as 'admin' | 'user' | 'guest'\n```\n\n## Custom Formatting\n\nControl JSON formatting with pretty-printing options:\n\n```ts\nimport { JSONFile } from \"alchemy/ai\";\n\nconst apiMock = await JSONFile(\"api-mock\", {\n  path: \"./mocks/products.json\",\n  prompt: \"Create mock data for a product catalog API with 10 products\",\n  pretty: true,\n  indent: 4\n});\n```",
    "Kind": "fs::File",
    "ID": "docs/ai/JSONFile-file",
    "FQN": "github:alchemy/prod/docs/docs/ai/JSONFile/docs/ai/JSONFile-file",
    "Seq": 0
  },
  "props": {
    "path": "alchemy-web/docs/providers/ai/json-file.md",
    "content": "# JSONFile\n\nThe JSONFile resource lets you generate JSON files using AI models. It supports both schema-based validation and freeform JSON generation.\n\n## Minimal Example\n\nGenerate a simple JSON configuration file:\n\n```ts\nimport { JSONFile } from \"alchemy/ai\";\n\nconst config = await JSONFile(\"app-config\", {\n  path: \"./config/app.json\",\n  prompt: \"Generate a configuration for a web application with server settings, database connection details, and logging configuration\"\n});\n```\n\n## Schema Validation\n\nUse ArkType schemas to validate and type the generated JSON:\n\n```ts\nimport { JSONFile } from \"alchemy/ai\";\nimport { type } from \"arktype\";\n\nconst userSchema = type({\n  users: [{\n    id: \"string\",\n    name: \"string\", \n    email: \"string\",\n    role: \"'admin' | 'user' | 'guest'\",\n    permissions: \"string[]\"\n  }]\n});\n\nconst userData = await JSONFile(\"user-data\", {\n  path: \"./data/users.json\",\n  schema: userSchema,\n  prompt: \"Generate sample user data with various roles and permissions\",\n  temperature: 0.2\n});\n\n// Type-safe access\nconsole.log(userData.json.users[0].role); // Typed as 'admin' | 'user' | 'guest'\n```\n\n## Custom Formatting\n\nControl JSON formatting with pretty-printing options:\n\n```ts\nimport { JSONFile } from \"alchemy/ai\";\n\nconst apiMock = await JSONFile(\"api-mock\", {\n  path: \"./mocks/products.json\",\n  prompt: \"Create mock data for a product catalog API with 10 products\",\n  pretty: true,\n  indent: 4\n});\n```"
  }
}